var searchIndex = {};
searchIndex["ethjson"] = {"doc":"Json deserialization module.","items":[[0,"hash","ethjson","Lenient hash json deserialization for test json files.",null,null],[3,"H64","ethjson::hash","Lenient hash json deserialization for test json files.",null,null],[12,"0","","",0,null],[3,"Address","","Lenient hash json deserialization for test json files.",null,null],[12,"0","","",1,null],[3,"H256","","Lenient hash json deserialization for test json files.",null,null],[12,"0","","",2,null],[3,"Bloom","","Lenient hash json deserialization for test json files.",null,null],[12,"0","","",3,null],[11,"clone","","",0,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"cmp","","",0,{"inputs":[{"name":"h64"},{"name":"h64"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"h64"},{"name":"h64"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"h64"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"h64"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"h64"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"h64"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"h64"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"h64"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"h64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"h64"}}],[11,"into","","",0,{"inputs":[{"name":"h64"}],"output":{"name":"hash64"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"cmp","","",1,{"inputs":[{"name":"address"},{"name":"address"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"address"},{"name":"address"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"address"},{"name":"address"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"address"},{"name":"address"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"address"},{"name":"address"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"address"},{"name":"address"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"address"},{"name":"address"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"address"},{"name":"address"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"address"}}],[11,"into","","",1,{"inputs":[{"name":"address"}],"output":{"name":"hash160"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"cmp","","",2,{"inputs":[{"name":"h256"},{"name":"h256"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"h256"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"h256"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"h256"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"h256"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"h256"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"h256"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"h256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"h256"}}],[11,"into","","",2,{"inputs":[{"name":"h256"}],"output":{"name":"hash256"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"bloom"}],"output":{"name":"bloom"}}],[11,"cmp","","",3,{"inputs":[{"name":"bloom"},{"name":"bloom"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"bloom"},{"name":"bloom"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"bloom"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"bloom"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"bloom"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"bloom"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"bloom"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"bloom"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"bloom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bloom"}}],[11,"into","","",3,{"inputs":[{"name":"bloom"}],"output":{"name":"hash2048"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"uint","ethjson","Lenient uint json deserialization for test json files.",null,null],[3,"Uint","ethjson::uint","Lenient uint json deserialization for test json files.",null,null],[12,"0","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"uint"}}],[11,"fmt","","",4,{"inputs":[{"name":"uint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"uint"}],"output":{"name":"uint"}}],[11,"into","","",4,{"inputs":[{"name":"uint"}],"output":{"name":"u256"}}],[11,"into","","",4,{"inputs":[{"name":"uint"}],"output":{"name":"u64"}}],[11,"into","","",4,{"inputs":[{"name":"uint"}],"output":{"name":"usize"}}],[11,"into","","",4,{"inputs":[{"name":"uint"}],"output":{"name":"u8"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"bytes","ethjson","Lenient bytes json deserialization for test json files.",null,null],[3,"Bytes","ethjson::bytes","Lenient bytes json deserialization for test json files.",null,null],[11,"default","","",5,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",5,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"into","","",5,{"inputs":[{"name":"bytes"}],"output":{"name":"vec"}}],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",6,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",6,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",6,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",6,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",6,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",6,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",6,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",6,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",6,null],[11,"as_slice","","Extracts a slice containing the entire vector.",6,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",6,null],[11,"set_len","","Sets the length of a vector.",6,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",6,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",6,null],[11,"push","","Appends an element to the back of a collection.",6,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",6,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",6,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",6,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",6,null],[11,"len","","Returns the number of elements in the vector.",6,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",6,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",6,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",6,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","","",6,null],[11,"as_mut","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",6,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"vec"}}],[11,"drop","","",6,null],[11,"cmp","","",6,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"extend","","",6,null],[11,"extend","","",6,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",6,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",6,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,null],[11,"deref","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",6,null],[11,"borrow_mut","","",6,null],[11,"borrow","","",6,null],[11,"from","","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"deref","ethjson::bytes","",5,{"inputs":[{"name":"bytes"}],"output":{"name":"vec"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"blockchain","ethjson","Blockchain test deserialization.",null,null],[0,"account","ethjson::blockchain","Blockchain test account deserializer.",null,null],[3,"Account","ethjson::blockchain::account","Blockchain test account deserializer.",null,null],[12,"balance","","Balance.",7,null],[12,"code","","Code.",7,null],[12,"nonce","","Nonce.",7,null],[12,"storage","","Storage.",7,null],[11,"fmt","","",7,{"inputs":[{"name":"account"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"account"},{"name":"account"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"account"},{"name":"account"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"account"}],"output":{"name":"account"}}],[0,"block","ethjson::blockchain","Blockchain test block deserializer.",null,null],[3,"Block","ethjson::blockchain::block","Blockchain test block deserializer.",null,null],[11,"fmt","","",8,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"rlp","","Returns block rlp.",8,{"inputs":[{"name":"block"}],"output":{"name":"vec"}}],[0,"blockchain","ethjson::blockchain","Blockchain deserialization.",null,null],[3,"BlockChain","ethjson::blockchain::blockchain","Blockchain deserialization.",null,null],[12,"genesis_block","","Genesis block header.",9,null],[12,"genesis_rlp","","Genesis block rlp.",9,null],[12,"blocks","","Blocks.",9,null],[12,"post_state","","Post state.",9,null],[12,"pre_state","","Pre state.",9,null],[12,"best_block","","Hash of best block.",9,null],[11,"fmt","","",9,{"inputs":[{"name":"blockchain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"blockchain"},{"name":"blockchain"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"blockchain"},{"name":"blockchain"}],"output":{"name":"bool"}}],[11,"blocks_rlp","","Returns blocks rlp.",9,{"inputs":[{"name":"blockchain"}],"output":{"name":"vec"}}],[11,"genesis","","Returns spec compatible genesis struct.",9,{"inputs":[{"name":"blockchain"}],"output":{"name":"genesis"}}],[0,"header","ethjson::blockchain","Blockchain test header deserializer.",null,null],[3,"Header","ethjson::blockchain::header","Blockchain test header deserializer.",null,null],[12,"bloom","","Blocks bloom.",10,null],[12,"author","","Blocks author.",10,null],[12,"difficulty","","Difficulty.",10,null],[12,"extra_data","","Extra data.",10,null],[12,"gas_limit","","Gas limit.",10,null],[12,"gas_used","","Gas used.",10,null],[12,"hash","","Hash.",10,null],[12,"mix_hash","","Mix hash.",10,null],[12,"nonce","","Seal nonce.",10,null],[12,"number","","Block number.",10,null],[12,"parent_hash","","Parent hash.",10,null],[12,"receipts_root","","Receipt root.",10,null],[12,"state_root","","State root.",10,null],[12,"timestamp","","Timestamp.",10,null],[12,"transactions_root","","Transactions root.",10,null],[12,"uncles_hash","","Uncles hash.",10,null],[11,"fmt","","",10,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[0,"state","ethjson::blockchain","Blockchain test state deserializer.",null,null],[3,"State","ethjson::blockchain::state","Blockchain test state deserializer.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"into_iter","","",11,{"inputs":[{"name":"state"}],"output":{"name":"intoiter"}}],[0,"transaction","ethjson::blockchain","Blockchain test transaction deserialization.",null,null],[3,"Transaction","ethjson::blockchain::transaction","Blockchain test transaction deserialization.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[0,"test","ethjson::blockchain","Blockchain test deserializer.",null,null],[3,"Test","ethjson::blockchain::test","Blockchain test deserializer.",null,null],[11,"fmt","","",13,{"inputs":[{"name":"test"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"test"},{"name":"test"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"test"},{"name":"test"}],"output":{"name":"bool"}}],[11,"into_iter","","",13,{"inputs":[{"name":"test"}],"output":{"name":"intoiter"}}],[11,"load","","Loads test from json.",13,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"spec","ethjson","Spec deserialization.",null,null],[0,"account","ethjson::spec","Spec account deserialization.",null,null],[3,"Account","ethjson::spec::account","Spec account.",null,null],[12,"builtin","","Builtin contract.",14,null],[12,"balance","","Balance.",14,null],[12,"nonce","","Nonce.",14,null],[11,"fmt","","",14,{"inputs":[{"name":"account"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"account"},{"name":"account"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"account"},{"name":"account"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if account does not have nonce and balance.",14,{"inputs":[{"name":"account"}],"output":{"name":"bool"}}],[0,"builtin","ethjson::spec","Spec builtin deserialization.",null,null],[3,"Linear","ethjson::spec::builtin","Linear pricing.",null,null],[12,"base","","Base price.",15,null],[12,"word","","Price for word.",15,null],[3,"Builtin","","Spec builtin.",null,null],[12,"name","","Builtin name.",16,null],[12,"pricing","","Builtin pricing.",16,null],[4,"Pricing","","Pricing variants.",null,null],[13,"Linear","","Linear pricing.",17,null],[11,"fmt","","",15,{"inputs":[{"name":"linear"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"linear"},{"name":"linear"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"linear"},{"name":"linear"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"linear"}],"output":{"name":"linear"}}],[11,"fmt","","",17,{"inputs":[{"name":"pricing"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"pricing"},{"name":"pricing"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"pricing"},{"name":"pricing"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"pricing"}],"output":{"name":"pricing"}}],[11,"fmt","","",16,{"inputs":[{"name":"builtin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"builtin"},{"name":"builtin"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"builtin"},{"name":"builtin"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"builtin"}],"output":{"name":"builtin"}}],[0,"genesis","ethjson::spec","Spec genesis deserialization.",null,null],[3,"Genesis","ethjson::spec::genesis","Spec genesis.",null,null],[12,"seal","","Seal.",18,null],[12,"difficulty","","Difficulty.",18,null],[12,"author","","Block author.",18,null],[12,"timestamp","","Block timestamp.",18,null],[12,"parent_hash","","Parent hash.",18,null],[12,"gas_limit","","Gas limit.",18,null],[12,"transactions_root","","Transactions root.",18,null],[12,"receipts_root","","Receipts root.",18,null],[12,"state_root","","State root.",18,null],[12,"gas_used","","Gas used.",18,null],[12,"extra_data","","Extra data.",18,null],[11,"fmt","","",18,{"inputs":[{"name":"genesis"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"genesis"},{"name":"genesis"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"genesis"},{"name":"genesis"}],"output":{"name":"bool"}}],[0,"params","ethjson::spec","Spec params deserialization.",null,null],[3,"Params","ethjson::spec::params","Spec params.",null,null],[12,"account_start_nonce","","Account start nonce.",19,null],[12,"maximum_extra_data_size","","Maximum size of extra data.",19,null],[12,"network_id","","Network id.",19,null],[12,"min_gas_limit","","Minimum gas limit.",19,null],[11,"fmt","","",19,{"inputs":[{"name":"params"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"params"},{"name":"params"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"params"},{"name":"params"}],"output":{"name":"bool"}}],[0,"spec","ethjson::spec","Spec deserialization.",null,null],[3,"Spec","ethjson::spec::spec","Spec deserialization.",null,null],[12,"name","","Spec name.",20,null],[12,"engine","","Engine.",20,null],[12,"params","","Spec params.",20,null],[12,"genesis","","Genesis header.",20,null],[12,"accounts","","Genesis state.",20,null],[12,"nodes","","Boot nodes.",20,null],[11,"fmt","","",20,{"inputs":[{"name":"spec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"spec"},{"name":"spec"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"spec"},{"name":"spec"}],"output":{"name":"bool"}}],[11,"load","","Loads test from json.",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"seal","ethjson::spec","Spec seal deserialization.",null,null],[3,"Ethereum","ethjson::spec::seal","Ethereum seal.",null,null],[12,"nonce","","Seal nonce.",21,null],[12,"mix_hash","","Seal mix hash.",21,null],[3,"Generic","","Generic seal.",null,null],[12,"fields","","Number of fields.",22,null],[12,"rlp","","Their rlp.",22,null],[4,"Seal","","Seal variants.",null,null],[13,"Ethereum","","Ethereum seal.",23,null],[13,"Generic","","Generic seal.",23,null],[11,"fmt","","",21,{"inputs":[{"name":"ethereum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"ethereum"},{"name":"ethereum"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"ethereum"},{"name":"ethereum"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"generic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"generic"},{"name":"generic"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"generic"},{"name":"generic"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"seal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"seal"},{"name":"seal"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"seal"},{"name":"seal"}],"output":{"name":"bool"}}],[0,"engine","ethjson::spec","Engine deserialization.",null,null],[4,"Engine","ethjson::spec::engine","Engine deserialization.",null,null],[13,"Null","","Null engine.",24,null],[13,"Ethash","","Ethash engine.",24,null],[13,"BasicAuthority","","BasicAuthority engine.",24,null],[11,"fmt","","",24,{"inputs":[{"name":"engine"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"engine"},{"name":"engine"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"engine"},{"name":"engine"}],"output":{"name":"bool"}}],[0,"state","ethjson::spec","Blockchain test state deserializer.",null,null],[3,"State","ethjson::spec::state","Blockchain test state deserializer.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"builtins","","Returns all builtins.",25,{"inputs":[{"name":"state"}],"output":{"name":"btreemap"}}],[11,"into_iter","","",25,{"inputs":[{"name":"state"}],"output":{"name":"intoiter"}}],[0,"ethash","ethjson::spec","Ethash params deserialization.",null,null],[3,"EthashParams","ethjson::spec::ethash","Ethash params deserialization.",null,null],[12,"gas_limit_bound_divisor","","Gas limit divisor.",26,null],[12,"minimum_difficulty","","Minimum difficulty.",26,null],[12,"difficulty_bound_divisor","","Difficulty bound divisor.",26,null],[12,"duration_limit","","Block duration.",26,null],[12,"block_reward","","Block reward.",26,null],[12,"registrar","","Namereg contract address.",26,null],[12,"frontier_compatibility_mode_limit","","Homestead transition block number.",26,null],[12,"dao_rescue_soft_fork","","DAO rescue soft-fork?",26,null],[3,"Ethash","","Ethash engine deserialization.",null,null],[12,"params","","Ethash params.",27,null],[11,"fmt","","",26,{"inputs":[{"name":"ethashparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"ethashparams"},{"name":"ethashparams"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"ethashparams"},{"name":"ethashparams"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"ethash"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"ethash"},{"name":"ethash"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"ethash"},{"name":"ethash"}],"output":{"name":"bool"}}],[0,"basic_authority","ethjson::spec","Ethash params deserialization.",null,null],[3,"BasicAuthorityParams","ethjson::spec::basic_authority","Ethash params deserialization.",null,null],[12,"gas_limit_bound_divisor","","Gas limit divisor.",28,null],[12,"duration_limit","","Block duration.",28,null],[12,"authorities","","Valid authorities",28,null],[3,"BasicAuthority","","Ethash engine deserialization.",null,null],[12,"params","","Ethash params.",29,null],[11,"fmt","","",28,{"inputs":[{"name":"basicauthorityparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"basicauthorityparams"},{"name":"basicauthorityparams"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"basicauthorityparams"},{"name":"basicauthorityparams"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"basicauthority"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"basicauthority"},{"name":"basicauthority"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"basicauthority"},{"name":"basicauthority"}],"output":{"name":"bool"}}],[0,"vm","ethjson","Vm test loader.",null,null],[0,"env","ethjson::vm","Vm environment.",null,null],[3,"Env","ethjson::vm::env","Vm environment.",null,null],[12,"author","","Address.",30,null],[12,"difficulty","","Difficulty",30,null],[12,"gas_limit","","Gas limit.",30,null],[12,"number","","Number.",30,null],[12,"timestamp","","Timestamp.",30,null],[11,"fmt","","",30,{"inputs":[{"name":"env"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"env"},{"name":"env"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"env"},{"name":"env"}],"output":{"name":"bool"}}],[0,"transaction","ethjson::vm","Executed transaction.",null,null],[3,"Transaction","ethjson::vm::transaction","Executed transaction.",null,null],[12,"address","","Contract address.",31,null],[12,"sender","","Transaction sender.",31,null],[12,"code","","Contract code.",31,null],[12,"data","","Input data.",31,null],[12,"gas","","Gas.",31,null],[12,"gas_price","","Gas price.",31,null],[12,"origin","","Transaction origin.",31,null],[12,"value","","Sent value.",31,null],[11,"fmt","","",31,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[0,"vm","ethjson::vm","Vm execution env.",null,null],[3,"Vm","ethjson::vm::vm","Reporesents vm execution environment before and after exeuction of transaction.",null,null],[12,"calls","","Contract calls made internaly by executed transaction.",32,null],[12,"env","","Env info.",32,null],[12,"transaction","","Executed transaction",32,null],[12,"gas_left","","Gas left after transaction execution.",32,null],[12,"logs","","Logs created during execution of transaction.",32,null],[12,"output","","Transaction output.",32,null],[12,"post_state","","Post execution vm state.",32,null],[12,"pre_state","","Pre execution vm state.",32,null],[11,"fmt","","",32,{"inputs":[{"name":"vm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"vm"},{"name":"vm"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"vm"},{"name":"vm"}],"output":{"name":"bool"}}],[11,"out_of_gas","","Returns true if transaction execution run out of gas.",32,{"inputs":[{"name":"vm"}],"output":{"name":"bool"}}],[0,"log","ethjson::vm","Vm log deserialization.",null,null],[3,"Log","ethjson::vm::log","Vm log deserialization.",null,null],[12,"address","","Log address.",33,null],[12,"bloom","","Log bloom.",33,null],[12,"data","","Data.",33,null],[12,"topics","","Topics.",33,null],[11,"fmt","","",33,{"inputs":[{"name":"log"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"log"},{"name":"log"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"log"},{"name":"log"}],"output":{"name":"bool"}}],[0,"call","ethjson::vm","Vm call deserialization.",null,null],[3,"Call","ethjson::vm::call","Vm call deserialization.",null,null],[12,"data","","Call data.",34,null],[12,"destination","","Call destination.",34,null],[12,"gas_limit","","Gas limit.",34,null],[12,"value","","Call value.",34,null],[11,"fmt","","",34,{"inputs":[{"name":"call"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"call"},{"name":"call"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"call"},{"name":"call"}],"output":{"name":"bool"}}],[0,"test","ethjson::vm","Vm test deserializer.",null,null],[3,"Test","ethjson::vm::test","Vm test deserializer.",null,null],[11,"fmt","","",35,{"inputs":[{"name":"test"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"test"},{"name":"test"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"test"},{"name":"test"}],"output":{"name":"bool"}}],[11,"into_iter","","",35,{"inputs":[{"name":"test"}],"output":{"name":"intoiter"}}],[11,"load","","Loads test from json.",35,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"maybe","ethjson","Deserializer of empty string values into optionals.",null,null],[4,"MaybeEmpty","ethjson::maybe","Deserializer of empty string values into optionals.",null,null],[13,"Some","","Some.",36,null],[13,"None","","None.",36,null],[11,"fmt","","",36,{"inputs":[{"name":"maybeempty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"maybeempty"},{"name":"maybeempty"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"maybeempty"},{"name":"maybeempty"}],"output":{"name":"bool"}}],[11,"deserialize","","",36,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"into","","",36,{"inputs":[{"name":"maybeempty"}],"output":{"name":"option"}}],[0,"state","ethjson","State test deserialization.",null,null],[0,"state","ethjson::state","State test deserialization.",null,null],[3,"State","ethjson::state::state","State test deserialization.",null,null],[12,"env","","Environment.",37,null],[12,"output","","Output.",37,null],[12,"pre_state","","Pre state.",37,null],[12,"post_state","","Post state.",37,null],[12,"post_state_root","","Post state root.",37,null],[12,"transaction","","Transaction.",37,null],[12,"logs","","Logs.",37,null],[11,"fmt","","",37,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[0,"transaction","ethjson::state","State test transaction deserialization.",null,null],[3,"Transaction","ethjson::state::transaction","State test transaction deserialization.",null,null],[12,"data","","Transaction data.",38,null],[12,"gas_limit","","Gas limit.",38,null],[12,"gas_price","","Gas price.",38,null],[12,"nonce","","Nonce.",38,null],[12,"secret","","Secret key.",38,null],[12,"to","","To.",38,null],[12,"value","","Value.",38,null],[11,"fmt","","",38,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[0,"test","ethjson::state","State test deserializer.",null,null],[3,"Test","ethjson::state::test","State test deserializer.",null,null],[11,"fmt","","",39,{"inputs":[{"name":"test"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"test"},{"name":"test"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"test"},{"name":"test"}],"output":{"name":"bool"}}],[11,"into_iter","","",39,{"inputs":[{"name":"test"}],"output":{"name":"intoiter"}}],[11,"load","","Loads test from json.",39,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"log","ethjson::state","State test log deserialization.",null,null],[3,"Log","ethjson::state::log","State test log deserialization.",null,null],[12,"address","","Address.",40,null],[12,"topics","","Topics.",40,null],[12,"data","","Data.",40,null],[12,"bloom","","Bloom.",40,null],[11,"fmt","","",40,{"inputs":[{"name":"log"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"log"},{"name":"log"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"log"},{"name":"log"}],"output":{"name":"bool"}}],[0,"transaction","ethjson","Transaction test deserialization.",null,null],[3,"Transaction","ethjson::transaction","Transaction test transaction deserialization.",null,null],[12,"data","","Transaction data.",41,null],[12,"gas_limit","","Gas limit.",41,null],[12,"gas_price","","Gas price.",41,null],[12,"nonce","","Nonce.",41,null],[12,"to","","To.",41,null],[12,"value","","Value.",41,null],[12,"r","","R.",41,null],[12,"s","","S.",41,null],[12,"v","","V.",41,null],[3,"TransactionTest","","Transaction test deserialization.",null,null],[12,"block_number","","Block number.",42,null],[12,"rlp","","Transaction rlp.",42,null],[12,"sender","","Transaction sender.",42,null],[12,"transaction","","Transaction",42,null],[3,"Test","","TransactionTest test deserializer.",null,null],[11,"fmt","","",41,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"transactiontest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"transactiontest"},{"name":"transactiontest"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"transactiontest"},{"name":"transactiontest"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"test"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"test"},{"name":"test"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"test"},{"name":"test"}],"output":{"name":"bool"}}],[11,"into_iter","","",43,{"inputs":[{"name":"test"}],"output":{"name":"intoiter"}}],[11,"load","","Loads test from json.",43,{"inputs":[{"name":"r"}],"output":{"name":"result"}}]],"paths":[[3,"H64"],[3,"Address"],[3,"H256"],[3,"Bloom"],[3,"Uint"],[3,"Bytes"],[3,"Vec"],[3,"Account"],[3,"Block"],[3,"BlockChain"],[3,"Header"],[3,"State"],[3,"Transaction"],[3,"Test"],[3,"Account"],[3,"Linear"],[3,"Builtin"],[4,"Pricing"],[3,"Genesis"],[3,"Params"],[3,"Spec"],[3,"Ethereum"],[3,"Generic"],[4,"Seal"],[4,"Engine"],[3,"State"],[3,"EthashParams"],[3,"Ethash"],[3,"BasicAuthorityParams"],[3,"BasicAuthority"],[3,"Env"],[3,"Transaction"],[3,"Vm"],[3,"Log"],[3,"Call"],[3,"Test"],[4,"MaybeEmpty"],[3,"State"],[3,"Transaction"],[3,"Test"],[3,"Log"],[3,"Transaction"],[3,"TransactionTest"],[3,"Test"]]};
searchIndex["parity"] = {"doc":"Ethcore client application.","items":[[11,"start","jsonrpc_http_server","",0,{"inputs":[{"name":"socketaddr"},{"name":"arc"},{"name":"vec"}],"output":{"name":"result"}}],[11,"set_panic_handler","","",0,null],[11,"drop","","",0,null],[11,"set_panic_handler","ethcore_dapps","Set callback for panics.",1,null],[11,"drop","","",1,null],[11,"drop","ethcore_signer::ws_server","",2,null],[11,"on_panic","","",2,null],[11,"start_listening","ethcore_rpc::v1::helpers::signing_queue","Blocks the thread and starts listening for notifications regarding all actions in the queue.\nFor each event, `listener` callback will be invoked.\nThis method can be used only once (only single consumer of events can exist).",3,{"inputs":[{"name":"confirmationsqueue"},{"name":"f"}],"output":{"name":"result"}}],[11,"finish","","Notifies consumer that the communcation is over.\nNo more events will be sent after this function is invoked.",3,null],[11,"add_request","","",3,{"inputs":[{"name":"confirmationsqueue"},{"name":"transactionrequest"}],"output":{"name":"confirmationpromise"}}],[11,"peek","","",3,{"inputs":[{"name":"confirmationsqueue"},{"name":"u256"}],"output":{"name":"option"}}],[11,"request_rejected","","",3,{"inputs":[{"name":"confirmationsqueue"},{"name":"u256"}],"output":{"name":"option"}}],[11,"request_confirmed","","",3,{"inputs":[{"name":"confirmationsqueue"},{"name":"u256"},{"name":"result"}],"output":{"name":"option"}}],[11,"requests","","",3,{"inputs":[{"name":"confirmationsqueue"}],"output":{"name":"vec"}}],[11,"len","","",3,{"inputs":[{"name":"confirmationsqueue"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"confirmationsqueue"}],"output":{"name":"bool"}}],[11,"drop","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"confirmationsqueue"}}],[14,"die!","parity","",null,null]],"paths":[[3,"Server"],[3,"Server"],[3,"Server"],[3,"ConfirmationsQueue"]]};
searchIndex["ethcore_signer"] = {"doc":"Signer module","items":[[3,"DefaultTimeProvider","ethcore_signer","Default implementation of `TimeProvider` using system time.",null,null],[3,"AuthCodes","","Manages authorization codes for `SignerUIs`",null,null],[3,"ServerBuilder","","Builder for `WebSockets` server",null,null],[3,"Server","","`WebSockets` server implementation.",null,null],[4,"ServerError","","Signer startup error",null,null],[13,"IoError","","Wrapped `std::io::Error`",0,null],[13,"WebSocket","","Other `ws-rs` error",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"defaulttimeprovider"}}],[11,"now","","",1,{"inputs":[{"name":"defaulttimeprovider"}],"output":{"name":"u64"}}],[11,"from_file","","Reads `AuthCodes` from file and creates new instance using `DefaultTimeProvider`.",2,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"to_file","","Writes all `AuthCodes` to a disk.",2,{"inputs":[{"name":"authcodes"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AuthCodes` store with given `TimeProvider`.",2,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"self"}}],[11,"is_valid","","Checks if given hash is correct identifier of `SignerUI`",2,{"inputs":[{"name":"authcodes"},{"name":"h256"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"generate_new","","Generates and returns a new code that can be used by `SignerUIs`",2,{"inputs":[{"name":"authcodes"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"servererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"add_delegate","","",3,{"inputs":[{"name":"serverbuilder"},{"name":"iodelegate"}],"output":null}],[11,"new","","Creates new `ServerBuilder`",3,{"inputs":[{"name":"arc"},{"name":"pathbuf"}],"output":{"name":"self"}}],[11,"start","","Starts a new `WebSocket` server in separate thread.\nReturns a `Server` handle which closes the server when droped.",3,{"inputs":[{"name":"serverbuilder"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"on_panic","","",4,{"inputs":[{"name":"server"},{"name":"f"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"server"}],"output":null}],[8,"TimeProvider","","Providing current time in seconds",null,null],[10,"now","","Returns timestamp (in seconds since epoch)",5,{"inputs":[{"name":"timeprovider"}],"output":{"name":"u64"}}]],"paths":[[4,"ServerError"],[3,"DefaultTimeProvider"],[3,"AuthCodes"],[3,"ServerBuilder"],[3,"Server"],[8,"TimeProvider"]]};
searchIndex["ethcore_dapps"] = {"doc":"Ethcore Webapplications for Parity\n```\nextern crate jsonrpc_core;\nextern crate ethcore_dapps;","items":[[3,"ServerBuilder","ethcore_dapps","Webapps HTTP+RPC server build.",null,null],[3,"Server","","Webapps HTTP server.",null,null],[4,"ServerError","","Webapp Server startup error",null,null],[13,"IoError","","Wrapped `std::io::Error`",0,null],[13,"Other","","Other `hyper` error",0,null],[11,"add_delegate","","",1,{"inputs":[{"name":"serverbuilder"},{"name":"iodelegate"}],"output":null}],[11,"new","","Construct new dapps server",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"start_unsecure_http","","Asynchronously start server with no authentication,\nreturns result with `Server` handle on success or an error.",1,{"inputs":[{"name":"serverbuilder"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"start_basic_auth_http","","Asynchronously start server with `HTTP Basic Authentication`,\nreturn result with `Server` handle on success or an error.",1,{"inputs":[{"name":"serverbuilder"},{"name":"socketaddr"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_panic_handler","","Set callback for panics.",2,{"inputs":[{"name":"server"},{"name":"f"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"server"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"servererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"ServerError"],[3,"ServerBuilder"],[3,"Server"]]};
searchIndex["ethcore_rpc"] = {"doc":"Ethcore rpc.","items":[[11,"start","jsonrpc_http_server","",0,{"inputs":[{"name":"socketaddr"},{"name":"arc"},{"name":"vec"}],"output":{"name":"result"}}],[11,"set_panic_handler","","",0,null],[11,"drop","","",0,null],[3,"Server","ethcore_rpc","jsonrpc http server.",null,null],[11,"from","jsonrpc_http_server","",1,{"inputs":[{"name":"error"}],"output":{"name":"rpcservererror"}}],[11,"fmt","","",1,{"inputs":[{"name":"rpcservererror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"RpcServerError","ethcore_rpc","RPC Server startup error",null,null],[13,"IoError","","",1,null],[13,"Other","","",1,null],[3,"ConfirmationsQueue","","Queue for all unconfirmed transactions.",null,null],[3,"RpcServer","","Http server.",null,null],[0,"v1","","Ethcore rpc v1.",null,null],[3,"Web3Client","ethcore_rpc::v1","Web3 rpc implementation.",null,null],[3,"EthClient","","Eth rpc implementation.",null,null],[3,"EthFilterClient","","Eth filter rpc implementation.",null,null],[3,"EthSigningUnsafeClient","","Implementation of functions that require signing when no trusted signer is used.",null,null],[3,"EthSigningQueueClient","","Implementation of functions that require signing when no trusted signer is used.",null,null],[3,"NetClient","","Net rpc implementation.",null,null],[3,"PersonalClient","","Account management (personal) rpc implementation.",null,null],[3,"SignerClient","","Transactions confirmation (personal) rpc implementation.",null,null],[3,"EthcoreClient","","Ethcore implementation.",null,null],[3,"EthcoreSetClient","","Ethcore-specific rpc interface for operations altering the settings.",null,null],[3,"TracesClient","","Traces api implementation.",null,null],[3,"RpcClient","","RPC generic methods implementation.",null,null],[3,"ConfirmationsQueue","","Queue for all unconfirmed transactions.",null,null],[11,"new","","Creates new Web3Client.",2,{"inputs":[],"output":{"name":"self"}}],[11,"client_version","","",2,{"inputs":[{"name":"web3client"},{"name":"params"}],"output":{"name":"result"}}],[11,"sha3","","",2,{"inputs":[{"name":"web3client"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new EthClient.",3,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"bool"}],"output":{"name":"ethclient"}}],[11,"protocol_version","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"syncing","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"author","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"is_mining","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"hashrate","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"gas_price","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"accounts","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_number","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"balance","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"storage_at","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_count","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_transaction_count_by_hash","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_transaction_count_by_number","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_uncles_count_by_hash","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_uncles_count_by_number","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"code_at","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_by_hash","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_by_number","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_by_hash","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_by_block_hash_and_index","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_by_block_number_and_index","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_receipt","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"uncle_by_block_hash_and_index","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"uncle_by_block_number_and_index","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"compilers","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"logs","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"work","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"submit_work","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"submit_hashrate","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"send_raw_transaction","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"call","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"estimate_gas","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"compile_lll","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"compile_serpent","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"compile_solidity","","",3,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new Eth filter client.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"new_filter","","",4,{"inputs":[{"name":"ethfilterclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new_block_filter","","",4,{"inputs":[{"name":"ethfilterclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new_pending_transaction_filter","","",4,{"inputs":[{"name":"ethfilterclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"filter_changes","","",4,{"inputs":[{"name":"ethfilterclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"filter_logs","","",4,{"inputs":[{"name":"ethfilterclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"uninstall_filter","","",4,{"inputs":[{"name":"ethfilterclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates a new signing queue client given shared signing queue.",5,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"sign","","",5,{"inputs":[{"name":"ethsigningqueueclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"send_transaction","","",5,{"inputs":[{"name":"ethsigningqueueclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new EthClient.",6,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"sign","","",6,{"inputs":[{"name":"ethsigningunsafeclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"send_transaction","","",6,{"inputs":[{"name":"ethsigningunsafeclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new NetClient.",7,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[11,"version","","",7,{"inputs":[{"name":"netclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"peer_count","","",7,{"inputs":[{"name":"netclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"is_listening","","",7,{"inputs":[{"name":"netclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"start_network","","",7,{"inputs":[{"name":"netclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"stop_network","","",7,{"inputs":[{"name":"netclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new PersonalClient",8,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"option"}],"output":{"name":"self"}}],[11,"signer_enabled","","",8,{"inputs":[{"name":"personalclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"accounts","","",8,{"inputs":[{"name":"personalclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new_account","","",8,{"inputs":[{"name":"personalclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"unlock_account","","",8,{"inputs":[{"name":"personalclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"sign_and_send_transaction","","",8,{"inputs":[{"name":"personalclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Create new instance of signer client.",9,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"transactions_to_confirm","","",9,{"inputs":[{"name":"signerclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"confirm_transaction","","",9,{"inputs":[{"name":"signerclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"reject_transaction","","",9,{"inputs":[{"name":"signerclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new `EthcoreClient`.",10,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"option"}],"output":{"name":"self"}}],[11,"transactions_limit","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"min_gas_price","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"extra_data","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"gas_floor_target","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"gas_ceil_target","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"dev_logs","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"dev_logs_levels","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"net_chain","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"net_max_peers","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"net_port","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"node_name","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"rpc_settings","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"default_extra_data","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"gas_price_statistics","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"unsigned_transactions_count","","",10,{"inputs":[{"name":"ethcoreclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new `EthcoreSetClient`.",11,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"set_min_gas_price","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"set_gas_floor_target","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"set_gas_ceil_target","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"set_extra_data","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"set_author","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"set_transactions_limit","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"add_reserved_peer","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"remove_reserved_peer","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"drop_non_reserved_peers","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"accept_non_reserved_peers","","",11,{"inputs":[{"name":"ethcoresetclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new Traces client.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"filter","","",12,{"inputs":[{"name":"tracesclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_traces","","",12,{"inputs":[{"name":"tracesclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_traces","","",12,{"inputs":[{"name":"tracesclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"trace","","",12,{"inputs":[{"name":"tracesclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"call","","",12,{"inputs":[{"name":"tracesclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new `RpcClient`.",13,{"inputs":[{"name":"btreemap"}],"output":{"name":"self"}}],[11,"rpc_modules","","",13,{"inputs":[{"name":"rpcclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"modules","","",13,{"inputs":[{"name":"rpcclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"default","ethcore_rpc","",14,{"inputs":[],"output":{"name":"self"}}],[11,"start_listening","","Blocks the thread and starts listening for notifications regarding all actions in the queue.\nFor each event, `listener` callback will be invoked.\nThis method can be used only once (only single consumer of events can exist).",14,{"inputs":[{"name":"confirmationsqueue"},{"name":"f"}],"output":{"name":"result"}}],[11,"finish","","Notifies consumer that the communcation is over.\nNo more events will be sent after this function is invoked.",14,{"inputs":[{"name":"confirmationsqueue"}],"output":null}],[11,"drop","","",14,{"inputs":[{"name":"confirmationsqueue"}],"output":null}],[11,"add_request","","",14,{"inputs":[{"name":"confirmationsqueue"},{"name":"transactionrequest"}],"output":{"name":"confirmationpromise"}}],[11,"peek","","",14,{"inputs":[{"name":"confirmationsqueue"},{"name":"u256"}],"output":{"name":"option"}}],[11,"request_rejected","","",14,{"inputs":[{"name":"confirmationsqueue"},{"name":"u256"}],"output":{"name":"option"}}],[11,"request_confirmed","","",14,{"inputs":[{"name":"confirmationsqueue"},{"name":"u256"},{"name":"rpcresult"}],"output":{"name":"option"}}],[11,"requests","","",14,{"inputs":[{"name":"confirmationsqueue"}],"output":{"name":"vec"}}],[11,"len","","",14,{"inputs":[{"name":"confirmationsqueue"}],"output":{"name":"usize"}}],[11,"is_empty","","",14,{"inputs":[{"name":"confirmationsqueue"}],"output":{"name":"bool"}}],[0,"traits","ethcore_rpc::v1","Ethereum rpc interfaces.",null,null],[0,"web3","ethcore_rpc::v1::traits","Web3 rpc interface.",null,null],[8,"Web3","ethcore_rpc::v1::traits::web3","Web3 rpc interface.",null,null],[10,"client_version","","Returns current client version.",15,{"inputs":[{"name":"web3"},{"name":"params"}],"output":{"name":"result"}}],[10,"sha3","","Returns sha3 of the given data",15,{"inputs":[{"name":"web3"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",15,{"inputs":[{"name":"web3"}],"output":{"name":"iodelegate"}}],[0,"eth","ethcore_rpc::v1::traits","Eth rpc interface.",null,null],[8,"Eth","ethcore_rpc::v1::traits::eth","Eth rpc interface.",null,null],[10,"protocol_version","","Returns protocol version.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"syncing","","Returns an object with data about the sync status or false. (wtf?)",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"hashrate","","Returns the number of hashes per second that the node is mining with.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"author","","Returns block author.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"is_mining","","Returns true if client is actively mining new blocks.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"gas_price","","Returns current gas_price.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"accounts","","Returns accounts list.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"block_number","","Returns highest block number.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"balance","","Returns balance of the given account.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"storage_at","","Returns content of the storage at given address.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"block_by_hash","","Returns block with given hash.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"block_by_number","","Returns block with given number.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"transaction_count","","Returns the number of transactions sent from given address at given time (block number).",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"block_transaction_count_by_hash","","Returns the number of transactions in a block with given hash.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"block_transaction_count_by_number","","Returns the number of transactions in a block with given block number.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"block_uncles_count_by_hash","","Returns the number of uncles in a block with given hash.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"block_uncles_count_by_number","","Returns the number of uncles in a block with given block number.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"code_at","","Returns the code at given address at given time (block number).",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"send_raw_transaction","","Sends signed transaction.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"call","","Call contract.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"estimate_gas","","Estimate gas needed for execution of given contract.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"transaction_by_hash","","Get transaction by it&#39;s hash.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"transaction_by_block_hash_and_index","","Returns transaction at given block hash and index.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"transaction_by_block_number_and_index","","Returns transaction by given block number and index.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"transaction_receipt","","Returns transaction receipt.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"uncle_by_block_hash_and_index","","Returns an uncles at given block and index.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"uncle_by_block_number_and_index","","Returns an uncles at given block and index.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"compilers","","Returns available compilers.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"compile_lll","","Compiles lll code.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"compile_solidity","","Compiles solidity.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"compile_serpent","","Compiles serpent.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"logs","","Returns logs matching given filter object.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"work","","Returns the hash of the current block, the seedHash, and the boundary condition to be met.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"submit_work","","Used for submitting a proof-of-work solution.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[10,"submit_hashrate","","Used for submitting mining hashrate.",16,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",16,{"inputs":[{"name":"eth"}],"output":{"name":"iodelegate"}}],[8,"EthFilter","","Eth filters rpc api (polling).",null,null],[10,"new_filter","","Returns id of new filter.",17,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[10,"new_block_filter","","Returns id of new block filter.",17,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[10,"new_pending_transaction_filter","","Returns id of new block filter.",17,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[10,"filter_changes","","Returns filter changes since last poll.",17,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[10,"filter_logs","","Returns all logs matching given filter (in a range &#39;from&#39; - &#39;to&#39;).",17,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[10,"uninstall_filter","","Uninstalls filter.",17,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",17,{"inputs":[{"name":"ethfilter"}],"output":{"name":"iodelegate"}}],[8,"EthSigning","","Signing methods implementation relying on unlocked accounts.",null,null],[10,"sign","","Signs the data with given address signature.",18,{"inputs":[{"name":"ethsigning"},{"name":"params"}],"output":{"name":"result"}}],[10,"send_transaction","","Sends transaction.",18,{"inputs":[{"name":"ethsigning"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",18,{"inputs":[{"name":"ethsigning"}],"output":{"name":"iodelegate"}}],[0,"net","ethcore_rpc::v1::traits","Net rpc interface.",null,null],[8,"Net","ethcore_rpc::v1::traits::net","Net rpc interface.",null,null],[10,"version","","Returns protocol version.",19,{"inputs":[{"name":"net"},{"name":"params"}],"output":{"name":"result"}}],[10,"peer_count","","Returns number of peers connected to node.",19,{"inputs":[{"name":"net"},{"name":"params"}],"output":{"name":"result"}}],[10,"is_listening","","Returns true if client is actively listening for network connections.\nOtherwise false.",19,{"inputs":[{"name":"net"},{"name":"params"}],"output":{"name":"result"}}],[10,"start_network","","Start the network.",19,{"inputs":[{"name":"net"},{"name":"params"}],"output":{"name":"result"}}],[10,"stop_network","","Stop the network.",19,{"inputs":[{"name":"net"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",19,{"inputs":[{"name":"net"}],"output":{"name":"iodelegate"}}],[0,"personal","ethcore_rpc::v1::traits","Personal rpc interface.",null,null],[8,"Personal","ethcore_rpc::v1::traits::personal","Personal rpc interface.",null,null],[10,"accounts","","Lists all stored accounts",20,{"inputs":[{"name":"personal"},{"name":"params"}],"output":{"name":"result"}}],[10,"new_account","","Creates new account (it becomes new current unlocked account)",20,{"inputs":[{"name":"personal"},{"name":"params"}],"output":{"name":"result"}}],[10,"unlock_account","","Unlocks specified account for use (can only be one unlocked account at one moment)",20,{"inputs":[{"name":"personal"},{"name":"params"}],"output":{"name":"result"}}],[10,"sign_and_send_transaction","","Sends transaction and signs it in single call. The account is not unlocked in such case.",20,{"inputs":[{"name":"personal"},{"name":"params"}],"output":{"name":"result"}}],[10,"signer_enabled","","Returns `true` if Trusted Signer is enabled, `false` otherwise.",20,{"inputs":[{"name":"personal"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",20,{"inputs":[{"name":"personal"}],"output":{"name":"iodelegate"}}],[8,"PersonalSigner","","Personal extension for transactions confirmations rpc interface.",null,null],[10,"transactions_to_confirm","","Returns a list of transactions to confirm.",21,{"inputs":[{"name":"personalsigner"},{"name":"params"}],"output":{"name":"result"}}],[10,"confirm_transaction","","Confirm and send a specific transaction.",21,{"inputs":[{"name":"personalsigner"},{"name":"params"}],"output":{"name":"result"}}],[10,"reject_transaction","","Reject the transaction request.",21,{"inputs":[{"name":"personalsigner"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",21,{"inputs":[{"name":"personalsigner"}],"output":{"name":"iodelegate"}}],[0,"ethcore","ethcore_rpc::v1::traits","Ethcore-specific rpc interface.",null,null],[8,"Ethcore","ethcore_rpc::v1::traits::ethcore","Ethcore-specific rpc interface.",null,null],[10,"transactions_limit","","Returns current transactions limit.",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"extra_data","","Returns mining extra data.",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"gas_floor_target","","Returns mining gas floor target.",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"gas_ceil_target","","Returns mining gas floor cap.",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"min_gas_price","","Returns minimal gas price for transaction to be included in queue.",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"dev_logs","","Returns latest logs",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"dev_logs_levels","","Returns logs levels",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"net_chain","","Returns chain name",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"net_max_peers","","Returns max peers",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"net_port","","Returns network port",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"rpc_settings","","Returns rpc settings",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"node_name","","Returns node name",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"default_extra_data","","Returns default extra data",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"gas_price_statistics","","Returns distribution of gas price in latest blocks.",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[10,"unsigned_transactions_count","","Returns number of unsigned transactions waiting in the signer queue (if signer enabled)\nReturns error when signer is disabled",22,{"inputs":[{"name":"ethcore"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",22,{"inputs":[{"name":"ethcore"}],"output":{"name":"iodelegate"}}],[0,"ethcore_set","ethcore_rpc::v1::traits","Ethcore-specific rpc interface for operations altering the settings.",null,null],[8,"EthcoreSet","ethcore_rpc::v1::traits::ethcore_set","Ethcore-specific rpc interface for operations altering the settings.",null,null],[10,"set_min_gas_price","","Sets new minimal gas price for mined blocks.",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[10,"set_gas_floor_target","","Sets new gas floor target for mined blocks.",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[10,"set_gas_ceil_target","","Sets new gas ceiling target for mined blocks.",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[10,"set_extra_data","","Sets new extra data for mined blocks.",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[10,"set_author","","Sets new author for mined block.",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[10,"set_transactions_limit","","Sets the limits for transaction queue.",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[10,"add_reserved_peer","","Add a reserved peer.",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[10,"remove_reserved_peer","","Remove a reserved peer.",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[10,"drop_non_reserved_peers","","Drop all non-reserved peers.",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[10,"accept_non_reserved_peers","","Accept non-reserved peers (default behavior)",23,{"inputs":[{"name":"ethcoreset"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",23,{"inputs":[{"name":"ethcoreset"}],"output":{"name":"iodelegate"}}],[0,"traces","ethcore_rpc::v1::traits","Traces specific rpc interface.",null,null],[8,"Traces","ethcore_rpc::v1::traits::traces","Traces specific rpc interface.",null,null],[10,"filter","","Returns traces matching given filter.",24,{"inputs":[{"name":"traces"},{"name":"params"}],"output":{"name":"result"}}],[10,"trace","","Returns transaction trace at given index.",24,{"inputs":[{"name":"traces"},{"name":"params"}],"output":{"name":"result"}}],[10,"transaction_traces","","Returns all traces of given transaction.",24,{"inputs":[{"name":"traces"},{"name":"params"}],"output":{"name":"result"}}],[10,"block_traces","","Returns all traces produced at given block.",24,{"inputs":[{"name":"traces"},{"name":"params"}],"output":{"name":"result"}}],[10,"call","","Executes the given call and returns a number of possible traces for it.",24,{"inputs":[{"name":"traces"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",24,{"inputs":[{"name":"traces"}],"output":{"name":"iodelegate"}}],[0,"rpc","ethcore_rpc::v1::traits","RPC interface.",null,null],[8,"Rpc","ethcore_rpc::v1::traits::rpc","RPC Interface.",null,null],[10,"modules","","Returns supported modules for Geth 1.3.6",25,{"inputs":[{"name":"rpc"},{"name":"params"}],"output":{"name":"result"}}],[10,"rpc_modules","","Returns supported modules for Geth 1.4.0",25,{"inputs":[{"name":"rpc"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",25,{"inputs":[{"name":"rpc"}],"output":{"name":"iodelegate"}}],[0,"tests","ethcore_rpc::v1","RPC unit test moduleS",null,null],[0,"helpers","ethcore_rpc::v1::tests","Test rpc services.",null,null],[3,"Config","ethcore_rpc::v1::tests::helpers","TestSyncProvider config.",null,null],[12,"network_id","","Protocol version.",26,null],[12,"num_peers","","Number of peers.",26,null],[3,"TestSyncProvider","","Test sync provider.",null,null],[12,"status","","Sync status.",27,null],[3,"TestMinerService","","Test miner service.",null,null],[12,"imported_transactions","","Imported transactions.",28,null],[12,"latest_closed_block","","Latest closed block.",28,null],[12,"pending_transactions","","Pre-existed pending transactions",28,null],[12,"pending_receipts","","Pre-existed pending receipts",28,null],[12,"last_nonces","","Last nonces.",28,null],[11,"new","","Creates new sync provider.",27,{"inputs":[{"name":"config"}],"output":{"name":"self"}}],[11,"status","","",27,{"inputs":[{"name":"testsyncprovider"}],"output":{"name":"syncstatus"}}],[11,"start_network","","",27,{"inputs":[{"name":"testsyncprovider"}],"output":null}],[11,"stop_network","","",27,{"inputs":[{"name":"testsyncprovider"}],"output":null}],[11,"default","","",28,{"inputs":[],"output":{"name":"testminerservice"}}],[11,"status","","Returns miner&#39;s status.",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"minerstatus"}}],[11,"set_author","","",28,{"inputs":[{"name":"testminerservice"},{"name":"address"}],"output":null}],[11,"set_extra_data","","",28,{"inputs":[{"name":"testminerservice"},{"name":"bytes"}],"output":null}],[11,"set_gas_floor_target","","Set the lower gas limit we wish to target when sealing a new block.",28,{"inputs":[{"name":"testminerservice"},{"name":"u256"}],"output":null}],[11,"set_gas_ceil_target","","Set the upper gas limit we wish to target when sealing a new block.",28,{"inputs":[{"name":"testminerservice"},{"name":"u256"}],"output":null}],[11,"set_minimal_gas_price","","",28,{"inputs":[{"name":"testminerservice"},{"name":"u256"}],"output":null}],[11,"set_transactions_limit","","",28,{"inputs":[{"name":"testminerservice"},{"name":"usize"}],"output":null}],[11,"transactions_limit","","",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"usize"}}],[11,"author","","",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"address"}}],[11,"minimal_gas_price","","",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"u256"}}],[11,"extra_data","","",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"bytes"}}],[11,"gas_floor_target","","",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"u256"}}],[11,"gas_ceil_target","","",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"u256"}}],[11,"import_transactions","","Imports transactions to transaction queue.",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"},{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[11,"import_own_transaction","","Imports transactions to transaction queue.",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"},{"name":"signedtransaction"},{"name":"t"}],"output":{"name":"result"}}],[11,"pending_transactions_hashes","","Returns hashes of transactions currently in pending",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"vec"}}],[11,"clear_and_reset","","Removes all transactions from the queue and restart mining operation.",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"}],"output":null}],[11,"chain_new_blocks","","Called when blocks are imported to chain, updates transactions queue.",28,null],[11,"update_sealing","","New chain head event. Restart mining operation.",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"}],"output":null}],[11,"map_sealing_work","","",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"},{"name":"f"}],"output":{"name":"option"}}],[11,"transaction","","",28,{"inputs":[{"name":"testminerservice"},{"name":"h256"}],"output":{"name":"option"}}],[11,"all_transactions","","",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"vec"}}],[11,"pending_transactions","","",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"vec"}}],[11,"pending_receipts","","",28,{"inputs":[{"name":"testminerservice"}],"output":{"name":"btreemap"}}],[11,"last_nonce","","",28,{"inputs":[{"name":"testminerservice"},{"name":"address"}],"output":{"name":"option"}}],[11,"submit_seal","","Submit `seal` as a valid solution for the header of `pow_hash`.\nWill check the seal, but not actually insert the block into the chain.",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"},{"name":"h256"},{"name":"vec"}],"output":{"name":"result"}}],[11,"balance","","",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"},{"name":"address"}],"output":{"name":"u256"}}],[11,"call","","",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"},{"name":"signedtransaction"},{"name":"callanalytics"}],"output":{"name":"result"}}],[11,"storage_at","","",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"},{"name":"address"},{"name":"h256"}],"output":{"name":"h256"}}],[11,"nonce","","",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"},{"name":"address"}],"output":{"name":"u256"}}],[11,"code","","",28,{"inputs":[{"name":"testminerservice"},{"name":"miningblockchainclient"},{"name":"address"}],"output":{"name":"option"}}],[0,"types","ethcore_rpc::v1","Structures used in RPC communication",null,null],[3,"Bytes","ethcore_rpc::v1::types","Wrapper structure around vector of bytes.",null,null],[12,"0","","",29,null],[3,"Block","","Block representation",null,null],[12,"hash","","Hash of the block",30,null],[12,"parent_hash","","Hash of the parent",30,null],[12,"uncles_hash","","Hash of the uncles",30,null],[12,"author","","Authors address",30,null],[12,"miner","","?",30,null],[12,"state_root","","State root hash",30,null],[12,"transactions_root","","Transactions root hash",30,null],[12,"receipts_root","","Transactions receipts root hash",30,null],[12,"number","","Block number",30,null],[12,"gas_used","","Gas Used",30,null],[12,"gas_limit","","Gas Limit",30,null],[12,"extra_data","","Extra data",30,null],[12,"logs_bloom","","Logs bloom",30,null],[12,"timestamp","","Timestamp",30,null],[12,"difficulty","","Difficulty",30,null],[12,"total_difficulty","","Total difficulty",30,null],[12,"seal_fields","","Seal fields",30,null],[12,"uncles","","Uncles&#39; hashes",30,null],[12,"transactions","","Transactions",30,null],[3,"Filter","","Filter",null,null],[12,"from_block","","From Block",31,null],[12,"to_block","","To Block",31,null],[12,"address","","Address",31,null],[12,"topics","","Topics",31,null],[3,"Index","","Represents usize.",null,null],[3,"Log","","Log",null,null],[12,"address","","Address",32,null],[12,"topics","","Topics",32,null],[12,"data","","Data",32,null],[12,"block_hash","","Block Hash",32,null],[12,"block_number","","Block Number",32,null],[12,"transaction_hash","","Transaction Hash",32,null],[12,"transaction_index","","Transaction Index",32,null],[12,"log_index","","Log Index",32,null],[12,"log_type","","Log Type",32,null],[3,"SyncInfo","","Sync info",null,null],[12,"starting_block","","Starting block",33,null],[12,"current_block","","Current block",33,null],[12,"highest_block","","Highest block seen so far",33,null],[3,"Transaction","","Transaction",null,null],[12,"hash","","Hash",34,null],[12,"nonce","","Nonce",34,null],[12,"block_hash","","Block hash",34,null],[12,"block_number","","Block number",34,null],[12,"transaction_index","","Transaction Index",34,null],[12,"from","","Sender",34,null],[12,"to","","Recipient",34,null],[12,"value","","Transfered value",34,null],[12,"gas_price","","Gas Price",34,null],[12,"gas","","Gas",34,null],[12,"input","","Data",34,null],[12,"creates","","Creates contract",34,null],[3,"TransactionRequest","","Transaction request coming from RPC",null,null],[12,"from","","Sender",35,null],[12,"to","","Recipient",35,null],[12,"gas_price","","Gas Price",35,null],[12,"gas","","Gas",35,null],[12,"value","","Value of transaction in wei",35,null],[12,"data","","Additional data sent with transaction",35,null],[12,"nonce","","Transaction&#39;s nonce",35,null],[3,"TransactionConfirmation","","Transaction confirmation waiting in a queue",null,null],[12,"id","","Id of this confirmation",36,null],[12,"transaction","","TransactionRequest",36,null],[3,"TransactionModification","","Possible modifications to the confirmed transaction sent by `SignerUI`",null,null],[12,"gas_price","","Modified gas price",37,null],[3,"CallRequest","","Call request",null,null],[12,"from","","From",38,null],[12,"to","","To",38,null],[12,"gas_price","","Gas Price",38,null],[12,"gas","","Gas",38,null],[12,"value","","Value",38,null],[12,"data","","Data",38,null],[12,"nonce","","Nonce",38,null],[3,"Receipt","","Receipt",null,null],[12,"transaction_hash","","Transaction Hash",39,null],[12,"transaction_index","","Transaction index",39,null],[12,"block_hash","","Block hash",39,null],[12,"block_number","","Block number",39,null],[12,"cumulative_gas_used","","Cumulative gas used",39,null],[12,"gas_used","","Gas used",39,null],[12,"contract_address","","Contract address",39,null],[12,"logs","","Logs",39,null],[3,"Trace","","Trace",null,null],[3,"LocalizedTrace","","Trace",null,null],[3,"StateDiff","","Serde-friendly `StateDiff` shadow.",null,null],[3,"VMTrace","","A record of a full VM trace for a CALL/CREATE.",null,null],[12,"code","","The code to be executed.",40,null],[12,"ops","","The operations executed.",40,null],[3,"TraceFilter","","Trace filter",null,null],[12,"from_block","","From block",41,null],[12,"to_block","","To block",41,null],[12,"from_address","","From address",41,null],[12,"to_address","","To address",41,null],[4,"BlockTransactions","","Block Transactions",null,null],[13,"Hashes","","Only hashes",42,null],[13,"Full","","Full transactions",42,null],[4,"BlockNumber","","Represents rpc api block number param.",null,null],[13,"Num","","Number",43,null],[13,"Latest","","Latest block",43,null],[13,"Earliest","","Earliest block (genesis)",43,null],[13,"Pending","","Pending block (being mined)",43,null],[4,"OptionalValue","","Optional value",null,null],[13,"Value","","Some",44,null],[13,"Null","","None",44,null],[4,"SyncStatus","","Sync status",null,null],[13,"Info","","Info when syncing",45,null],[13,"None","","Not syncing",45,null],[11,"fmt","","",29,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"bytes"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"new","","Simple constructor.",29,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"to_vec","","Convert back to vector",29,{"inputs":[{"name":"bytes"}],"output":{"name":"vec"}}],[11,"from","","",29,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"serialize","","",29,{"inputs":[{"name":"bytes"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",29,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"blocktransactions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",42,{"inputs":[{"name":"blocktransactions"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"blocknumber"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"blocknumber"},{"name":"blocknumber"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"blocknumber"},{"name":"blocknumber"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"blocknumber"}],"output":{"name":"blocknumber"}}],[11,"deserialize","","",43,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"into","","",43,{"inputs":[{"name":"blocknumber"}],"output":{"name":"blockid"}}],[11,"fmt","","",31,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"filter"},{"name":"filter"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"filter"},{"name":"filter"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"into","","",31,{"inputs":[{"name":"filter"}],"output":{"name":"ethfilter"}}],[11,"fmt","","",46,{"inputs":[{"name":"index"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"index"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"index"},{"name":"index"}],"output":{"name":"bool"}}],[11,"value","","Convert to usize",46,{"inputs":[{"name":"index"}],"output":{"name":"usize"}}],[11,"deserialize","","",46,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"log"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"log"},{"name":"log"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"log"},{"name":"log"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"clone","","",32,{"inputs":[{"name":"log"}],"output":{"name":"log"}}],[11,"from","","",32,{"inputs":[{"name":"localizedlogentry"}],"output":{"name":"log"}}],[11,"from","","",32,{"inputs":[{"name":"logentry"}],"output":{"name":"log"}}],[11,"fmt","","",44,{"inputs":[{"name":"optionalvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"serialize","","",44,{"inputs":[{"name":"optionalvalue"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"syncinfo"}}],[11,"fmt","","",33,{"inputs":[{"name":"syncinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"syncinfo"},{"name":"syncinfo"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"syncinfo"},{"name":"syncinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"syncstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"syncstatus"},{"name":"syncstatus"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"syncstatus"},{"name":"syncstatus"}],"output":{"name":"bool"}}],[11,"serialize","","",45,{"inputs":[{"name":"syncstatus"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"transaction"}}],[11,"from","","",34,{"inputs":[{"name":"localizedtransaction"}],"output":{"name":"transaction"}}],[11,"from","","",34,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"transaction"}}],[11,"fmt","","",35,{"inputs":[{"name":"transactionrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"transactionrequest"}],"output":{"name":"transactionrequest"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"transactionrequest"}}],[11,"eq","","",35,{"inputs":[{"name":"transactionrequest"},{"name":"transactionrequest"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"transactionrequest"},{"name":"transactionrequest"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"transactionconfirmation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"transactionconfirmation"}],"output":{"name":"transactionconfirmation"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"transactionconfirmation"}}],[11,"eq","","",36,{"inputs":[{"name":"transactionconfirmation"},{"name":"transactionconfirmation"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"transactionconfirmation"},{"name":"transactionconfirmation"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"transactionmodification"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"transactionmodification"},{"name":"transactionmodification"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"transactionmodification"},{"name":"transactionmodification"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"callrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"callrequest"}}],[11,"eq","","",38,{"inputs":[{"name":"callrequest"},{"name":"callrequest"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"callrequest"},{"name":"callrequest"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"receipt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",39,{"inputs":[{"name":"localizedreceipt"}],"output":{"name":"self"}}],[11,"from","","",39,{"inputs":[{"name":"ethreceipt"}],"output":{"name":"self"}}],[11,"fmt","","",40,{"inputs":[{"name":"vmtrace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",40,{"inputs":[{"name":"vmtrace"}],"output":{"name":"self"}}],[11,"serialize","","",47,{"inputs":[{"name":"statediff"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","",47,{"inputs":[{"name":"statediff"}],"output":{"name":"self"}}],[11,"fmt","","",48,{"inputs":[{"name":"localizedtrace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",48,{"inputs":[{"name":"ethlocalizedtrace"}],"output":{"name":"self"}}],[11,"fmt","","",49,{"inputs":[{"name":"trace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",49,{"inputs":[{"name":"ethtrace"}],"output":{"name":"self"}}],[11,"fmt","","",41,{"inputs":[{"name":"tracefilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"tracefilter"},{"name":"tracefilter"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"tracefilter"},{"name":"tracefilter"}],"output":{"name":"bool"}}],[11,"into","","",41,{"inputs":[{"name":"tracefilter"}],"output":{"name":"tracefilter"}}],[8,"SigningQueue","ethcore_rpc::v1","A queue of transactions awaiting to be confirmed and signed.",null,null],[10,"add_request","","Add new request to the queue.\nReturns a `ConfirmationPromise` that can be used to await for resolution of given request.",50,{"inputs":[{"name":"signingqueue"},{"name":"transactionrequest"}],"output":{"name":"confirmationpromise"}}],[10,"request_rejected","","Removes a request from the queue.\nNotifies possible token holders that transaction was rejected.",50,{"inputs":[{"name":"signingqueue"},{"name":"u256"}],"output":{"name":"option"}}],[10,"request_confirmed","","Removes a request from the queue.\nNotifies possible token holders that transaction was confirmed and given hash was assigned.",50,{"inputs":[{"name":"signingqueue"},{"name":"u256"},{"name":"rpcresult"}],"output":{"name":"option"}}],[10,"peek","","Returns a request if it is contained in the queue.",50,{"inputs":[{"name":"signingqueue"},{"name":"u256"}],"output":{"name":"option"}}],[10,"requests","","Return copy of all the requests in the queue.",50,{"inputs":[{"name":"signingqueue"}],"output":{"name":"vec"}}],[10,"len","","Returns number of transactions awaiting confirmation.",50,{"inputs":[{"name":"signingqueue"}],"output":{"name":"usize"}}],[10,"is_empty","","Returns true if there are no transactions awaiting confirmation.",50,{"inputs":[{"name":"signingqueue"}],"output":{"name":"bool"}}],[8,"SigningQueue","ethcore_rpc","A queue of transactions awaiting to be confirmed and signed.",null,null],[10,"add_request","","Add new request to the queue.\nReturns a `ConfirmationPromise` that can be used to await for resolution of given request.",50,{"inputs":[{"name":"signingqueue"},{"name":"transactionrequest"}],"output":{"name":"confirmationpromise"}}],[10,"request_rejected","","Removes a request from the queue.\nNotifies possible token holders that transaction was rejected.",50,{"inputs":[{"name":"signingqueue"},{"name":"u256"}],"output":{"name":"option"}}],[10,"request_confirmed","","Removes a request from the queue.\nNotifies possible token holders that transaction was confirmed and given hash was assigned.",50,{"inputs":[{"name":"signingqueue"},{"name":"u256"},{"name":"rpcresult"}],"output":{"name":"option"}}],[10,"peek","","Returns a request if it is contained in the queue.",50,{"inputs":[{"name":"signingqueue"},{"name":"u256"}],"output":{"name":"option"}}],[10,"requests","","Return copy of all the requests in the queue.",50,{"inputs":[{"name":"signingqueue"}],"output":{"name":"vec"}}],[10,"len","","Returns number of transactions awaiting confirmation.",50,{"inputs":[{"name":"signingqueue"}],"output":{"name":"usize"}}],[10,"is_empty","","Returns true if there are no transactions awaiting confirmation.",50,{"inputs":[{"name":"signingqueue"}],"output":{"name":"bool"}}],[8,"Extendable","","An object that can be extended with `IoDelegates`",null,null],[10,"add_delegate","","Add `Delegate` to this object.",51,{"inputs":[{"name":"extendable"},{"name":"iodelegate"}],"output":null}],[11,"add_delegate","","Add io delegate.",52,{"inputs":[{"name":"rpcserver"},{"name":"iodelegate"}],"output":null}],[11,"new","","Construct new http server object.",52,{"inputs":[],"output":{"name":"rpcserver"}}],[11,"start_http","","Start http server asynchronously and returns result with `Server` handle on success or an error.",52,{"inputs":[{"name":"rpcserver"},{"name":"socketaddr"},{"name":"vec"}],"output":{"name":"result"}}],[11,"start_ipc","","Start ipc server asynchronously and returns result with `Server` handle on success or an error.",52,{"inputs":[{"name":"rpcserver"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Server"],[4,"RpcServerError"],[3,"Web3Client"],[3,"EthClient"],[3,"EthFilterClient"],[3,"EthSigningQueueClient"],[3,"EthSigningUnsafeClient"],[3,"NetClient"],[3,"PersonalClient"],[3,"SignerClient"],[3,"EthcoreClient"],[3,"EthcoreSetClient"],[3,"TracesClient"],[3,"RpcClient"],[3,"ConfirmationsQueue"],[8,"Web3"],[8,"Eth"],[8,"EthFilter"],[8,"EthSigning"],[8,"Net"],[8,"Personal"],[8,"PersonalSigner"],[8,"Ethcore"],[8,"EthcoreSet"],[8,"Traces"],[8,"Rpc"],[3,"Config"],[3,"TestSyncProvider"],[3,"TestMinerService"],[3,"Bytes"],[3,"Block"],[3,"Filter"],[3,"Log"],[3,"SyncInfo"],[3,"Transaction"],[3,"TransactionRequest"],[3,"TransactionConfirmation"],[3,"TransactionModification"],[3,"CallRequest"],[3,"Receipt"],[3,"VMTrace"],[3,"TraceFilter"],[4,"BlockTransactions"],[4,"BlockNumber"],[4,"OptionalValue"],[4,"SyncStatus"],[3,"Index"],[3,"StateDiff"],[3,"LocalizedTrace"],[3,"Trace"],[8,"SigningQueue"],[8,"Extendable"],[3,"RpcServer"]]};
searchIndex["ethcore_util"] = {"doc":"Ethcore-util library","items":[[3,"PerfTimer","ethcore_util","Performance timer with logging. Starts measuring time in the constructor, prints\nelapsed time in the destructor or when `stop` is called.",null,null],[5,"clean","","Remove the `&quot;0x&quot;`, if present, from the left of `s`, returning the remaining slice.",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[5,"log2","","Returns log2.",null,{"inputs":[{"name":"usize"}],"output":{"name":"u32"}}],[0,"standard","","Std lib global reexports.",null,null],[0,"io","ethcore_util::standard","Traits, helpers, and type definitions for core I/O functionality.",null,null],[0,"prelude","ethcore_util::standard::io","The I/O Prelude",null,null],[8,"Seek","ethcore_util::standard::io::prelude","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",0,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",1,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",1,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",1,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",1,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",1,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",1,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",1,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",1,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",1,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",2,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",2,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",2,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",2,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",2,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",3,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",3,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",3,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",3,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",3,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",3,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[8,"Read","ethcore_util::standard::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",1,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",1,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",1,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",1,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",1,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",1,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",1,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",1,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",1,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",2,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",2,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",2,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",2,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",2,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",0,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",4,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",4,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",4,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",3,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",3,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",3,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",3,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",3,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",3,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",5,null],[13,"Other","","Variant representing that an I/O error occurred.",5,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[3,"Empty","","A reader which is always at EOF.",null,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"BufReader","","The `BufReader` struct adds buffering to any reader.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",6,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",6,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",6,null],[13,"ConnectionReset","","The connection was reset by the remote server.",6,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",6,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",6,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",6,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",6,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",6,null],[13,"AlreadyExists","","An entity already exists, often a file.",6,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",6,null],[13,"InvalidInput","","A parameter was incorrect.",6,null],[13,"InvalidData","","Data not valid for the operation were encountered.",6,null],[13,"TimedOut","","The I/O operation&#39;s timeout expired, causing it to be canceled.",6,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",6,null],[13,"Interrupted","","This operation was interrupted.",6,null],[13,"Other","","Any I/O error not part of this list.",6,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n&quot;end of file&quot; was reached prematurely.",6,null],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `&#39;\\n&#39;`) is detected.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[6,"Result","","",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[0,"fs","ethcore_util::standard","Filesystem manipulation operations.",null,null],[3,"File","ethcore_util::standard::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the `ReadDir` iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","An structure representing a type of file with accessors for each file type.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components\nnormalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[0,"str","ethcore_util::standard","Unicode string slices.",null,null],[6,"Utf16Units","ethcore_util::standard::str","",null,null],[3,"EncodeUtf16","","External iterator for a string&#39;s UTF-16 code units.",null,null],[11,"len","core::str","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"next_back","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"count","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",7,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",7,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Bytes","ethcore_util::standard::str","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[11,"next_back","core::str","",8,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"fmt","","",8,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Lines","ethcore_util::standard::str","Created with the method [`lines()`].",null,null],[11,"next_back","core::str","",9,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next","","",9,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RMatchIndices","ethcore_util::standard::str","Created with the method [`rmatch_indices()`].",null,null],[11,"as_str","core::str","View the underlying data as a subslice of the original data.",10,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"next_back","","",10,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"fmt","","",10,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chars","ethcore_util::standard::str","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[11,"fmt","core::str","",11,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",11,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"eq","","",11,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",11,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Utf8Error","ethcore_util::standard::str","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[11,"next_back","core::str","",12,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next","","",12,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitTerminator","ethcore_util::standard::str","Created with the method [`rsplit_terminator()`].",null,null],[11,"next_back","core::str","",13,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"fmt","","",13,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"LinesAny","ethcore_util::standard::str","Created with the method [`lines_any()`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","ethcore_util::standard::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",14,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",14,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",14,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",14,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",14,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",15,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",15,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",15,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",16,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",16,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",16,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",16,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",17,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",17,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",17,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[8,"FromStr","ethcore_util::standard::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",18,null],[10,"from_str","","Parses a string `s` to return a value of this type.",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","core::str","",19,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","","",19,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharRange","ethcore_util::standard::str","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",19,null],[12,"next","","Index of the first byte of the next `char`",19,null],[11,"next_back","core::str","",20,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next","","",20,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RMatches","ethcore_util::standard::str","Created with the method [`rmatches()`].",null,null],[11,"clone","core::str","",21,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",21,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitN","ethcore_util::standard::str","Created with the method [`splitn()`].",null,null],[11,"next_back","core::str","",22,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",22,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",22,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Matches","ethcore_util::standard::str","Created with the method [`matches()`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[11,"next_back","rustc_unicode::u_str","",23,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[3,"SplitWhitespace","ethcore_util::standard::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[11,"fmt","core::str","",24,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",24,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[3,"ParseBoolError","ethcore_util::standard::str","An error returned when parsing a `bool` from a string fails.",null,null],[11,"next_back","core::str","",25,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",25,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",25,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Split","ethcore_util::standard::str","Created with the method [`split()`].",null,null],[11,"clone","core::str","",26,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"next","","",26,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"fmt","","",26,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","ethcore_util::standard::str","Created with the method [`rsplitn()`].",null,null],[11,"next_back","core::str","",27,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",27,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"MatchIndices","ethcore_util::standard::str","Created with the method [`match_indices()`].",null,null],[11,"next_back","core::str","",28,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",28,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitTerminator","ethcore_util::standard::str","Created with the method [`split_terminator()`].",null,null],[11,"next_back","core::str","",29,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next","","",29,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplit","ethcore_util::standard::str","Created with the method [`rsplit()`].",null,null],[11,"as_str","core::str","View the underlying data as a subslice of the original data.",30,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"next_back","","",30,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"fmt","","",30,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharIndices","ethcore_util::standard::str","Iterator for a string&#39;s characters and their byte offsets.",null,null],[0,"fmt","ethcore_util::standard","Utilities for formatting and printing strings",null,null],[5,"format","ethcore_util::standard::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",31,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",32,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",33,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",34,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",35,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entry","core::fmt::builders","Adds a new entry to the map output.",36,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",36,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",36,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[3,"DebugMap","ethcore_util::standard::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",37,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",38,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[3,"Arguments","ethcore_util::standard::fmt","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the list output.",39,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",39,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",39,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[3,"DebugList","ethcore_util::standard::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[6,"Result","","",null,null],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",40,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",41,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"entry","core::fmt::builders","Adds a new entry to the set output.",42,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",42,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",42,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[3,"DebugSet","ethcore_util::standard::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",43,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",43,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",43,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated tuple struct output.",44,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",44,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[3,"DebugTuple","ethcore_util::standard::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",45,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",45,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[3,"DebugStruct","ethcore_util::standard::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",46,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt","",47,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",47,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",47,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",47,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",47,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",47,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",47,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",47,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",47,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",47,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",47,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",47,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",47,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",47,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",47,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",47,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",47,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",47,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",47,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",47,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",47,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[3,"Formatter","ethcore_util::standard::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[11,"fmt","core::fmt","",48,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",48,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","ethcore_util::standard::fmt","The error type which is returned from formatting a message into a stream.",null,null],[0,"cmp","ethcore_util::standard","Functionality for ordering and comparison.",null,null],[8,"PartialEq","ethcore_util::standard::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",49,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",49,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",50,null],[13,"Equal","","An ordering where a compared value is equal [to another].",50,null],[13,"Greater","","An ordering where a compared value is greater [than another].",50,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",51,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",52,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",52,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",52,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",52,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",52,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"ptr","ethcore_util::standard","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","ethcore_util::standard::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[0,"mem","ethcore_util::standard","Basic functions for dealing with memory.",null,null],[5,"forget","ethcore_util::standard::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","ethcore_util::standard","Overloadable operators.",null,null],[8,"Drop","ethcore_util::standard::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",53,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",54,null],[10,"add","","The method for the `+` operator",54,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",55,null],[10,"sub","","The method for the `-` operator",55,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",56,null],[10,"mul","","The method for the `*` operator",56,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",57,null],[10,"div","","The method for the `/` operator",57,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",58,null],[10,"rem","","The method for the `%` operator",58,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",59,null],[10,"neg","","The method for the unary `-` operator",59,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",60,null],[10,"not","","The method for the unary `!` operator",60,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",61,null],[10,"bitand","","The method for the `&amp;` operator",61,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",62,null],[10,"bitor","","The method for the `|` operator",62,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",63,null],[10,"bitxor","","The method for the `^` operator",63,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",64,null],[10,"shl","","The method for the `&lt;&lt;` operator",64,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",65,null],[10,"shr","","The method for the `&gt;&gt;` operator",65,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",66,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",67,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",68,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",69,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",70,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",71,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",72,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",73,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",74,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",75,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",76,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",76,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",77,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",78,null],[12,"end","","The upper bound of the range (exclusive).",78,null],[3,"RangeFrom","","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",79,null],[3,"RangeTo","","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",80,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",81,null],[12,"at","ethcore_util::standard::ops::RangeInclusive","",81,null],[13,"NonEmpty","ethcore_util::standard::ops","Non-empty range (iteration will yield value(s))",81,null],[12,"start","ethcore_util::standard::ops::RangeInclusive","",81,null],[12,"end","","",81,null],[3,"RangeToInclusive","ethcore_util::standard::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",82,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",83,null],[10,"deref","","The method called to dereference a value",83,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",84,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",85,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",86,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",87,null],[10,"call_once","","This is called when the call operator is used.",87,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",88,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",89,null],[10,"make_place","","Creates a fresh place from `self`.",89,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",90,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",90,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",91,null],[16,"Place","","The place that will negotiate the storage of the data.",91,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",91,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",92,{"inputs":[],"output":{"name":"self"}}],[0,"slice","ethcore_util::standard","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","ethcore_util::standard::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",93,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",93,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",93,null],[10,"connect","","",93,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[11,"next_back","core::slice","",94,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",94,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"clone","","",94,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",94,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Split","ethcore_util::standard::slice","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[11,"into_slice","core::slice","View the underlying data as a subslice of the original data.",95,null],[11,"fmt","","",95,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",95,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"count","","",95,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",95,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",95,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[3,"IterMut","ethcore_util::standard::slice","Mutable slice iterator.",null,null],[11,"fmt","core::slice","",96,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",96,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[3,"RSplitN","ethcore_util::standard::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"fmt","core::slice","",97,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",97,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[3,"SplitNMut","ethcore_util::standard::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[11,"next_back","core::slice","",98,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next","","",98,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"count","","",98,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"fmt","","",98,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Windows","ethcore_util::standard::slice","An iterator over overlapping subslices of length `size`.",null,null],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",99,null],[11,"fmt","","",99,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"count","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",99,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[3,"Iter","ethcore_util::standard::slice","Immutable slice iterator",null,null],[11,"next_back","core::slice","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"count","","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",100,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"fmt","","",100,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chunks","ethcore_util::standard::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[11,"next_back","core::slice","",101,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"count","","",101,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",101,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",101,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","","",101,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ChunksMut","ethcore_util::standard::slice","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[11,"next","core::slice","",102,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitN","ethcore_util::standard::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[11,"fmt","core::slice","",103,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",103,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[3,"RSplitNMut","ethcore_util::standard::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"next","core::slice","",104,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",104,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[3,"SplitMut","ethcore_util::standard::slice","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[0,"result","ethcore_util::standard","Error handling with the `Result` type.",null,null],[4,"Result","ethcore_util::standard::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",105,null],[13,"Err","","Contains the error value",105,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"option","ethcore_util::standard","Optional values.",null,null],[4,"Option","ethcore_util::standard::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",106,null],[13,"Some","","Some value `T`",106,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[3,"Path","ethcore_util::standard","A slice of a path (akin to `str`).",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",18,null],[10,"from_str","","Parses a string `s` to return a value of this type.",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",1,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",1,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",1,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",1,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",1,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",1,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",1,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",1,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",1,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",2,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",2,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",2,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",2,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",2,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",107,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",107,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",108,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",108,null],[11,"write_u8","","Write a single `u8` into this hasher",108,null],[11,"write_u16","","Write a single `u16` into this hasher.",108,null],[11,"write_u32","","Write a single `u32` into this hasher.",108,null],[11,"write_u64","","Write a single `u64` into this hasher.",108,null],[11,"write_usize","","Write a single `usize` into this hasher.",108,null],[11,"write_i8","","Write a single `i8` into this hasher.",108,null],[11,"write_i16","","Write a single `i16` into this hasher.",108,null],[11,"write_i32","","Write a single `i32` into this hasher.",108,null],[11,"write_i64","","Write a single `i64` into this hasher.",108,null],[11,"write_isize","","Write a single `isize` into this hasher.",108,null],[8,"StdError","","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",109,{"inputs":[{"name":"stderror"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",109,{"inputs":[{"name":"stderror"}],"output":{"name":"option"}}],[11,"from_reader","rustc_serialize::json","Decodes a json value from an `&amp;mut io::Read`",110,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",110,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",110,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",110,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",110,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",110,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",110,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"from_str","","",110,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",110,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",110,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"index","","",110,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"index","","",110,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"encode","","",110,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",110,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Json","ethcore_util::standard","Represents a json value",null,null],[13,"I64","","",110,null],[13,"U64","","",110,null],[13,"F64","","",110,null],[13,"String","","",110,null],[13,"Boolean","","",110,null],[13,"Array","","",110,null],[13,"Object","","",110,null],[13,"Null","","",110,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",111,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",112,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"fmt","rustc_serialize::hex","",113,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",113,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",113,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[4,"FromHexError","ethcore_util::standard","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",113,null],[13,"InvalidHexLength","","The input had an invalid length",113,null],[8,"HeapSizeOf","","",null,null],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the\nspace taken up by the value itself (i.e. what size_of::&lt;T&gt; measures, more or less); that\nspace is handled by the implementation of HeapSizeOf for Box&lt;T&gt; below.",114,{"inputs":[{"name":"heapsizeof"}],"output":{"name":"usize"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",115,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",115,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",115,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",115,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",115,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupbylazy"}}],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",115,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"chunkslazy"}}],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",115,null],[11,"slice","","Return a sliced iterator.",115,{"inputs":[{"name":"itertools"},{"name":"r"}],"output":{"name":"islice"}}],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"rciter"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",115,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"step"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",115,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",115,{"inputs":[{"name":"itertools"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"kmerge"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",115,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"product"}}],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"multipeek"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"mendslices"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"whilesome"}}],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"combinations"}}],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",115,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",115,{"inputs":[{"name":"itertools"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"flatten"}}],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",115,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",115,{"inputs":[{"name":"itertools"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",115,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",115,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",115,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",115,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",115,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",115,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"string"}}],[11,"format_default","","Format all iterator elements, separated by `sep`.",115,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"formatdefault"}}],[11,"format","","Format all iterator elements, separated by `sep`.",115,{"inputs":[{"name":"itertools"},{"name":"str"},{"name":"f"}],"output":{"name":"format"}}],[11,"fold_results","","Fold `Result` values from an iterator.",115,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",115,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",115,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"option"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",115,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",115,{"inputs":[{"name":"itertools"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",115,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[0,"from_json","ethcore_util","Coversion from json.",null,null],[8,"FromJson","ethcore_util::from_json","Trait allowing conversion from a JSON value.",null,null],[10,"from_json","","Convert a JSON value to an instance of this type.",116,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","bigint::uint","",117,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[0,"common","ethcore_util","Utils common types and macros global reexport.",null,null],[0,"numbers","","Utils number types.",null,null],[0,"error","","General error types for use in ethcore.",null,null],[3,"Mismatch","ethcore_util::error","Error indicating an expected value was not found.",null,null],[12,"expected","","Value expected.",118,null],[12,"found","","Value found.",118,null],[3,"OutOfBounds","","Error indicating value found is outside of a valid range.",null,null],[12,"min","","Minimum allowed value.",119,null],[12,"max","","Maximum allowed value.",119,null],[12,"found","","Value found.",119,null],[4,"BaseDataError","","Error in database subsystem.",null,null],[13,"NegativelyReferencedHash","","An entry was removed more times than inserted.",120,null],[4,"UtilError","","General error type which should be capable of representing all errors in ethcore.",null,null],[13,"Crypto","","Error concerning the crypto utility subsystem.",121,null],[13,"StdIo","","Error concerning the Rust standard library&#39;s IO subsystem.",121,null],[13,"Io","","Error concerning our IO utility subsystem.",121,null],[13,"AddressParse","","Error concerning the network address parsing subsystem.",121,null],[13,"AddressResolve","","Error concerning the network address resolution subsystem.",121,null],[13,"FromHex","","Error concerning the hex conversion logic.",121,null],[13,"BaseData","","Error concerning the database abstraction logic.",121,null],[13,"Network","","Error concerning the network subsystem.",121,null],[13,"Decoder","","Error concerning the RLP decoder.",121,null],[13,"SimpleString","","Miscellaneous error described by a string.",121,null],[13,"BadSize","","Error from a bad input size being given for the needed output.",121,null],[11,"fmt","","",120,{"inputs":[{"name":"basedataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"basedataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"utilerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"utilerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"mismatch"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"mismatch"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"fmt","","",118,{"inputs":[{"name":"mismatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"mismatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"outofbounds"},{"name":"outofbounds"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"outofbounds"},{"name":"outofbounds"}],"output":{"name":"bool"}}],[11,"fmt","","",119,{"inputs":[{"name":"outofbounds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"outofbounds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",121,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"utilerror"}}],[11,"from","","",121,{"inputs":[{"name":"basedataerror"}],"output":{"name":"utilerror"}}],[11,"from","","",121,{"inputs":[{"name":"networkerror"}],"output":{"name":"utilerror"}}],[11,"from","","",121,{"inputs":[{"name":"error"}],"output":{"name":"utilerror"}}],[11,"from","","",121,{"inputs":[{"name":"ioerror"}],"output":{"name":"utilerror"}}],[11,"from","","",121,{"inputs":[{"name":"cryptoerror"}],"output":{"name":"utilerror"}}],[11,"from","","",121,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"utilerror"}}],[11,"from","","",121,{"inputs":[{"name":"decodererror"}],"output":{"name":"utilerror"}}],[11,"from","","",121,{"inputs":[{"name":"string"}],"output":{"name":"utilerror"}}],[0,"hash","ethcore_util","General hash types, a fixed-size raw-data type used as the output of hash functions.",null,null],[3,"H32","ethcore_util::hash","Unformatted binary data of fixed length.",null,null],[12,"0","","",122,null],[3,"H64","","Unformatted binary data of fixed length.",null,null],[12,"0","","",123,null],[3,"H128","","Unformatted binary data of fixed length.",null,null],[12,"0","","",124,null],[3,"Address","","Unformatted binary data of fixed length.",null,null],[12,"0","","",125,null],[3,"H256","","Unformatted binary data of fixed length.",null,null],[12,"0","","",126,null],[3,"H264","","Unformatted binary data of fixed length.",null,null],[12,"0","","",127,null],[3,"H512","","Unformatted binary data of fixed length.",null,null],[12,"0","","",128,null],[3,"H520","","Unformatted binary data of fixed length.",null,null],[12,"0","","",129,null],[3,"H1024","","Unformatted binary data of fixed length.",null,null],[12,"0","","",130,null],[3,"H2048","","Unformatted binary data of fixed length.",null,null],[12,"0","","",131,null],[5,"clean_0x","","Return `s` without the `0x` at the beginning of it, if any.",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[5,"h256_from_hex","","Convert string `s` to an `H256`. Will panic if `s` is not 64 characters long or if any of\nthose characters are not 0-9, a-z or A-Z.",null,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[5,"h256_from_u64","","Convert `n` to an `H256`, setting the rightmost 8 bytes.",null,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[5,"address_from_hex","","Convert string `s` to an `Address`. Will panic if `s` is not 40 characters long or if any of\nthose characters are not 0-9, a-z or A-Z.",null,{"inputs":[{"name":"str"}],"output":{"name":"address"}}],[5,"address_from_u64","","Convert `n` to an `Address`, setting the rightmost 8 bytes.",null,{"inputs":[{"name":"u64"}],"output":{"name":"address"}}],[7,"ZERO_ADDRESS","","Constant address for point 0. Often used as a default.",null,null],[7,"ZERO_H256","","Constant 256-bit datum for 0. Often used as a default.",null,null],[8,"FixedHash","","Trait for a fixed-size byte array to be used as the output of hash functions.",null,null],[10,"new","","Create a new, zero-initialised, instance.",132,{"inputs":[],"output":{"name":"self"}}],[10,"zero","","Synonym for `new()`. Prefer to new as it&#39;s more readable.",132,{"inputs":[],"output":{"name":"self"}}],[10,"random","","Create a new, cryptographically random, instance.",132,{"inputs":[],"output":{"name":"self"}}],[10,"randomize","","Assign self have a cryptographically random value.",132,{"inputs":[{"name":"fixedhash"}],"output":null}],[10,"len","","Get the size of this object in bytes.",132,{"inputs":[],"output":{"name":"usize"}}],[10,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",132,null],[10,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",132,null],[10,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",132,null],[10,"shift_bloomed","","When interpreting self as a bloom output, augment (bit-wise OR) with the a bloomed version of `b`.",132,{"inputs":[{"name":"fixedhash"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_bloomed","","Same as `shift_bloomed` except that `self` is consumed and a new value returned.",132,{"inputs":[{"name":"fixedhash"},{"name":"t"}],"output":{"name":"self"}}],[10,"bloom_part","","Bloom the current value using the bloom parameter `m`.",132,{"inputs":[{"name":"fixedhash"},{"name":"usize"}],"output":{"name":"t"}}],[10,"contains_bloomed","","Check to see whether this hash, interpreted as a bloom, contains the value `b` when bloomed.",132,{"inputs":[{"name":"fixedhash"},{"name":"t"}],"output":{"name":"bool"}}],[10,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",132,{"inputs":[{"name":"fixedhash"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_zero","","Returns `true` if no bits are set.",132,{"inputs":[{"name":"fixedhash"}],"output":{"name":"bool"}}],[10,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",132,{"inputs":[{"name":"fixedhash"}],"output":{"name":"u64"}}],[11,"from","","",126,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",126,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","bigint::uint","",117,{"inputs":[{"name":"h256"}],"output":{"name":"u256"}}],[11,"from","","",117,{"inputs":[{"name":"h256"}],"output":{"name":"u256"}}],[11,"from","ethcore_util::hash","",125,{"inputs":[{"name":"h256"}],"output":{"name":"address"}}],[11,"from","","",123,{"inputs":[{"name":"h256"}],"output":{"name":"h64"}}],[11,"from","","",126,{"inputs":[{"name":"address"}],"output":{"name":"h256"}}],[11,"from","","",126,{"inputs":[{"name":"address"}],"output":{"name":"h256"}}],[11,"from","","",122,null],[11,"deref","","",122,null],[11,"as_ref","","",122,null],[11,"deref_mut","","",122,null],[11,"new","","",122,{"inputs":[],"output":{"name":"h32"}}],[11,"zero","","",122,{"inputs":[],"output":{"name":"h32"}}],[11,"random","","",122,{"inputs":[],"output":{"name":"h32"}}],[11,"randomize","","",122,{"inputs":[{"name":"h32"}],"output":null}],[11,"len","","",122,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",122,null],[11,"from_slice","","",122,null],[11,"copy_to","","",122,null],[11,"shift_bloomed","","",122,{"inputs":[{"name":"h32"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",122,{"inputs":[{"name":"h32"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",122,{"inputs":[{"name":"h32"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",122,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",122,{"inputs":[{"name":"h32"}],"output":{"name":"bool"}}],[11,"low_u64","","",122,{"inputs":[{"name":"h32"}],"output":{"name":"u64"}}],[11,"from_str","","",122,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",122,{"inputs":[{"name":"h32"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",122,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",122,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",122,{"inputs":[{"name":"h32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"h32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"h32"}],"output":{"name":"h32"}}],[11,"eq","","",122,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",122,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",122,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",122,{"inputs":[{"name":"h32"},{"name":"h"}],"output":null}],[11,"index","","",122,{"inputs":[{"name":"h32"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",122,{"inputs":[{"name":"h32"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",122,null],[11,"index_mut","","",122,null],[11,"index","","",122,null],[11,"index_mut","","",122,null],[11,"bitor","","",122,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",122,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",122,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",122,{"inputs":[{"name":"h32"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",122,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",122,{"inputs":[{"name":"u64"}],"output":{"name":"h32"}}],[11,"from","","",122,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",123,null],[11,"deref","","",123,null],[11,"as_ref","","",123,null],[11,"deref_mut","","",123,null],[11,"new","","",123,{"inputs":[],"output":{"name":"h64"}}],[11,"zero","","",123,{"inputs":[],"output":{"name":"h64"}}],[11,"random","","",123,{"inputs":[],"output":{"name":"h64"}}],[11,"randomize","","",123,{"inputs":[{"name":"h64"}],"output":null}],[11,"len","","",123,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",123,null],[11,"from_slice","","",123,null],[11,"copy_to","","",123,null],[11,"shift_bloomed","","",123,{"inputs":[{"name":"h64"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",123,{"inputs":[{"name":"h64"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",123,{"inputs":[{"name":"h64"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",123,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",123,{"inputs":[{"name":"h64"}],"output":{"name":"bool"}}],[11,"low_u64","","",123,{"inputs":[{"name":"h64"}],"output":{"name":"u64"}}],[11,"from_str","","",123,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",123,{"inputs":[{"name":"h64"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",123,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",123,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",123,{"inputs":[{"name":"h64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"h64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"eq","","",123,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",123,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",123,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",123,{"inputs":[{"name":"h64"},{"name":"h"}],"output":null}],[11,"index","","",123,{"inputs":[{"name":"h64"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",123,{"inputs":[{"name":"h64"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",123,null],[11,"index_mut","","",123,null],[11,"index","","",123,null],[11,"index_mut","","",123,null],[11,"bitor","","",123,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",123,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",123,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",123,{"inputs":[{"name":"h64"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",123,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"u64"}],"output":{"name":"h64"}}],[11,"from","","",123,{"inputs":[{"name":"str"}],"output":{"name":"h64"}}],[11,"from","","",124,null],[11,"deref","","",124,null],[11,"as_ref","","",124,null],[11,"deref_mut","","",124,null],[11,"new","","",124,{"inputs":[],"output":{"name":"h128"}}],[11,"zero","","",124,{"inputs":[],"output":{"name":"h128"}}],[11,"random","","",124,{"inputs":[],"output":{"name":"h128"}}],[11,"randomize","","",124,{"inputs":[{"name":"h128"}],"output":null}],[11,"len","","",124,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",124,null],[11,"from_slice","","",124,null],[11,"copy_to","","",124,null],[11,"shift_bloomed","","",124,{"inputs":[{"name":"h128"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",124,{"inputs":[{"name":"h128"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",124,{"inputs":[{"name":"h128"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",124,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",124,{"inputs":[{"name":"h128"}],"output":{"name":"bool"}}],[11,"low_u64","","",124,{"inputs":[{"name":"h128"}],"output":{"name":"u64"}}],[11,"from_str","","",124,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",124,{"inputs":[{"name":"h128"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",124,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",124,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",124,{"inputs":[{"name":"h128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"h128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"h128"}],"output":{"name":"h128"}}],[11,"eq","","",124,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",124,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",124,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",124,{"inputs":[{"name":"h128"},{"name":"h"}],"output":null}],[11,"index","","",124,{"inputs":[{"name":"h128"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",124,{"inputs":[{"name":"h128"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",124,null],[11,"index_mut","","",124,null],[11,"index","","",124,null],[11,"index_mut","","",124,null],[11,"bitor","","",124,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",124,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",124,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",124,{"inputs":[{"name":"h128"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",124,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",124,{"inputs":[{"name":"u64"}],"output":{"name":"h128"}}],[11,"from","","",124,{"inputs":[{"name":"str"}],"output":{"name":"h128"}}],[11,"from","","",125,null],[11,"deref","","",125,null],[11,"as_ref","","",125,null],[11,"deref_mut","","",125,null],[11,"new","","",125,{"inputs":[],"output":{"name":"address"}}],[11,"zero","","",125,{"inputs":[],"output":{"name":"address"}}],[11,"random","","",125,{"inputs":[],"output":{"name":"address"}}],[11,"randomize","","",125,{"inputs":[{"name":"address"}],"output":null}],[11,"len","","",125,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",125,null],[11,"from_slice","","",125,null],[11,"copy_to","","",125,null],[11,"shift_bloomed","","",125,{"inputs":[{"name":"address"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",125,{"inputs":[{"name":"address"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",125,{"inputs":[{"name":"address"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",125,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",125,{"inputs":[{"name":"address"}],"output":{"name":"bool"}}],[11,"low_u64","","",125,{"inputs":[{"name":"address"}],"output":{"name":"u64"}}],[11,"from_str","","",125,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",125,{"inputs":[{"name":"address"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",125,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",125,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",125,{"inputs":[{"name":"address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"eq","","",125,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",125,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",125,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",125,{"inputs":[{"name":"address"},{"name":"h"}],"output":null}],[11,"index","","",125,{"inputs":[{"name":"address"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",125,{"inputs":[{"name":"address"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",125,null],[11,"index_mut","","",125,null],[11,"index","","",125,null],[11,"index_mut","","",125,null],[11,"bitor","","",125,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",125,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",125,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",125,{"inputs":[{"name":"address"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",125,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"u64"}],"output":{"name":"address"}}],[11,"from","","",125,{"inputs":[{"name":"str"}],"output":{"name":"address"}}],[11,"from","","",126,null],[11,"deref","","",126,null],[11,"as_ref","","",126,null],[11,"deref_mut","","",126,null],[11,"new","","",126,{"inputs":[],"output":{"name":"h256"}}],[11,"zero","","",126,{"inputs":[],"output":{"name":"h256"}}],[11,"random","","",126,{"inputs":[],"output":{"name":"h256"}}],[11,"randomize","","",126,{"inputs":[{"name":"h256"}],"output":null}],[11,"len","","",126,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",126,null],[11,"from_slice","","",126,null],[11,"copy_to","","",126,null],[11,"shift_bloomed","","",126,{"inputs":[{"name":"h256"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",126,{"inputs":[{"name":"h256"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",126,{"inputs":[{"name":"h256"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",126,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",126,{"inputs":[{"name":"h256"}],"output":{"name":"bool"}}],[11,"low_u64","","",126,{"inputs":[{"name":"h256"}],"output":{"name":"u64"}}],[11,"from_str","","",126,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",126,{"inputs":[{"name":"h256"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",126,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",126,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",126,{"inputs":[{"name":"h256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"h256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"eq","","",126,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",126,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",126,{"inputs":[{"name":"h256"},{"name":"h"}],"output":null}],[11,"index","","",126,{"inputs":[{"name":"h256"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",126,{"inputs":[{"name":"h256"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",126,null],[11,"index_mut","","",126,null],[11,"index","","",126,null],[11,"index_mut","","",126,null],[11,"bitor","","",126,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",126,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",126,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",126,{"inputs":[{"name":"h256"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",126,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",126,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[11,"from","","",126,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",127,null],[11,"deref","","",127,null],[11,"as_ref","","",127,null],[11,"deref_mut","","",127,null],[11,"new","","",127,{"inputs":[],"output":{"name":"h264"}}],[11,"zero","","",127,{"inputs":[],"output":{"name":"h264"}}],[11,"random","","",127,{"inputs":[],"output":{"name":"h264"}}],[11,"randomize","","",127,{"inputs":[{"name":"h264"}],"output":null}],[11,"len","","",127,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",127,null],[11,"from_slice","","",127,null],[11,"copy_to","","",127,null],[11,"shift_bloomed","","",127,{"inputs":[{"name":"h264"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",127,{"inputs":[{"name":"h264"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",127,{"inputs":[{"name":"h264"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",127,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",127,{"inputs":[{"name":"h264"}],"output":{"name":"bool"}}],[11,"low_u64","","",127,{"inputs":[{"name":"h264"}],"output":{"name":"u64"}}],[11,"from_str","","",127,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",127,{"inputs":[{"name":"h264"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",127,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",127,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",127,{"inputs":[{"name":"h264"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"h264"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"h264"}],"output":{"name":"h264"}}],[11,"eq","","",127,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",127,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",127,{"inputs":[{"name":"h264"},{"name":"h"}],"output":null}],[11,"index","","",127,{"inputs":[{"name":"h264"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",127,{"inputs":[{"name":"h264"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",127,null],[11,"index_mut","","",127,null],[11,"index","","",127,null],[11,"index_mut","","",127,null],[11,"bitor","","",127,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",127,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",127,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",127,{"inputs":[{"name":"h264"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",127,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"u64"}],"output":{"name":"h264"}}],[11,"from","","",127,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",128,null],[11,"deref","","",128,null],[11,"as_ref","","",128,null],[11,"deref_mut","","",128,null],[11,"new","","",128,{"inputs":[],"output":{"name":"h512"}}],[11,"zero","","",128,{"inputs":[],"output":{"name":"h512"}}],[11,"random","","",128,{"inputs":[],"output":{"name":"h512"}}],[11,"randomize","","",128,{"inputs":[{"name":"h512"}],"output":null}],[11,"len","","",128,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",128,null],[11,"from_slice","","",128,null],[11,"copy_to","","",128,null],[11,"shift_bloomed","","",128,{"inputs":[{"name":"h512"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",128,{"inputs":[{"name":"h512"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",128,{"inputs":[{"name":"h512"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",128,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",128,{"inputs":[{"name":"h512"}],"output":{"name":"bool"}}],[11,"low_u64","","",128,{"inputs":[{"name":"h512"}],"output":{"name":"u64"}}],[11,"from_str","","",128,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",128,{"inputs":[{"name":"h512"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",128,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",128,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",128,{"inputs":[{"name":"h512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"h512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"h512"}],"output":{"name":"h512"}}],[11,"eq","","",128,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",128,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",128,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",128,{"inputs":[{"name":"h512"},{"name":"h"}],"output":null}],[11,"index","","",128,{"inputs":[{"name":"h512"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",128,{"inputs":[{"name":"h512"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",128,null],[11,"index_mut","","",128,null],[11,"index","","",128,null],[11,"index_mut","","",128,null],[11,"bitor","","",128,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",128,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",128,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",128,{"inputs":[{"name":"h512"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",128,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",128,{"inputs":[{"name":"u64"}],"output":{"name":"h512"}}],[11,"from","","",128,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",129,null],[11,"deref","","",129,null],[11,"as_ref","","",129,null],[11,"deref_mut","","",129,null],[11,"new","","",129,{"inputs":[],"output":{"name":"h520"}}],[11,"zero","","",129,{"inputs":[],"output":{"name":"h520"}}],[11,"random","","",129,{"inputs":[],"output":{"name":"h520"}}],[11,"randomize","","",129,{"inputs":[{"name":"h520"}],"output":null}],[11,"len","","",129,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",129,null],[11,"from_slice","","",129,null],[11,"copy_to","","",129,null],[11,"shift_bloomed","","",129,{"inputs":[{"name":"h520"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",129,{"inputs":[{"name":"h520"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",129,{"inputs":[{"name":"h520"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",129,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",129,{"inputs":[{"name":"h520"}],"output":{"name":"bool"}}],[11,"low_u64","","",129,{"inputs":[{"name":"h520"}],"output":{"name":"u64"}}],[11,"from_str","","",129,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",129,{"inputs":[{"name":"h520"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",129,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",129,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",129,{"inputs":[{"name":"h520"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"h520"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"h520"}],"output":{"name":"h520"}}],[11,"eq","","",129,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",129,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",129,{"inputs":[{"name":"h520"},{"name":"h"}],"output":null}],[11,"index","","",129,{"inputs":[{"name":"h520"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",129,{"inputs":[{"name":"h520"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",129,null],[11,"index_mut","","",129,null],[11,"index","","",129,null],[11,"index_mut","","",129,null],[11,"bitor","","",129,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",129,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",129,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",129,{"inputs":[{"name":"h520"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",129,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"u64"}],"output":{"name":"h520"}}],[11,"from","","",129,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",130,null],[11,"deref","","",130,null],[11,"as_ref","","",130,null],[11,"deref_mut","","",130,null],[11,"new","","",130,{"inputs":[],"output":{"name":"h1024"}}],[11,"zero","","",130,{"inputs":[],"output":{"name":"h1024"}}],[11,"random","","",130,{"inputs":[],"output":{"name":"h1024"}}],[11,"randomize","","",130,{"inputs":[{"name":"h1024"}],"output":null}],[11,"len","","",130,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",130,null],[11,"from_slice","","",130,null],[11,"copy_to","","",130,null],[11,"shift_bloomed","","",130,{"inputs":[{"name":"h1024"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",130,{"inputs":[{"name":"h1024"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",130,{"inputs":[{"name":"h1024"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",130,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",130,{"inputs":[{"name":"h1024"}],"output":{"name":"bool"}}],[11,"low_u64","","",130,{"inputs":[{"name":"h1024"}],"output":{"name":"u64"}}],[11,"from_str","","",130,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",130,{"inputs":[{"name":"h1024"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",130,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",130,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",130,{"inputs":[{"name":"h1024"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"h1024"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"h1024"}],"output":{"name":"h1024"}}],[11,"eq","","",130,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",130,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",130,{"inputs":[{"name":"h1024"},{"name":"h"}],"output":null}],[11,"index","","",130,{"inputs":[{"name":"h1024"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",130,{"inputs":[{"name":"h1024"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",130,null],[11,"index_mut","","",130,null],[11,"index","","",130,null],[11,"index_mut","","",130,null],[11,"bitor","","",130,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",130,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",130,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",130,{"inputs":[{"name":"h1024"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",130,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",130,{"inputs":[{"name":"u64"}],"output":{"name":"h1024"}}],[11,"from","","",130,{"inputs":[{"name":"str"}],"output":{"name":"h1024"}}],[11,"from","","",131,null],[11,"deref","","",131,null],[11,"as_ref","","",131,null],[11,"deref_mut","","",131,null],[11,"new","","",131,{"inputs":[],"output":{"name":"h2048"}}],[11,"zero","","",131,{"inputs":[],"output":{"name":"h2048"}}],[11,"random","","",131,{"inputs":[],"output":{"name":"h2048"}}],[11,"randomize","","",131,{"inputs":[{"name":"h2048"}],"output":null}],[11,"len","","",131,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","",131,null],[11,"from_slice","","",131,null],[11,"copy_to","","",131,null],[11,"shift_bloomed","","",131,{"inputs":[{"name":"h2048"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",131,{"inputs":[{"name":"h2048"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",131,{"inputs":[{"name":"h2048"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",131,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",131,{"inputs":[{"name":"h2048"}],"output":{"name":"bool"}}],[11,"low_u64","","",131,{"inputs":[{"name":"h2048"}],"output":{"name":"u64"}}],[11,"from_str","","",131,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",131,{"inputs":[{"name":"h2048"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",131,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",131,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",131,{"inputs":[{"name":"h2048"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"h2048"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"h2048"}],"output":{"name":"h2048"}}],[11,"eq","","",131,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",131,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",131,{"inputs":[{"name":"h2048"},{"name":"h"}],"output":null}],[11,"index","","",131,{"inputs":[{"name":"h2048"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",131,{"inputs":[{"name":"h2048"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",131,null],[11,"index_mut","","",131,null],[11,"index","","",131,null],[11,"index_mut","","",131,null],[11,"bitor","","",131,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",131,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",131,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",131,{"inputs":[{"name":"h2048"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",131,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"u64"}],"output":{"name":"h2048"}}],[11,"from","","",131,{"inputs":[{"name":"str"}],"output":{"name":"h2048"}}],[0,"bytes","ethcore_util","Unified interfaces for bytes operations on basic types",null,null],[3,"PrettySlice","ethcore_util::bytes","Slie pretty print helper",null,null],[4,"BytesRef","","A byte collection reference that can either be a slice or a vector",null,null],[13,"Flexible","","This is a reference to a vector",133,null],[13,"Fixed","","This is a reference to a slice",133,null],[4,"FromBytesError","","Bytes array deserialization error",null,null],[13,"NotLongEnough","","Not enough bytes for the requested type",134,null],[13,"TooLong","","Too many bytes for the requested type",134,null],[13,"UnknownMarker","","Invalid marker for (enums)",134,null],[6,"Bytes","","Vector of bytes",null,null],[8,"VecLike","","Vector like object",null,null],[10,"vec_push","","Add an element to the collection",135,{"inputs":[{"name":"veclike"},{"name":"t"}],"output":null}],[10,"vec_extend","","Add a slice to the collection",135,null],[8,"ToPretty","","Trait to allow a type to be pretty-printed in `format!`, where unoverridable\ndefaults cannot otherwise be avoided.",null,null],[10,"pretty","","Convert a type into a derivative form in order to make `format!` print it prettily.",136,{"inputs":[{"name":"topretty"}],"output":{"name":"prettyslice"}}],[11,"to_hex","","Express the object as a hex string.",136,{"inputs":[{"name":"topretty"}],"output":{"name":"string"}}],[8,"BytesConvertable","","Slice of bytes to underlying memory",null,null],[10,"bytes","","Get the underlying byte-wise representation of the value.\nDeprecated - use `as_slice` instead.",137,null],[11,"as_slice","","Get the underlying byte-wise representation of the value.",137,null],[11,"to_bytes","","Get a copy of the underlying byte-wise representation.",137,{"inputs":[{"name":"bytesconvertable"}],"output":{"name":"bytes"}}],[8,"Populatable","","Simple trait to allow for raw population of a Sized object from a byte slice.",null,null],[11,"populate_raw","","Copies a bunch of bytes `d` to `self`, overwriting as necessary.",138,null],[11,"copy_raw","","Copies a bunch of bytes `d` to `self`, overwriting as necessary.",138,null],[11,"populate_raw_from","","Copies the raw representation of an object `d` to `self`, overwriting as necessary.",138,{"inputs":[{"name":"populatable"},{"name":"bytesconvertable"}],"output":null}],[11,"copy_raw_from","","Copies the raw representation of an object `d` to `self`, overwriting as necessary.",138,{"inputs":[{"name":"populatable"},{"name":"bytesconvertable"}],"output":null}],[10,"as_slice_mut","","Get the raw slice for this object.",138,null],[8,"FromRawBytes","","Value that can be serialized from bytes array",null,null],[10,"from_bytes","","function that will instantiate and initialize object from slice",139,null],[8,"FromRawBytesVariable","","Value that can be serialized from variable-length byte array",null,null],[10,"from_bytes_variable","","Create value from slice",140,null],[8,"ToBytesWithMap","","Value that serializes directly to variable-sized byte array and stores map",null,null],[10,"to_bytes_map","","serialize to variable-sized byte array and store map",141,{"inputs":[{"name":"tobyteswithmap"}],"output":{"name":"vec"}}],[11,"vec_push","collections::vec","",142,{"inputs":[{"name":"vec"},{"name":"t"}],"output":null}],[11,"vec_extend","","",142,null],[11,"vec_push","elastic_array","",143,{"inputs":[{"name":"elasticarray16"},{"name":"t"}],"output":null}],[11,"vec_extend","","",143,null],[11,"vec_push","","",144,{"inputs":[{"name":"elasticarray32"},{"name":"t"}],"output":null}],[11,"vec_extend","","",144,null],[11,"vec_push","","",145,{"inputs":[{"name":"elasticarray1024"},{"name":"t"}],"output":null}],[11,"vec_extend","","",145,null],[11,"fmt","ethcore_util::bytes","",146,{"inputs":[{"name":"prettyslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"prettyslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pretty","","",147,{"inputs":[{"name":"bytes"}],"output":{"name":"prettyslice"}}],[11,"deref","","",133,null],[11,"deref_mut","","",133,null],[11,"fmt","","",134,{"inputs":[{"name":"frombyteserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bytes_variable","collections::string","",148,null],[11,"from_bytes_variable","collections::vec","",142,null],[11,"from_bytes_variable","","",142,null],[0,"rlp","ethcore_util","Rlp serialization module",null,null],[11,"new","elastic_array","",145,{"inputs":[],"output":{"name":"elasticarray1024"}}],[11,"push","","",145,null],[11,"pop","","",145,{"inputs":[{"name":"elasticarray1024"}],"output":{"name":"option"}}],[11,"clear","","",145,null],[11,"append_slice","","",145,null],[11,"to_vec","","",145,{"inputs":[{"name":"elasticarray1024"}],"output":{"name":"vec"}}],[11,"insert_slice","","",145,null],[11,"deref_mut","","",145,null],[11,"deref","","",145,null],[3,"ElasticArray1024","ethcore_util::rlp","",null,null],[3,"UntrustedRlp","","Data-oriented view onto rlp-slice.",null,null],[3,"UntrustedRlpIterator","","Iterator over rlp-slice list elements.",null,null],[3,"PayloadInfo","","Stores basic information about item",null,null],[12,"header_len","","Header length in bytes",149,null],[12,"value_len","","Value length in bytes",149,null],[3,"Rlp","","Data-oriented view onto trusted rlp-slice.",null,null],[3,"RlpIterator","","Iterator over trusted rlp-slice list elements.",null,null],[3,"RlpStream","","Appendable rlp encoder.",null,null],[4,"DecoderError","","Error concerning the RLP decoder.",null,null],[13,"FromBytesError","","Couldn&#39;t convert given bytes to an instance of required type.",150,null],[13,"RlpIsTooBig","","Data has additional bytes at the end of the valid RLP fragment.",150,null],[13,"RlpIsTooShort","","Data has too few bytes for valid RLP.",150,null],[13,"RlpExpectedToBeList","","Expect an encoded list, RLP was something else.",150,null],[13,"RlpExpectedToBeData","","Expect encoded data, RLP was something else.",150,null],[13,"RlpIncorrectListLen","","Expected a different size list.",150,null],[13,"RlpDataLenWithZeroPrefix","","Data length number has a prefixed zero byte, invalid for numbers.",150,null],[13,"RlpListLenWithZeroPrefix","","List length number has a prefixed zero byte, invalid for numbers.",150,null],[13,"RlpInvalidIndirection","","Non-canonical (longer than necessary) representation used for data or list.",150,null],[13,"RlpInconsistentLengthAndData","","Declared length is inconsistent with data specified after.",150,null],[13,"Custom","","Custom rlp decoding error.",150,null],[4,"Prototype","","RLP prototype",null,null],[13,"Null","","Empty",151,null],[13,"Data","","Value",151,null],[13,"List","","List",151,null],[5,"decode","","Shortcut function to decode trusted rlp",null,null],[5,"encode","","Shortcut function to encode structure into rlp.",null,{"inputs":[{"name":"e"}],"output":{"name":"elasticarray1024"}}],[0,"rlptraits","","Common RLP traits",null,null],[8,"Decoder","ethcore_util::rlp::rlptraits","Type is able to decode RLP.",null,null],[10,"read_value","","Read a value from the RLP into a given type.",152,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"as_rlp","","Get underlying `UntrustedRLP` object.",152,{"inputs":[{"name":"decoder"}],"output":{"name":"untrustedrlp"}}],[10,"as_raw","","Get underlying raw bytes slice.",152,null],[8,"Decodable","","RLP decodable trait",null,null],[10,"decode","","Decode a value from RLP bytes",153,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"RlpDecodable","","Internal helper trait. Implement `Decodable` for custom types.",null,null],[10,"decode","","Decode a value from RLP bytes",154,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"View","","A view into RLP encoded data",null,null],[16,"Prototype","","RLP prototype type",155,null],[16,"PayloadInfo","","Payload info type",155,null],[16,"Data","","Data type",155,null],[16,"Item","","Item type",155,null],[16,"Iter","","Iterator type",155,null],[10,"new","","Creates a new instance of `Rlp` reader",155,null],[10,"as_raw","","The raw data of the RLP.",155,null],[10,"prototype","","Get the prototype of the RLP.",155,{"inputs":[{"name":"view"}],"output":{"name":"prototype"}}],[10,"payload_info","","Get payload info.",155,{"inputs":[{"name":"view"}],"output":{"name":"payloadinfo"}}],[10,"data","","Get underlieing data.",155,{"inputs":[{"name":"view"}],"output":{"name":"data"}}],[10,"item_count","","Returns number of RLP items.",155,{"inputs":[{"name":"view"}],"output":{"name":"usize"}}],[10,"size","","Returns the number of bytes in the data, or zero if it isn&#39;t data.",155,{"inputs":[{"name":"view"}],"output":{"name":"usize"}}],[10,"at","","Get view onto RLP-slice at index.",155,{"inputs":[{"name":"view"},{"name":"usize"}],"output":{"name":"item"}}],[10,"is_null","","No value",155,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_empty","","Contains a zero-length string or zero-length list.",155,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_list","","List value",155,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_data","","String value",155,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_int","","Int value",155,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"iter","","Get iterator over rlp-slices",155,{"inputs":[{"name":"view"}],"output":{"name":"iter"}}],[10,"as_val","","Decode data into an object",155,{"inputs":[{"name":"view"}],"output":{"name":"result"}}],[10,"val_at","","Decode data at given list index into an object",155,{"inputs":[{"name":"view"},{"name":"usize"}],"output":{"name":"result"}}],[8,"Encoder","","Raw RLP encoder",null,null],[10,"emit_value","","Write a value represented as bytes",156,{"inputs":[{"name":"encoder"},{"name":"e"}],"output":null}],[10,"emit_raw","","Write raw preencoded data to the output",156,null],[8,"ByteEncodable","","Primitive data type encodable to RLP",null,null],[10,"to_bytes","","Serialize this object to given byte container",157,{"inputs":[{"name":"byteencodable"},{"name":"v"}],"output":null}],[10,"bytes_len","","Get size of serialised data in bytes",157,{"inputs":[{"name":"byteencodable"}],"output":{"name":"usize"}}],[8,"Encodable","","Structure encodable to RLP. Implement this trait for",null,null],[10,"rlp_append","","Append a value to the stream",158,{"inputs":[{"name":"encodable"},{"name":"rlpstream"}],"output":null}],[11,"rlp_bytes","","Get rlp-encoded bytes for this instance",158,{"inputs":[{"name":"encodable"}],"output":{"name":"elasticarray1024"}}],[11,"rlp_sha3","","Get the hash or RLP encoded representation",158,{"inputs":[{"name":"encodable"}],"output":{"name":"h256"}}],[8,"RlpEncodable","","Encodable wrapper trait required to handle special case of encoding a &amp;[u8] as string and not as list",null,null],[10,"rlp_append","","Append a value to the stream",159,{"inputs":[{"name":"rlpencodable"},{"name":"rlpstream"}],"output":null}],[8,"Stream","","RLP encoding stream",null,null],[10,"new","","Initializes instance of empty `Stream`.",160,{"inputs":[],"output":{"name":"self"}}],[10,"new_list","","Initializes the `Stream` as a list.",160,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"append","","Apends value to the end of stream, chainable.",160,{"inputs":[{"name":"stream"},{"name":"e"}],"output":{"name":"self"}}],[10,"begin_list","","Declare appending the list of given size, chainable.",160,{"inputs":[{"name":"stream"},{"name":"usize"}],"output":{"name":"self"}}],[10,"append_empty_data","","Apends null to the end of stream, chainable.",160,{"inputs":[{"name":"stream"}],"output":{"name":"self"}}],[10,"append_raw","","Appends raw (pre-serialised) RLP data. Use with caution. Chainable.",160,null],[10,"clear","","Clear the output stream so far.",160,{"inputs":[{"name":"stream"}],"output":null}],[10,"is_finished","","Returns true if stream doesnt expect any more items.",160,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[10,"as_raw","","Get raw encoded bytes",160,null],[10,"out","","Streams out encoded bytes.",160,{"inputs":[{"name":"stream"}],"output":{"name":"vec"}}],[11,"eq","ethcore_util::rlp","",150,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",150,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"fmt","","",150,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",150,{"inputs":[{"name":"frombyteserror"}],"output":{"name":"decodererror"}}],[11,"from","","",161,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"rlp"}}],[11,"fmt","","",161,{"inputs":[{"name":"rlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"rlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of `Rlp`",161,null],[11,"as_raw","","",161,null],[11,"prototype","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"prototype"}}],[11,"payload_info","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"payloadinfo"}}],[11,"data","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"data"}}],[11,"item_count","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"usize"}}],[11,"size","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"usize"}}],[11,"at","","",161,{"inputs":[{"name":"rlp"},{"name":"usize"}],"output":{"name":"item"}}],[11,"is_null","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_empty","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_list","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_data","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_int","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"iter","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"iter"}}],[11,"as_val","","",161,{"inputs":[{"name":"rlp"}],"output":{"name":"result"}}],[11,"val_at","","",161,{"inputs":[{"name":"rlp"},{"name":"usize"}],"output":{"name":"result"}}],[11,"as_val","","Decode into an object",161,{"inputs":[{"name":"rlp"}],"output":{"name":"t"}}],[11,"val_at","","Decode list item at given index into an object",161,{"inputs":[{"name":"rlp"},{"name":"usize"}],"output":{"name":"t"}}],[11,"next","","",162,{"inputs":[{"name":"rlpiterator"}],"output":{"name":"option"}}],[11,"fmt","","",151,{"inputs":[{"name":"prototype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"total","","Total size of the RLP.",149,{"inputs":[{"name":"payloadinfo"}],"output":{"name":"usize"}}],[11,"from","","Create a new object from the given bytes RLP. The bytes",149,null],[11,"fmt","","",163,{"inputs":[{"name":"untrustedrlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"untrustedrlp"}}],[11,"fmt","","",163,{"inputs":[{"name":"untrustedrlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",163,null],[11,"as_raw","","",163,null],[11,"prototype","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"prototype"}}],[11,"payload_info","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"payloadinfo"}}],[11,"data","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"data"}}],[11,"item_count","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"usize"}}],[11,"size","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"usize"}}],[11,"at","","",163,{"inputs":[{"name":"untrustedrlp"},{"name":"usize"}],"output":{"name":"item"}}],[11,"is_null","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_empty","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_list","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_data","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_int","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"iter","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"iter"}}],[11,"as_val","","",163,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"result"}}],[11,"val_at","","",163,{"inputs":[{"name":"untrustedrlp"},{"name":"usize"}],"output":{"name":"result"}}],[11,"next","","",164,{"inputs":[{"name":"untrustedrlpiterator"}],"output":{"name":"option"}}],[11,"decode","collections::vec","",142,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","ethcore_util::standard::option","",106,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","collections::vec","",142,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","ethcore_util::rlp","",165,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"new_list","","",165,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"append","","",165,{"inputs":[{"name":"rlpstream"},{"name":"e"}],"output":{"name":"self"}}],[11,"begin_list","","",165,{"inputs":[{"name":"rlpstream"},{"name":"usize"}],"output":{"name":"rlpstream"}}],[11,"append_empty_data","","",165,{"inputs":[{"name":"rlpstream"}],"output":{"name":"rlpstream"}}],[11,"append_raw","","",165,null],[11,"clear","","",165,{"inputs":[{"name":"rlpstream"}],"output":null}],[11,"is_finished","","",165,{"inputs":[{"name":"rlpstream"}],"output":{"name":"bool"}}],[11,"as_raw","","",165,null],[11,"out","","",165,{"inputs":[{"name":"rlpstream"}],"output":{"name":"vec"}}],[11,"drain","","Drain the object and return the underlying ElasticArray.",165,{"inputs":[{"name":"rlpstream"}],"output":{"name":"elasticarray1024"}}],[11,"rlp_append","collections::vec","",142,{"inputs":[{"name":"vec"},{"name":"rlpstream"}],"output":null}],[11,"rlp_append","","",142,{"inputs":[{"name":"vec"},{"name":"rlpstream"}],"output":null}],[11,"rlp_append","ethcore_util::standard::option","",106,{"inputs":[{"name":"option"},{"name":"rlpstream"}],"output":null}],[17,"NULL_RLP","ethcore_util::rlp","The RLP encoded empty data (used to mean &quot;null value&quot;).",null,null],[17,"EMPTY_LIST_RLP","","The RLP encoded empty list.",null,null],[17,"SHA3_NULL_RLP","","The SHA3 of the RLP encoding of empty data.",null,null],[17,"SHA3_EMPTY_LIST_RLP","","The SHA3 of the RLP encoding of empty list.",null,null],[0,"misc","ethcore_util","Diff misc.",null,null],[4,"Filth","ethcore_util::misc","Boolean type for clean/dirty status.",null,null],[13,"Clean","","Data has not been changed.",166,null],[13,"Dirty","","Data has been changed.",166,null],[5,"now","","Generate a timestamp representing now (UTC) in RFC3339 format.",null,{"inputs":[],"output":{"name":"str"}}],[5,"short_now","","Generate a timstamp string representing now (UTC).",null,{"inputs":[],"output":{"name":"str"}}],[5,"sha","","Generate a SHA string",null,{"inputs":[],"output":{"name":"str"}}],[5,"short_sha","","Generate a short SHA string",null,{"inputs":[],"output":{"name":"str"}}],[5,"commit_date","","Generate the commit date string",null,{"inputs":[],"output":{"name":"str"}}],[5,"target","","Generate the target triple string",null,{"inputs":[],"output":{"name":"str"}}],[5,"semver","","Generate a semver string",null,{"inputs":[],"output":{"name":"str"}}],[5,"rustc_version","","Returns compiler version.",null,{"inputs":[],"output":{"name":"str"}}],[5,"contents","","Read the whole contents of a file `name`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"version","","Get the standard version string for this software.",null,{"inputs":[],"output":{"name":"string"}}],[5,"version_data","","Get the standard version data for this software.",null,{"inputs":[],"output":{"name":"bytes"}}],[11,"clone","","",166,{"inputs":[{"name":"filth"}],"output":{"name":"filth"}}],[11,"eq","","",166,{"inputs":[{"name":"filth"},{"name":"filth"}],"output":{"name":"bool"}}],[0,"using_queue","ethcore_util","Queue-like datastructure including notion of usage.",null,null],[3,"UsingQueue","ethcore_util::using_queue","Special queue-like datastructure that includes the notion of\nusage to avoid items that were queued but never used from making it into\nthe queue.",null,null],[11,"new","","Create a new struct with a maximum size of `max_size`.",167,{"inputs":[{"name":"usize"}],"output":{"name":"usingqueue"}}],[11,"peek_last_ref","","Return a reference to the item at the top of the queue (or `None` if the queue is empty);\nit doesn&#39;t constitute noting that the item is used.",167,{"inputs":[{"name":"usingqueue"}],"output":{"name":"option"}}],[11,"use_last_ref","","Return a reference to the item at the top of the queue (or `None` if the queue is empty);\nthis constitutes using the item and will remain in the queue for at least another\n`max_size` invocations of `push()`.",167,{"inputs":[{"name":"usingqueue"}],"output":{"name":"option"}}],[11,"push","","Place an item on the end of the queue. The previously `push()`ed item will be removed\nif `use_last_ref()` since it was `push()`ed.",167,{"inputs":[{"name":"usingqueue"},{"name":"t"}],"output":null}],[11,"reset","","Clears everything; the queue is entirely reset.",167,{"inputs":[{"name":"usingqueue"}],"output":null}],[11,"take_used_if","","Returns `Some` item which is the first that `f` returns `true` with a reference to it\nas a parameter or `None` if no such item exists in the queue.",167,{"inputs":[{"name":"usingqueue"},{"name":"p"}],"output":{"name":"option"}}],[11,"pop_if","","Returns the most recently pushed block if `f` returns `true` with a reference to it as\na parameter, otherwise `None`.\nWill not destroy a block if a reference to it has previously been returned by `use_last_ref`,\nbut rather clone it.",167,{"inputs":[{"name":"usingqueue"},{"name":"p"}],"output":{"name":"option"}}],[11,"from_json","ethcore_util::json_aid","",147,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","collections::btree::map","",168,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","collections::vec","",142,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","ethcore_util::standard::option","",106,{"inputs":[{"name":"json"}],"output":{"name":"self"}}],[0,"vector","ethcore_util","Vector extensions.",null,null],[8,"SharedPrefix","ethcore_util::vector","Returns len of prefix shared with elem",null,null],[10,"shared_prefix_len","","Get common prefix length",169,null],[11,"shared_prefix_len","collections::vec","",142,null],[0,"sha3","ethcore_util","Wrapper around tiny-keccak crate.",null,null],[17,"SHA3_EMPTY","ethcore_util::sha3","Get the SHA3 (i.e. Keccak) hash of the empty bytes string.",null,null],[8,"Hashable","","Types implementing this trait are sha3able.",null,null],[10,"sha3","","Calculate SHA3 of this object.",170,{"inputs":[{"name":"hashable"}],"output":{"name":"h256"}}],[11,"sha3_into","","Calculate SHA3 of this object and place result into dest.",170,null],[0,"hashdb","ethcore_util","Database of byte-slices keyed to their Keccak hash.",null,null],[8,"HashDB","ethcore_util::hashdb","Trait modelling datastore keyed by a 32-byte Keccak hash.",null,null],[10,"keys","","Get the keys in the database together with number of underlying references.",171,{"inputs":[{"name":"hashdb"}],"output":{"name":"hashmap"}}],[10,"get","","Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.",171,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"option"}}],[10,"contains","","Check for the existance of a hash-key.",171,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"bool"}}],[10,"insert","","Insert a datum item into the DB and return the datum&#39;s hash for a later lookup. Insertions\nare counted and the equivalent number of `remove()`s must be performed before the data\nis considered dead.",171,null],[10,"emplace","","Like `insert()` , except you provide the key and the data is all moved.",171,{"inputs":[{"name":"hashdb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[10,"remove","","Remove a datum previously inserted. Insertions can be &quot;owed&quot; such that the same number of `insert()`s may\nhappen without the data being eventually being inserted into the DB.",171,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":null}],[8,"AsHashDB","","Upcast trait.",null,null],[10,"as_hashdb","","Perform upcast to HashDB for anything that derives from HashDB.",172,{"inputs":[{"name":"ashashdb"}],"output":{"name":"hashdb"}}],[10,"as_hashdb_mut","","Perform mutable upcast to HashDB for anything that derives from HashDB.",172,{"inputs":[{"name":"ashashdb"}],"output":{"name":"hashdb"}}],[0,"memorydb","ethcore_util","Reference-counted memory-based `HashDB` implementation.",null,null],[3,"MemoryDB","ethcore_util::memorydb","Reference-counted memory-based `HashDB` implementation.",null,null],[11,"clone","","",173,{"inputs":[{"name":"memorydb"}],"output":{"name":"memorydb"}}],[11,"fmt","","",173,{"inputs":[{"name":"memorydb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",173,{"inputs":[{"name":"memorydb"},{"name":"memorydb"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"memorydb"},{"name":"memorydb"}],"output":{"name":"bool"}}],[11,"default","","",173,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new instance of the memory DB.",173,{"inputs":[],"output":{"name":"memorydb"}}],[11,"clear","","Clear all data from the database.",173,{"inputs":[{"name":"memorydb"}],"output":null}],[11,"purge","","Purge all zero-referenced data from the database.",173,{"inputs":[{"name":"memorydb"}],"output":null}],[11,"raw","","Grab the raw information associated with a key. Returns None if the key\ndoesn&#39;t exist.",173,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"drain","","Return the internal map of hashes to data, clearing the current state.",173,{"inputs":[{"name":"memorydb"}],"output":{"name":"hashmap"}}],[11,"denote","","Denote than an existing value has the given key. Used when a key gets removed without\na prior insert and thus has a negative reference with no value.",173,null],[11,"mem_used","","Returns the size of allocated heap memory",173,{"inputs":[{"name":"memorydb"}],"output":{"name":"usize"}}],[11,"get","","",173,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"keys","","",173,{"inputs":[{"name":"memorydb"}],"output":{"name":"hashmap"}}],[11,"contains","","",173,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",173,null],[11,"emplace","","",173,{"inputs":[{"name":"memorydb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"remove","","",173,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":null}],[0,"migration","ethcore_util","DB Migration module.",null,null],[3,"Config","ethcore_util::migration","Migration config.",null,null],[12,"batch_size","","Defines how many elements should be migrated at once.",174,null],[3,"Manager","","Manages database migration.",null,null],[3,"MigrationIterator","","Database iterator with `Item` complient with migration `Manager` interface.",null,null],[4,"Error","","Migration error.",null,null],[13,"CannotAddMigration","","Error returned when it is impossible to add new migration rules.",175,null],[13,"MigrationImpossible","","Error returned when migration from specific version can not be performed.",175,null],[13,"Custom","","Custom error.",175,null],[11,"from","","",176,{"inputs":[{"name":"databaseiterator"}],"output":{"name":"self"}}],[11,"next","","",176,{"inputs":[{"name":"migrationiterator"}],"output":{"name":"option"}}],[11,"fmt","","",175,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",174,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new migration manager with given configuration.",177,{"inputs":[{"name":"config"}],"output":{"name":"self"}}],[11,"add_migration","","Adds new migration rules.",177,{"inputs":[{"name":"manager"},{"name":"t"}],"output":{"name":"result"}}],[11,"execute","","Performs migration to destination.",177,{"inputs":[{"name":"manager"},{"name":"d"},{"name":"u32"},{"name":"destination"}],"output":{"name":"result"}}],[11,"is_needed","","Returns true if migration is needed.",177,{"inputs":[{"name":"manager"},{"name":"u32"}],"output":{"name":"bool"}}],[8,"Migration","","Single migration.",null,null],[10,"version","","Version of database after the migration.",178,{"inputs":[{"name":"migration"}],"output":{"name":"u32"}}],[10,"simple_migrate","","Should migrate existing object to new database.\nReturns `None` if the object does not exist in new version of database.",178,{"inputs":[{"name":"migration"},{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[8,"Destination","","Migration destination.",null,null],[10,"commit","","Called on destination to commit batch of migrated entries.",179,{"inputs":[{"name":"destination"},{"name":"btreemap"}],"output":{"name":"result"}}],[0,"overlaydb","ethcore_util","Disk-backed `HashDB` implementation.",null,null],[3,"OverlayDB","ethcore_util::overlaydb","Implementation of the `HashDB` trait for a disk-backed database with a memory overlay.",null,null],[11,"clone","","",180,{"inputs":[{"name":"overlaydb"}],"output":{"name":"overlaydb"}}],[11,"new","","Create a new instance of OverlayDB given a `backing` database.",180,{"inputs":[{"name":"database"}],"output":{"name":"overlaydb"}}],[11,"new_with_arc","","Create a new instance of OverlayDB given a `backing` database.",180,{"inputs":[{"name":"arc"}],"output":{"name":"overlaydb"}}],[11,"new_temp","","Create a new instance of OverlayDB with an anonymous temporary database.",180,{"inputs":[],"output":{"name":"overlaydb"}}],[11,"commit_to_batch","","Commit all operations to given batch.",180,{"inputs":[{"name":"overlaydb"},{"name":"dbtransaction"}],"output":{"name":"result"}}],[11,"commit","","Commit all memory operations to the backing database.",180,{"inputs":[{"name":"overlaydb"}],"output":{"name":"result"}}],[11,"revert","","Revert all operations on this object (i.e. `insert()`s and `remove()`s) since the\nlast `commit()`.",180,{"inputs":[{"name":"overlaydb"}],"output":null}],[11,"commit_refs","","Get the number of references that would be committed.",180,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":{"name":"i32"}}],[11,"keys","","",180,{"inputs":[{"name":"overlaydb"}],"output":{"name":"hashmap"}}],[11,"get","","",180,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"contains","","",180,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",180,null],[11,"emplace","","",180,{"inputs":[{"name":"overlaydb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"remove","","",180,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":null}],[0,"journaldb","ethcore_util","`JournalDB` interface and implementation.",null,null],[4,"Algorithm","ethcore_util::journaldb","A journal database algorithm.",null,null],[13,"Archive","","Keep all keys forever.",181,null],[13,"EarlyMerge","","Ancient and recent history maintained separately; recent history lasts for particular\nnumber of blocks.",181,null],[13,"OverlayRecent","","Ancient and recent history maintained separately; recent history lasts for particular\nnumber of blocks.",181,null],[13,"RefCounted","","Ancient and recent history maintained separately; recent history lasts for particular\nnumber of blocks.",181,null],[5,"new","","Create a new `JournalDB` trait object.",null,{"inputs":[{"name":"str"},{"name":"algorithm"},{"name":"option"}],"output":{"name":"box"}}],[0,"traits","","Export the journaldb module.\nDisk-backed `HashDB` implementation.",null,null],[8,"JournalDB","ethcore_util::journaldb::traits","A `HashDB` which can manage a short-term journal potentially containing many forks of mutually\nexclusive actions.",null,null],[10,"boxed_clone","","Return a copy of ourself, in a box.",182,{"inputs":[{"name":"journaldb"}],"output":{"name":"box"}}],[10,"mem_used","","Returns heap memory size used",182,{"inputs":[{"name":"journaldb"}],"output":{"name":"usize"}}],[10,"is_empty","","Check if this database has any commits",182,{"inputs":[{"name":"journaldb"}],"output":{"name":"bool"}}],[10,"latest_era","","Get the latest era in the DB. None if there isn&#39;t yet any data in there.",182,{"inputs":[{"name":"journaldb"}],"output":{"name":"option"}}],[10,"commit","","Commit all recent insert operations and canonical historical commits&#39; removals from the\nold era to the backing database, reverting any non-canonical historical commit&#39;s inserts.",182,{"inputs":[{"name":"journaldb"},{"name":"u64"},{"name":"h256"},{"name":"option"}],"output":{"name":"result"}}],[11,"state","","State data query",182,{"inputs":[{"name":"journaldb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"is_pruned","","Whether this database is pruned.",182,{"inputs":[{"name":"journaldb"}],"output":{"name":"bool"}}],[11,"clone","ethcore_util::journaldb","",181,{"inputs":[{"name":"algorithm"}],"output":{"name":"algorithm"}}],[11,"fmt","","",181,{"inputs":[{"name":"algorithm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",181,{"inputs":[],"output":{"name":"algorithm"}}],[11,"fmt","","",181,{"inputs":[{"name":"algorithm"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"kvdb","ethcore_util","Key-Value store abstraction with `RocksDB` backend.",null,null],[3,"DBTransaction","ethcore_util::kvdb","Write transaction. Batches a sequence of put/delete operations for efficiency.",null,null],[3,"DatabaseConfig","","Database configuration",null,null],[12,"prefix_size","","Optional prefix size in bytes. Allows lookup by partial key.",183,null],[12,"max_open_files","","Max number of open files.",183,null],[12,"cache_size","","Cache-size",183,null],[3,"DatabaseIterator","","Database iterator",null,null],[3,"Database","","Key-Value database.",null,null],[11,"default","","",184,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create new transaction.",184,{"inputs":[],"output":{"name":"dbtransaction"}}],[11,"put","","Insert a key-value pair in the transaction. Any existing value value will be overwritten upon write.",184,null],[11,"delete","","Delete value by key.",184,null],[11,"with_cache","","Database with default settings and specified cache size",183,{"inputs":[{"name":"usize"}],"output":{"name":"databaseconfig"}}],[11,"default","","",183,{"inputs":[],"output":{"name":"databaseconfig"}}],[11,"next","","",185,{"inputs":[{"name":"databaseiterator"}],"output":{"name":"option"}}],[11,"open_default","","Open database with default settings.",186,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"open","","Open database file. Creates if it does not exist.",186,{"inputs":[{"name":"databaseconfig"},{"name":"str"}],"output":{"name":"result"}}],[11,"put","","Insert a key-value pair in the transaction. Any existing value value will be overwritten.",186,null],[11,"delete","","Delete value by key.",186,null],[11,"write","","Commit transaction to database.",186,{"inputs":[{"name":"database"},{"name":"dbtransaction"}],"output":{"name":"result"}}],[11,"get","","Get value by key.",186,null],[11,"get_by_prefix","","Get value by partial key. Prefix size should match configured prefix size.",186,null],[11,"is_empty","","Check if there is anything in the database.",186,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[11,"iter","","Check if there is anything in the database.",186,{"inputs":[{"name":"database"}],"output":{"name":"databaseiterator"}}],[0,"crypto","ethcore_util","Ethcore crypto.",null,null],[3,"KeyPair","ethcore_util::crypto","secp256k1 Key pair",null,null],[4,"CryptoError","","Crypto error",null,null],[13,"InvalidSecret","","Invalid secret key",187,null],[13,"InvalidPublic","","Invalid public key",187,null],[13,"InvalidSignature","","Invalid EC signature",187,null],[13,"InvalidMessage","","Invalid AES message",187,null],[13,"Io","","IO Error",187,null],[0,"ec","","EC functions",null,null],[5,"recover","ethcore_util::crypto::ec","Recovers Public key from signed message hash.",null,{"inputs":[{"name":"signature"},{"name":"h256"}],"output":{"name":"result"}}],[5,"sign","","Returns siganture of message hash.",null,{"inputs":[{"name":"secret"},{"name":"h256"}],"output":{"name":"result"}}],[5,"verify","","Verify signature.",null,{"inputs":[{"name":"public"},{"name":"signature"},{"name":"h256"}],"output":{"name":"result"}}],[5,"is_low","","Check if this is a &quot;low&quot; signature.",null,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[5,"is_low_s","","Check if this is a &quot;low&quot; signature.",null,{"inputs":[{"name":"u256"}],"output":{"name":"bool"}}],[5,"is_valid","","Check if each component of the signature is in range.",null,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[0,"ecdh","ethcore_util::crypto","ECDH functions",null,null],[5,"agree","ethcore_util::crypto::ecdh","Agree on a shared secret",null,{"inputs":[{"name":"secret"},{"name":"public"}],"output":{"name":"result"}}],[0,"ecies","ethcore_util::crypto","ECIES function",null,null],[5,"encrypt","ethcore_util::crypto::ecies","Encrypt a message with a public key",null,null],[5,"decrypt","","Decrypt a message with a secret key",null,null],[0,"aes","ethcore_util::crypto","AES encryption",null,null],[5,"encrypt","ethcore_util::crypto::aes","Encrypt a message",null,null],[5,"decrypt","","Decrypt a message",null,null],[6,"Secret","ethcore_util::crypto","Secret key for secp256k1 EC operations. 256 bit generic &quot;hash&quot; data.",null,null],[6,"Public","","Public key for secp256k1 EC operations. 512 bit generic &quot;hash&quot; data.",null,null],[6,"Signature","","Signature for secp256k1 EC operations; encodes two 256-bit curve points\nand a third sign bit. 520 bit generic &quot;hash&quot; data.",null,null],[11,"sign_schnorr","secp256k1","Create a Schnorr signature",188,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"verify_schnorr","","Verify a Schnorr signature",188,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}],[11,"recover_schnorr","","Retrieves the public key for which `sig` is a valid signature for `msg`.\nRequires a verify-capable context.",188,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"}],"output":{"name":"result"}}],[11,"new","","Creates a new Secp256k1 context",188,{"inputs":[],"output":{"name":"secp256k1"}}],[11,"with_caps","","Creates a new Secp256k1 context with the specified capabilities",188,{"inputs":[{"name":"contextflag"}],"output":{"name":"secp256k1"}}],[11,"without_caps","","Creates a new Secp256k1 context with no capabilities (just de/serialization)",188,{"inputs":[],"output":{"name":"secp256k1"}}],[11,"randomize","","(Re)randomizes the Secp256k1 context for cheap sidechannel resistence;\nsee comment in libsecp256k1 commit d2275795f by Gregory Maxwell",188,null],[11,"generate_keypair","","Generates a random keypair. Convenience function for `key::SecretKey::new`\nand `key::PublicKey::from_secret_key`; call those functions directly for\nbatch key generation. Requires a signing-capable context.",188,{"inputs":[{"name":"secp256k1"},{"name":"r"}],"output":{"name":"result"}}],[11,"sign","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce\nRequires a signing-capable context.",188,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"sign_recoverable","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce\nRequires a signing-capable context.",188,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"recover","","Determines the public key for which `sig` is a valid signature for\n`msg`. Requires a verify-capable context.",188,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"recoverablesignature"}],"output":{"name":"result"}}],[11,"verify","","Checks that `sig` is a valid ECDSA signature for `msg` using the public\nkey `pubkey`. Returns `Ok(true)` on success. Note that this function cannot\nbe used for Bitcoin consensus checking since there may exist signatures\nwhich OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a\nverify-capable context.",188,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}],[11,"drop","","",188,null],[11,"fmt","","",188,{"inputs":[{"name":"secp256k1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",188,{"inputs":[{"name":"secp256k1"},{"name":"secp256k1"}],"output":{"name":"bool"}}],[11,"clone","","",188,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"from_rsv","ethcore_util::crypto","Create a new signature from the R, S and V componenets.",189,{"inputs":[{"name":"h256"},{"name":"h256"},{"name":"u8"}],"output":{"name":"signature"}}],[11,"to_rsv","","Convert transaction to R, S and V components.",189,null],[11,"fmt","","",187,{"inputs":[{"name":"cryptoerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"cryptoerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",187,{"inputs":[{"name":"error"}],"output":{"name":"cryptoerror"}}],[11,"from","","",187,{"inputs":[{"name":"error"}],"output":{"name":"cryptoerror"}}],[11,"eq","","",190,{"inputs":[{"name":"keypair"},{"name":"keypair"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"keypair"},{"name":"keypair"}],"output":{"name":"bool"}}],[11,"fmt","","",190,{"inputs":[{"name":"keypair"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_secret","","Create a pair from secret key",190,{"inputs":[{"name":"secret"}],"output":{"name":"result"}}],[11,"create","","Create a new random key pair",190,{"inputs":[],"output":{"name":"result"}}],[11,"public","","Returns public key",190,{"inputs":[{"name":"keypair"}],"output":{"name":"public"}}],[11,"secret","","Returns private key",190,{"inputs":[{"name":"keypair"}],"output":{"name":"secret"}}],[11,"address","","Returns address.",190,{"inputs":[{"name":"keypair"}],"output":{"name":"address"}}],[11,"sign","","Sign a message with our secret key.",190,{"inputs":[{"name":"keypair"},{"name":"h256"}],"output":{"name":"result"}}],[0,"triehash","ethcore_util","Generetes trie root.",null,null],[5,"ordered_trie_root","ethcore_util::triehash","Generates a trie root hash for a vector of values",null,{"inputs":[{"name":"vec"}],"output":{"name":"h256"}}],[5,"trie_root","","Generates a trie root hash for a vector of key-values",null,{"inputs":[{"name":"vec"}],"output":{"name":"h256"}}],[5,"sec_trie_root","","Generates a key-hashed (secure) trie root hash for a vector of key-values.",null,{"inputs":[{"name":"vec"}],"output":{"name":"h256"}}],[0,"trie","ethcore_util","Trie interface and implementation.",null,null],[4,"TrieError","ethcore_util::trie","Trie Errors",null,null],[13,"InvalidStateRoot","","Attempted to create a trie with a state root not in the DB.",191,null],[0,"trietraits","","Export the trietraits module.",null,null],[8,"Trie","ethcore_util::trie::trietraits","A key-value datastore implemented as a database-backed modified Merkle tree.",null,null],[10,"root","","Return the root of the trie.",192,{"inputs":[{"name":"trie"}],"output":{"name":"h256"}}],[11,"is_empty","","Is the trie empty?",192,{"inputs":[{"name":"trie"}],"output":{"name":"bool"}}],[10,"contains","","Does the trie contain a given key?",192,null],[10,"get","","What is the value of the given key in this trie?",192,null],[8,"TrieMut","","A key-value datastore implemented as a database-backed modified Merkle tree.",null,null],[10,"insert","","Insert a `key`/`value` pair into the trie. An `empty` value is equivalent to removing\n`key` from the trie.",193,null],[10,"remove","","Remove a `key` from the trie. Equivalent to making it equal to the empty\nvalue.",193,null],[0,"standardmap","ethcore_util::trie","Export the standardmap module.\nKey-value datastore with a modified Merkle tree.",null,null],[3,"StandardMap","ethcore_util::trie::standardmap","Standard test map for profiling tries.",null,null],[12,"alphabet","","The alphabet to use for keys.",194,null],[12,"min_key","","Minimum size of key.",194,null],[12,"journal_key","","Delta size of key.",194,null],[12,"value_mode","","Mode of value generation.",194,null],[12,"count","","Number of keys.",194,null],[4,"Alphabet","","Alphabet to use when creating words for insertion into tries.",null,null],[13,"All","","All values are allowed in each bytes of the key.",195,null],[13,"Low","","Only a 6 values (&#39;a&#39; - &#39;f&#39;) are chosen to compose the key.",195,null],[13,"Mid","","Quite a few values (around 32) are chosen to compose the key.",195,null],[13,"Custom","","A set of bytes given is used to compose the key.",195,null],[4,"ValueMode","","Means of determining the value.",null,null],[13,"Mirror","","Same as the key.",196,null],[13,"Random","","Randomly (50:50) 1 or 32 byte randomly string.",196,null],[13,"Index","","RLP-encoded index.",196,null],[11,"make","","Create the standard map (set of keys and values) for the object&#39;s fields.",194,{"inputs":[{"name":"standardmap"}],"output":{"name":"vec"}}],[11,"make_with","","Create the standard map (set of keys and values) for the object&#39;s fields, using the given seed.",194,{"inputs":[{"name":"standardmap"},{"name":"h256"}],"output":{"name":"vec"}}],[0,"journal","ethcore_util::trie","Export the journal module.",null,null],[3,"Score","ethcore_util::trie::journal","How many insertions and removals were done in an `apply` operation.",null,null],[12,"inserts","","Number of insertions.",197,null],[12,"removes","","Number of removals.",197,null],[3,"Journal","","A journal of operations on the backing database.",null,null],[11,"fmt","","",198,{"inputs":[{"name":"journal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",198,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new, empty, object.",198,{"inputs":[],"output":{"name":"journal"}}],[11,"new_node","","Given the RLP that encodes a node, append a reference to that node `out` and leave `journal`\nsuch that the reference is valid, once applied.",198,{"inputs":[{"name":"journal"},{"name":"bytes"},{"name":"rlpstream"}],"output":null}],[11,"delete_node_sha3","","Given the RLP that encodes a now-unused node, leave `journal` in such a state that it is noted.",198,{"inputs":[{"name":"journal"},{"name":"h256"}],"output":null}],[11,"delete_node","","Register an RLP-encoded node for deletion (given a slice), if it needs to be deleted.",198,null],[11,"apply","","Apply this journal to the HashDB `db` and return the number of insertions and removals done.",198,{"inputs":[{"name":"journal"},{"name":"hashdb"}],"output":{"name":"score"}}],[0,"node","ethcore_util::trie","Export the node module.",null,null],[4,"Node","ethcore_util::trie::node","Type of node in the trie and essential information thereof.",null,null],[13,"Empty","","Null trie node; could be an empty root or an empty branch entry.",199,null],[13,"Leaf","","Leaf node; has key slice and value. Value may not be empty.",199,null],[13,"Extension","","Extension node; has key slice and node data. Data may not be null.",199,null],[13,"Branch","","Branch node; has array of 16 child nodes (each possibly null) and an optional immediate node data.",199,null],[11,"fmt","","",199,{"inputs":[{"name":"node"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"decoded","","Decode the `node_rlp` and return the Node.",199,null],[11,"encoded","","Encode the node into RLP.",199,{"inputs":[{"name":"node"}],"output":{"name":"bytes"}}],[11,"encoded_and_added","","Encode the node, adding it to `journal` if necessary and return the RLP valid for\ninsertion into a parent node.",199,{"inputs":[{"name":"node"},{"name":"journal"}],"output":{"name":"bytes"}}],[0,"triedb","ethcore_util::trie","Export the triedb module.",null,null],[3,"TrieDB","ethcore_util::trie::triedb","A `Trie` implementation using a generic `HashDB` backing database.",null,null],[12,"hash_count","","The number of hashes performed so far in operations on this trie.",200,null],[3,"TrieDBIterator","","Iterator for going through all values in the trie.",null,null],[11,"new","","Create a new trie with the backing database `db` and `root`\nReturns an error if `root` does not exist",200,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"result"}}],[11,"db","","Get the backing database.",200,{"inputs":[{"name":"triedb"}],"output":{"name":"hashdb"}}],[11,"keys","","Determine all the keys in the backing database that belong to the trie.",200,{"inputs":[{"name":"triedb"}],"output":{"name":"vec"}}],[11,"to_map","","Convert a vector of hashes to a hashmap of hash to occurances.",200,{"inputs":[{"name":"vec"}],"output":{"name":"hashmap"}}],[11,"db_items_remaining","","Determine occurances of items in the backing database which are not related to this\ntrie.",200,{"inputs":[{"name":"triedb"}],"output":{"name":"hashmap"}}],[11,"clone","","",201,{"inputs":[{"name":"triedbiterator"}],"output":{"name":"triedbiterator"}}],[11,"next","","",201,{"inputs":[{"name":"triedbiterator"}],"output":{"name":"option"}}],[11,"iter","","Get all keys/values stored in the trie.",200,{"inputs":[{"name":"triedb"}],"output":{"name":"triedbiterator"}}],[11,"root","","",200,{"inputs":[{"name":"triedb"}],"output":{"name":"h256"}}],[11,"contains","","",200,null],[11,"get","","",200,null],[11,"fmt","","",200,{"inputs":[{"name":"triedb"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"triedbmut","ethcore_util::trie","Export the triedbmut module.",null,null],[3,"TrieDBMut","ethcore_util::trie::triedbmut","A `Trie` implementation using a generic `HashDB` backing database.",null,null],[12,"hash_count","","The number of hashes performed so far in operations on this trie.",202,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.",202,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"from_existing","","Create a new trie with the backing database `db` and `root`.\nReturns an error if `root` does not exist.",202,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"result"}}],[11,"db","","Get the backing database.",202,{"inputs":[{"name":"triedbmut"}],"output":{"name":"hashdb"}}],[11,"db_mut","","Get the backing database.",202,{"inputs":[{"name":"triedbmut"}],"output":{"name":"hashdb"}}],[11,"keys","","Determine all the keys in the backing database that belong to the trie.",202,{"inputs":[{"name":"triedbmut"}],"output":{"name":"vec"}}],[11,"to_map","","Convert a vector of hashes to a hashmap of hash to occurances.",202,{"inputs":[{"name":"vec"}],"output":{"name":"hashmap"}}],[11,"db_items_remaining","","Determine occurances of items in the backing database which are not related to this\ntrie.",202,{"inputs":[{"name":"triedbmut"}],"output":{"name":"hashmap"}}],[11,"root","","",202,{"inputs":[{"name":"triedbmut"}],"output":{"name":"h256"}}],[11,"contains","","",202,null],[11,"get","","",202,null],[11,"insert","","",202,null],[11,"remove","","",202,null],[11,"fmt","","",202,{"inputs":[{"name":"triedbmut"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sectriedb","ethcore_util::trie","Export the sectriedb module.",null,null],[3,"SecTrieDB","ethcore_util::trie::sectriedb","A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.",null,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`",203,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"result"}}],[11,"raw","","Get a reference to the underlying raw `TrieDB` struct.",203,{"inputs":[{"name":"sectriedb"}],"output":{"name":"triedb"}}],[11,"raw_mut","","Get a mutable reference to the underlying raw `TrieDB` struct.",203,{"inputs":[{"name":"sectriedb"}],"output":{"name":"triedb"}}],[11,"root","","",203,{"inputs":[{"name":"sectriedb"}],"output":{"name":"h256"}}],[11,"contains","","",203,null],[11,"get","","",203,null],[0,"sectriedbmut","ethcore_util::trie","Export the sectriedbmut module.",null,null],[3,"SecTrieDBMut","ethcore_util::trie::sectriedbmut","A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.",null,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.",204,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"from_existing","","Create a new trie with the backing database `db` and `root`.",204,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"result"}}],[11,"db","","Get the backing database.",204,{"inputs":[{"name":"sectriedbmut"}],"output":{"name":"hashdb"}}],[11,"db_mut","","Get the backing database.",204,{"inputs":[{"name":"sectriedbmut"}],"output":{"name":"hashdb"}}],[11,"root","","",204,{"inputs":[{"name":"sectriedbmut"}],"output":{"name":"h256"}}],[11,"contains","","",204,null],[11,"get","","",204,null],[11,"insert","","",204,null],[11,"remove","","",204,null],[11,"fmt","ethcore_util::trie","",191,{"inputs":[{"name":"trieerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"trieerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"nibbleslice","ethcore_util","Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.",null,null],[3,"NibbleSlice","ethcore_util::nibbleslice","Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.",null,null],[3,"NibbleSliceIterator","","Iterator type for a nibble slice.",null,null],[11,"cmp","","",205,{"inputs":[{"name":"nibbleslice"},{"name":"nibbleslice"}],"output":{"name":"ordering"}}],[11,"clone","","",205,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"nibbleslice"}}],[11,"next","","",206,{"inputs":[{"name":"nibblesliceiterator"}],"output":{"name":"option"}}],[11,"new","","Create a new nibble slice with the given byte-slice.",205,null],[11,"new_offset","","Create a new nibble slice with the given byte-slice with a nibble offset.",205,null],[11,"new_composed","","Create a composed nibble slice; one followed by the other.",205,{"inputs":[{"name":"nibbleslice"},{"name":"nibbleslice"}],"output":{"name":"self"}}],[11,"iter","","Get an iterator for the series of nibbles.",205,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"nibblesliceiterator"}}],[11,"from_encoded","","Create a new nibble slice from the given HPE encoded data (e.g. output of `encoded()`).",205,null],[11,"is_empty","","Is this an empty slice?",205,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"bool"}}],[11,"len","","Get the length (in nibbles, naturally) of this slice.",205,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"usize"}}],[11,"at","","Get the nibble at position `i`.",205,{"inputs":[{"name":"nibbleslice"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"mid","","Return object which represents a view on to this slice (further) offset by `i` nibbles.",205,{"inputs":[{"name":"nibbleslice"},{"name":"usize"}],"output":{"name":"nibbleslice"}}],[11,"starts_with","","Do we start with the same nibbles as the whole of `them`?",205,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"bool"}}],[11,"common_prefix","","How many of the same nibbles at the beginning do we match with `them`?",205,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"usize"}}],[11,"encoded","","Encode while nibble slice in prefixed hex notation, noting whether it `is_leaf`.",205,{"inputs":[{"name":"nibbleslice"},{"name":"bool"}],"output":{"name":"bytes"}}],[11,"encoded_leftmost","","Encode only the leftmost `n` bytes of the nibble slice in prefixed hex notation,\nnoting whether it `is_leaf`.",205,{"inputs":[{"name":"nibbleslice"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bytes"}}],[11,"eq","","",205,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",205,{"inputs":[{"name":"nibbleslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","ethcore_util::hash","",122,{"inputs":[{"name":"h32"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",123,{"inputs":[{"name":"h64"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",124,{"inputs":[{"name":"h128"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",125,{"inputs":[{"name":"address"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",126,{"inputs":[{"name":"h256"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",127,{"inputs":[{"name":"h264"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",128,{"inputs":[{"name":"h512"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",129,{"inputs":[{"name":"h520"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",130,{"inputs":[{"name":"h1024"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",131,{"inputs":[{"name":"h2048"}],"output":{"name":"usize"}}],[0,"squeeze","ethcore_util","Helper module that should be used to randomly squeeze\ncaches to a given size in bytes",null,null],[8,"Squeeze","ethcore_util::squeeze","Should be used to squeeze collections to certain size in bytes",null,null],[10,"squeeze","","Try to reduce collection size to `size` bytes",207,{"inputs":[{"name":"squeeze"},{"name":"usize"}],"output":null}],[11,"squeeze","std::collections::hash::map","",208,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":null}],[0,"semantic_version","ethcore_util","Semantic version formatting and comparing.",null,null],[3,"SemanticVersion","ethcore_util::semantic_version","A version value with strict meaning. Use `as_u32` to convert to a simple integer.",null,null],[12,"major","","Major version - API/feature removals &amp; breaking changes.",209,null],[12,"minor","","Minor version - API/feature additions.",209,null],[12,"tiny","","Tiny version - bug fixes.",209,null],[11,"new","","Create a new object.",209,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"semanticversion"}}],[11,"as_u32","","Convert to a `u32` representation.",209,{"inputs":[{"name":"semanticversion"}],"output":{"name":"u32"}}],[0,"io","ethcore_util","General IO module.",null,null],[3,"IoContext","ethcore_util::io","IO access point. This is passed to all IO handlers and provides an interface to the IO subsystem.",null,null],[3,"IoService","","General IO Service. Starts an event loop and dispatches IO requests.\n&#39;Message&#39; is a notification message type",null,null],[3,"IoChannel","","Allows sending messages into the event loop. All the IO handlers will get the message\nin the `message` callback.",null,null],[3,"IoManager","","Root IO handler. Manages user handlers, messages and IO timers.",null,null],[4,"IoError","","IO Error",null,null],[13,"Mio","","Low level error from mio crate",210,null],[11,"new","","Create a new IO access point. Takes references to all the data that can be updated within the IO handler.",211,{"inputs":[{"name":"iochannel"},{"name":"handlerid"}],"output":{"name":"iocontext"}}],[11,"register_timer","","Register a new IO timer. &#39;IoHandler::timeout&#39; will be called with the token.",211,{"inputs":[{"name":"iocontext"},{"name":"timertoken"},{"name":"u64"}],"output":{"name":"result"}}],[11,"clear_timer","","Delete a timer.",211,{"inputs":[{"name":"iocontext"},{"name":"timertoken"}],"output":{"name":"result"}}],[11,"register_stream","","Register a new IO stream.",211,{"inputs":[{"name":"iocontext"},{"name":"streamtoken"}],"output":{"name":"result"}}],[11,"deregister_stream","","Deregister an IO stream.",211,{"inputs":[{"name":"iocontext"},{"name":"streamtoken"}],"output":{"name":"result"}}],[11,"update_registration","","Reregister an IO stream.",211,{"inputs":[{"name":"iocontext"},{"name":"streamtoken"}],"output":{"name":"result"}}],[11,"message","","Broadcast a message to other IO clients",211,{"inputs":[{"name":"iocontext"},{"name":"message"}],"output":null}],[11,"channel","","Get message channel",211,{"inputs":[{"name":"iocontext"}],"output":{"name":"iochannel"}}],[11,"unregister_handler","","Unregister current IO handler.",211,{"inputs":[{"name":"iocontext"}],"output":{"name":"result"}}],[11,"start","","Creates a new instance and registers it with the event loop.",212,{"inputs":[{"name":"arc"},{"name":"eventloop"}],"output":{"name":"result"}}],[11,"ready","","",212,{"inputs":[{"name":"iomanager"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"timeout","","",212,{"inputs":[{"name":"iomanager"},{"name":"eventloop"},{"name":"token"}],"output":null}],[11,"notify","","",212,{"inputs":[{"name":"iomanager"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"clone","","",213,{"inputs":[{"name":"iochannel"}],"output":{"name":"iochannel"}}],[11,"send","","Send a msessage through the channel",213,{"inputs":[{"name":"iochannel"},{"name":"message"}],"output":{"name":"result"}}],[11,"send_io","","Send low level io message",213,{"inputs":[{"name":"iochannel"},{"name":"iomessage"}],"output":{"name":"result"}}],[11,"disconnected","","Create a new channel to connected to event loop.",213,{"inputs":[],"output":{"name":"iochannel"}}],[11,"on_panic","","",214,{"inputs":[{"name":"ioservice"},{"name":"f"}],"output":null}],[11,"start","","Starts IO event loop",214,{"inputs":[],"output":{"name":"result"}}],[11,"register_handler","","Regiter an IO handler with the event loop.",214,{"inputs":[{"name":"ioservice"},{"name":"arc"}],"output":{"name":"result"}}],[11,"send_message","","Send a message over the network. Normaly `HostIo::send` should be used. This can be used from non-io threads.",214,{"inputs":[{"name":"ioservice"},{"name":"message"}],"output":{"name":"result"}}],[11,"channel","","Create a new message channel",214,{"inputs":[{"name":"ioservice"}],"output":{"name":"iochannel"}}],[11,"drop","","",214,{"inputs":[{"name":"ioservice"}],"output":null}],[6,"TimerToken","","Timer ID",null,null],[6,"StreamToken","","Timer ID",null,null],[17,"TOKENS_PER_HANDLER","","Maximum number of tokens a handler can use",null,null],[8,"IoHandler","","Generic IO handler.\nAll the handler function are called from within IO event loop.\n`Message` type is used as notification data",null,null],[11,"initialize","","Initialize the handler",215,{"inputs":[{"name":"iohandler"},{"name":"iocontext"}],"output":null}],[11,"timeout","","Timer function called after a timeout created with `HandlerIo::timeout`.",215,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"timertoken"}],"output":null}],[11,"message","","Called when a broadcasted message is received. The message can only be sent from a different IO handler.",215,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"message"}],"output":null}],[11,"stream_hup","","Called when an IO stream gets closed",215,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"streamtoken"}],"output":null}],[11,"stream_readable","","Called when an IO stream can be read from",215,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"streamtoken"}],"output":null}],[11,"stream_writable","","Called when an IO stream can be written to",215,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"streamtoken"}],"output":null}],[11,"register_stream","","Register a new stream with the event loop",215,{"inputs":[{"name":"iohandler"},{"name":"streamtoken"},{"name":"token"},{"name":"eventloop"}],"output":null}],[11,"update_stream","","Re-register a stream with the event loop",215,{"inputs":[{"name":"iohandler"},{"name":"streamtoken"},{"name":"token"},{"name":"eventloop"}],"output":null}],[11,"deregister_stream","","Deregister a stream. Called whenstream is removed from event loop",215,{"inputs":[{"name":"iohandler"},{"name":"streamtoken"},{"name":"eventloop"}],"output":null}],[11,"fmt","","",210,{"inputs":[{"name":"ioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"ioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",210,{"inputs":[{"name":"notifyerror"}],"output":{"name":"ioerror"}}],[0,"network","ethcore_util","Network and general IO module.",null,null],[3,"NetworkContext","ethcore_util::network","IO access point. This is passed to all IO handlers and provides an interface to the IO subsystem.",null,null],[3,"NetworkService","","IO Service with networking\n`Message` defines a notification data type.",null,null],[3,"NetworkConfiguration","","Network service configuration",null,null],[12,"config_path","","Directory path to store network configuration. None means nothing will be saved",216,null],[12,"listen_address","","IP address to listen for incoming connections. Listen to all connections by default",216,null],[12,"public_address","","IP address to advertise. Detected automatically if none.",216,null],[12,"udp_port","","Port for UDP connections, same as TCP by default",216,null],[12,"nat_enabled","","Enable NAT configuration",216,null],[12,"discovery_enabled","","Enable discovery",216,null],[12,"boot_nodes","","List of initial node addresses",216,null],[12,"use_secret","","Use provided node key instead of default",216,null],[12,"ideal_peers","","Number of connected peers to maintain",216,null],[12,"reserved_nodes","","List of reserved node addresses.",216,null],[12,"non_reserved_mode","","The non-reserved peer mode.",216,null],[3,"NetworkStats","","Network statistics structure",null,null],[4,"NetworkIoMessage","","Messages used to communitate with the event loop from other threads.",null,null],[13,"AddHandler","","Register a new protocol handler.",217,null],[12,"handler","ethcore_util::network::NetworkIoMessage","Handler shared instance.",217,null],[12,"protocol","","Protocol Id.",217,null],[12,"versions","","Supported protocol versions.",217,null],[13,"AddTimer","ethcore_util::network","Register a new protocol timer",217,null],[12,"protocol","ethcore_util::network::NetworkIoMessage","Protocol Id.",217,null],[12,"token","","Timer token.",217,null],[12,"delay","","Timer delay in milliseconds.",217,null],[13,"Disconnect","ethcore_util::network","Disconnect a peer.",217,null],[13,"DisablePeer","","Disconnect and temporary disable peer.",217,null],[13,"User","","User message",217,null],[4,"NetworkError","","Network error.",null,null],[13,"Auth","","Authentication error.",218,null],[13,"BadProtocol","","Unrecognised protocol.",218,null],[13,"Expired","","Message expired.",218,null],[13,"PeerNotFound","","Peer not found.",218,null],[13,"Disconnect","","Peer is diconnected.",218,null],[13,"Io","","Socket IO error.",218,null],[4,"NonReservedPeerMode","","Non-reserved peer modes.",null,null],[13,"Accept","","Accept them. This is the default.",219,null],[13,"Deny","","Deny them.",219,null],[5,"is_valid_node_url","","Check if node url is valid",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","","",216,{"inputs":[{"name":"networkconfiguration"}],"output":{"name":"networkconfiguration"}}],[11,"fmt","","",216,{"inputs":[{"name":"networkconfiguration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",216,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new instance of default settings.",216,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_port","","Create new default configuration with sepcified listen port.",216,{"inputs":[{"name":"u16"}],"output":{"name":"networkconfiguration"}}],[11,"new_local","","Create new default configuration for localhost-only connection with random port (usefull for testing)",216,{"inputs":[],"output":{"name":"networkconfiguration"}}],[11,"clone","","",217,{"inputs":[{"name":"networkiomessage"}],"output":{"name":"networkiomessage"}}],[11,"send","","Send a packet over the network to another peer.",220,{"inputs":[{"name":"networkcontext"},{"name":"peerid"},{"name":"packetid"},{"name":"vec"}],"output":{"name":"result"}}],[11,"respond","","Respond to a current network message. Panics if no there is no packet in the context. If the session is expired returns nothing.",220,{"inputs":[{"name":"networkcontext"},{"name":"packetid"},{"name":"vec"}],"output":{"name":"result"}}],[11,"message","","Send an IO message",220,{"inputs":[{"name":"networkcontext"},{"name":"message"}],"output":null}],[11,"io_channel","","Get an IoChannel.",220,{"inputs":[{"name":"networkcontext"}],"output":{"name":"iochannel"}}],[11,"disable_peer","","Disable current protocol capability for given peer. If no capabilities left peer gets disconnected.",220,{"inputs":[{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"disconnect_peer","","Disconnect peer. Reconnect can be attempted later.",220,{"inputs":[{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"is_expired","","Check if the session is still active.",220,{"inputs":[{"name":"networkcontext"}],"output":{"name":"bool"}}],[11,"register_timer","","Register a new IO timer. &#39;IoHandler::timeout&#39; will be called with the token.",220,{"inputs":[{"name":"networkcontext"},{"name":"timertoken"},{"name":"u64"}],"output":{"name":"result"}}],[11,"peer_info","","Returns peer identification string",220,{"inputs":[{"name":"networkcontext"},{"name":"peerid"}],"output":{"name":"string"}}],[11,"new","","Starts IO event loop",221,{"inputs":[{"name":"networkconfiguration"}],"output":{"name":"result"}}],[11,"register_protocol","","Regiter a new protocol handler with the event loop.",221,null],[11,"host_info","","Returns host identifier string as advertised to other peers",221,{"inputs":[{"name":"networkservice"}],"output":{"name":"string"}}],[11,"io","","Returns underlying io service.",221,{"inputs":[{"name":"networkservice"}],"output":{"name":"ioservice"}}],[11,"stats","","Returns network statistics.",221,{"inputs":[{"name":"networkservice"}],"output":{"name":"networkstats"}}],[11,"external_url","","Returns external url if available.",221,{"inputs":[{"name":"networkservice"}],"output":{"name":"option"}}],[11,"local_url","","Returns external url if available.",221,{"inputs":[{"name":"networkservice"}],"output":{"name":"option"}}],[11,"start","","Start network IO",221,{"inputs":[{"name":"networkservice"}],"output":{"name":"result"}}],[11,"stop","","Stop network IO",221,{"inputs":[{"name":"networkservice"}],"output":{"name":"result"}}],[11,"add_reserved_peer","","Try to add a reserved peer.",221,{"inputs":[{"name":"networkservice"},{"name":"str"}],"output":{"name":"result"}}],[11,"remove_reserved_peer","","Try to remove a reserved peer.",221,{"inputs":[{"name":"networkservice"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_non_reserved_mode","","Set the non-reserved peer mode.",221,{"inputs":[{"name":"networkservice"},{"name":"nonreservedpeermode"}],"output":null}],[11,"on_panic","","",221,{"inputs":[{"name":"networkservice"},{"name":"f"}],"output":null}],[11,"fmt","","",218,{"inputs":[{"name":"networkerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"networkerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",218,{"inputs":[{"name":"decodererror"}],"output":{"name":"networkerror"}}],[11,"from","","",218,{"inputs":[{"name":"ioerror"}],"output":{"name":"networkerror"}}],[11,"from","","",218,{"inputs":[{"name":"cryptoerror"}],"output":{"name":"networkerror"}}],[11,"fmt","","",222,{"inputs":[{"name":"networkstats"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",222,{"inputs":[],"output":{"name":"networkstats"}}],[11,"inc_recv","","Increase bytes received.",222,{"inputs":[{"name":"networkstats"},{"name":"usize"}],"output":null}],[11,"inc_send","","Increase bytes sent.",222,{"inputs":[{"name":"networkstats"},{"name":"usize"}],"output":null}],[11,"inc_sessions","","Increase number of sessions.",222,{"inputs":[{"name":"networkstats"}],"output":null}],[11,"send","","Get bytes sent.",222,{"inputs":[{"name":"networkstats"}],"output":{"name":"usize"}}],[11,"recv","","Get bytes received.",222,{"inputs":[{"name":"networkstats"}],"output":{"name":"usize"}}],[11,"sessions","","Get total number of sessions created.",222,{"inputs":[{"name":"networkstats"}],"output":{"name":"usize"}}],[11,"new","","Create a new empty instance.",222,{"inputs":[],"output":{"name":"networkstats"}}],[6,"PeerId","","Local (temporary) peer session ID.",null,null],[6,"PacketId","","Protocol handler level packet id",null,null],[8,"NetworkProtocolHandler","","Network IO protocol handler. This needs to be implemented for each new subprotocol.\nAll the handler function are called from within IO event loop.\n`Message` is the type for message data.",null,null],[11,"initialize","","Initialize the handler",223,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"}],"output":null}],[10,"read","","Called when new network packet received.",223,null],[10,"connected","","Called when new peer is connected. Only called when peer supports the same protocol.",223,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[10,"disconnected","","Called when a previously connected peer disconnects.",223,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"timeout","","Timer function called after a timeout created with `NetworkContext::timeout`.",223,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"timertoken"}],"output":null}],[11,"message","","Called when a broadcasted message is received. The message can only be sent from a different IO handler.",223,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"message"}],"output":null}],[11,"eq","","",219,{"inputs":[{"name":"nonreservedpeermode"},{"name":"nonreservedpeermode"}],"output":{"name":"bool"}}],[11,"fmt","","",219,{"inputs":[{"name":"nonreservedpeermode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",219,{"inputs":[{"name":"nonreservedpeermode"}],"output":{"name":"nonreservedpeermode"}}],[11,"parse","","Attempt to parse the peer mode from a string.",219,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"log","ethcore_util","Common log helper functions",null,null],[3,"RotatingLogger","ethcore_util::log","Logger implementation that keeps up to `LOG_SIZE` log elements.",null,null],[5,"init_log","","Intialize log with default settings",null,{"inputs":[],"output":null}],[11,"new","","Creates new `RotatingLogger` with given levels.\nIt does not enforce levels - it&#39;s just read only.",224,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"append","","Append new log entry",224,{"inputs":[{"name":"rotatinglogger"},{"name":"string"}],"output":null}],[11,"levels","","Return levels",224,{"inputs":[{"name":"rotatinglogger"}],"output":{"name":"str"}}],[11,"logs","","Return logs",224,{"inputs":[{"name":"rotatinglogger"}],"output":{"name":"rwlockreadguard"}}],[0,"panics","ethcore_util","Panic utilities",null,null],[3,"PanicHandler","ethcore_util::panics","Structure that allows to catch panics and notify listeners",null,null],[8,"OnPanicListener","","Thread-safe closure for handling possible panics",null,null],[10,"call","","Invoke listener",225,{"inputs":[{"name":"onpaniclistener"},{"name":"str"}],"output":null}],[8,"ForwardPanic","","Forwards panics from child",null,null],[10,"forward_from","","Attach `on_panic` listener to `child` and rethrow all panics",226,{"inputs":[{"name":"forwardpanic"},{"name":"s"}],"output":null}],[8,"MayPanic","","Trait indicating that the structure catches some of the panics (most probably from spawned threads)\nand it&#39;s possbile to be notified when one of the threads panics.",null,null],[10,"on_panic","","`closure` will be invoked whenever panic in thread is caught",227,{"inputs":[{"name":"maypanic"},{"name":"f"}],"output":null}],[11,"default","","",228,{"inputs":[],"output":{"name":"self"}}],[11,"new_in_arc","","Creates new `PanicHandler` wrapped in `Arc`",228,{"inputs":[],"output":{"name":"arc"}}],[11,"new","","Creates new `PanicHandler`",228,{"inputs":[],"output":{"name":"self"}}],[11,"catch_panic","","Invoke closure and catch any possible panics.\nIn case of panic notifies all listeners about it.",228,{"inputs":[{"name":"panichandler"},{"name":"g"}],"output":{"name":"result"}}],[11,"notify_all","","Notifies all listeners in case there is a panic.\nYou should use `catch_panic` instead of calling this method explicitly.",228,{"inputs":[{"name":"panichandler"},{"name":"string"}],"output":null}],[11,"on_panic","","",228,{"inputs":[{"name":"panichandler"},{"name":"f"}],"output":null}],[11,"forward_from","alloc::arc","",229,{"inputs":[{"name":"arc"},{"name":"s"}],"output":null}],[0,"table","ethcore_util","A collection associating pair of keys (row and column) with a single value.",null,null],[3,"Table","ethcore_util::table","Structure to hold double-indexed values",null,null],[11,"default","","",230,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new Table",230,{"inputs":[],"output":{"name":"self"}}],[11,"clear","","Removes all elements from this Table",230,{"inputs":[{"name":"table"}],"output":null}],[11,"len","","Returns length of the Table (number of (row, col, val) tuples)",230,{"inputs":[{"name":"table"}],"output":{"name":"usize"}}],[11,"is_empty","","Check if there is any element in this Table",230,{"inputs":[{"name":"table"}],"output":{"name":"bool"}}],[11,"row_mut","","Get mutable reference for single Table row.",230,{"inputs":[{"name":"table"},{"name":"row"}],"output":{"name":"option"}}],[11,"has_row","","Checks if row is defined for that table (note that even if defined it might be empty)",230,{"inputs":[{"name":"table"},{"name":"row"}],"output":{"name":"bool"}}],[11,"row","","Get immutable reference for single row in this Table",230,{"inputs":[{"name":"table"},{"name":"row"}],"output":{"name":"option"}}],[11,"get","","Get element in cell described by `(row, col)`",230,{"inputs":[{"name":"table"},{"name":"row"},{"name":"col"}],"output":{"name":"option"}}],[11,"remove","","Remove value from specific cell",230,{"inputs":[{"name":"table"},{"name":"row"},{"name":"col"}],"output":{"name":"option"}}],[11,"clear_if_empty","","Remove given row from Table if there are no values defined in it",230,{"inputs":[{"name":"table"},{"name":"row"}],"output":null}],[11,"insert","","Inserts new value to specified cell",230,{"inputs":[{"name":"table"},{"name":"row"},{"name":"col"},{"name":"val"}],"output":{"name":"option"}}],[0,"network_settings","ethcore_util","Structure to hold network settings configured from CLI",null,null],[3,"NetworkSettings","ethcore_util::network_settings","Networking &amp; RPC settings",null,null],[12,"name","","Node name",231,null],[12,"chain","","Name of the chain we are connected to",231,null],[12,"max_peers","","Ideal number of peers",231,null],[12,"network_port","","Networking port",231,null],[12,"rpc_enabled","","Is JSON-RPC server enabled?",231,null],[12,"rpc_interface","","Interface that JSON-RPC listens on",231,null],[12,"rpc_port","","Port for JSON-RPC server",231,null],[11,"eq","","",231,{"inputs":[{"name":"networksettings"},{"name":"networksettings"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"networksettings"},{"name":"networksettings"}],"output":{"name":"bool"}}],[11,"fmt","","",231,{"inputs":[{"name":"networksettings"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"path","ethcore_util","Path utilities",null,null],[5,"restrict_permissions_owner","ethcore_util::path","Restricts the permissions of given path only to the owner.",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[0,"ethereum","","Default ethereum paths",null,null],[5,"default","ethcore_util::path::ethereum","Default path for ethereum installation on posix system which is not Mac OS",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"with_default","","Get the specific folder inside default ethereum installation",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"with_testnet","","Get the specific folder inside default ethereum installation configured for testnet",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"new","ethcore_util","Create an instance with given name.",232,{"inputs":[{"name":"str"}],"output":{"name":"perftimer"}}],[11,"stop","","Stop the timer and print elapsed time on trace level with `perf` target.",232,{"inputs":[{"name":"perftimer"}],"output":null}],[11,"drop","","",232,{"inputs":[{"name":"perftimer"}],"output":null}],[14,"xjson!","","",null,null],[14,"vec_into!","","",null,null],[14,"hash_map!","","",null,null],[14,"hash_map_into!","","",null,null],[14,"map!","","",null,null],[14,"map_into!","","",null,null],[14,"flush!","","",null,null],[14,"flushln!","","",null,null],[14,"sized_binary_map!","","",null,null],[11,"commit","ethcore_util::kvdb","",186,{"inputs":[{"name":"database"},{"name":"btreemap"}],"output":{"name":"result"}}]],"paths":[[8,"Seek"],[8,"Read"],[8,"Write"],[8,"BufRead"],[4,"SeekFrom"],[4,"CharsError"],[4,"ErrorKind"],[3,"Bytes"],[3,"Lines"],[3,"RMatchIndices"],[3,"Chars"],[3,"Utf8Error"],[3,"RSplitTerminator"],[3,"LinesAny"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[3,"CharRange"],[3,"RMatches"],[3,"SplitN"],[3,"Matches"],[3,"SplitWhitespace"],[3,"ParseBoolError"],[3,"Split"],[3,"RSplitN"],[3,"MatchIndices"],[3,"SplitTerminator"],[3,"RSplit"],[3,"CharIndices"],[8,"Octal"],[8,"Pointer"],[8,"Binary"],[8,"UpperHex"],[8,"LowerExp"],[3,"DebugMap"],[8,"UpperExp"],[3,"Arguments"],[3,"DebugList"],[8,"LowerHex"],[8,"Display"],[3,"DebugSet"],[8,"Write"],[3,"DebugTuple"],[3,"DebugStruct"],[8,"Debug"],[3,"Formatter"],[3,"Error"],[8,"PartialEq"],[4,"Ordering"],[8,"Ord"],[8,"PartialOrd"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"SliceConcatExt"],[3,"Split"],[3,"IterMut"],[3,"RSplitN"],[3,"SplitNMut"],[3,"Windows"],[3,"Iter"],[3,"Chunks"],[3,"ChunksMut"],[3,"SplitN"],[3,"RSplitNMut"],[3,"SplitMut"],[4,"Result"],[4,"Option"],[8,"Hash"],[8,"Hasher"],[8,"StdError"],[4,"Json"],[8,"FromBase64"],[8,"FromHex"],[4,"FromHexError"],[8,"HeapSizeOf"],[8,"Itertools"],[8,"FromJson"],[3,"U256"],[3,"Mismatch"],[3,"OutOfBounds"],[4,"BaseDataError"],[4,"UtilError"],[3,"H32"],[3,"H64"],[3,"H128"],[3,"Address"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"H1024"],[3,"H2048"],[8,"FixedHash"],[4,"BytesRef"],[4,"FromBytesError"],[8,"VecLike"],[8,"ToPretty"],[8,"BytesConvertable"],[8,"Populatable"],[8,"FromRawBytes"],[8,"FromRawBytesVariable"],[8,"ToBytesWithMap"],[3,"Vec"],[3,"ElasticArray16"],[3,"ElasticArray32"],[3,"ElasticArray1024"],[3,"PrettySlice"],[6,"Bytes"],[3,"String"],[3,"PayloadInfo"],[4,"DecoderError"],[4,"Prototype"],[8,"Decoder"],[8,"Decodable"],[8,"RlpDecodable"],[8,"View"],[8,"Encoder"],[8,"ByteEncodable"],[8,"Encodable"],[8,"RlpEncodable"],[8,"Stream"],[3,"Rlp"],[3,"RlpIterator"],[3,"UntrustedRlp"],[3,"UntrustedRlpIterator"],[3,"RlpStream"],[4,"Filth"],[3,"UsingQueue"],[3,"BTreeMap"],[8,"SharedPrefix"],[8,"Hashable"],[8,"HashDB"],[8,"AsHashDB"],[3,"MemoryDB"],[3,"Config"],[4,"Error"],[3,"MigrationIterator"],[3,"Manager"],[8,"Migration"],[8,"Destination"],[3,"OverlayDB"],[4,"Algorithm"],[8,"JournalDB"],[3,"DatabaseConfig"],[3,"DBTransaction"],[3,"DatabaseIterator"],[3,"Database"],[4,"CryptoError"],[3,"Secp256k1"],[6,"Signature"],[3,"KeyPair"],[4,"TrieError"],[8,"Trie"],[8,"TrieMut"],[3,"StandardMap"],[4,"Alphabet"],[4,"ValueMode"],[3,"Score"],[3,"Journal"],[4,"Node"],[3,"TrieDB"],[3,"TrieDBIterator"],[3,"TrieDBMut"],[3,"SecTrieDB"],[3,"SecTrieDBMut"],[3,"NibbleSlice"],[3,"NibbleSliceIterator"],[8,"Squeeze"],[3,"HashMap"],[3,"SemanticVersion"],[4,"IoError"],[3,"IoContext"],[3,"IoManager"],[3,"IoChannel"],[3,"IoService"],[8,"IoHandler"],[3,"NetworkConfiguration"],[4,"NetworkIoMessage"],[4,"NetworkError"],[4,"NonReservedPeerMode"],[3,"NetworkContext"],[3,"NetworkService"],[3,"NetworkStats"],[8,"NetworkProtocolHandler"],[3,"RotatingLogger"],[8,"OnPanicListener"],[8,"ForwardPanic"],[8,"MayPanic"],[3,"PanicHandler"],[3,"Arc"],[3,"Table"],[3,"NetworkSettings"],[3,"PerfTimer"]]};
searchIndex["ethsync"] = {"doc":"Blockchain sync module\nImplements ethereum protocol version 63 as specified here:\nhttps://github.com/ethereum/wiki/wiki/Ethereum-Wire-Protocol","items":[[3,"SyncConfig","ethsync","Sync configuration",null,null],[12,"max_download_ahead_blocks","","Max blocks to download ahead",0,null],[12,"network_id","","Network ID",0,null],[3,"EthSync","","Ethereum network protocol handler",null,null],[3,"SyncStatus","","Syncing status and statistics",null,null],[12,"state","","State",1,null],[12,"protocol_version","","Syncing protocol version. That&#39;s the maximum protocol version we connect to.",1,null],[12,"network_id","","The underlying p2p network version.",1,null],[12,"start_block_number","","`BlockChain` height for the moment the sync started.",1,null],[12,"last_imported_block_number","","Last fully downloaded and imported block number (if any).",1,null],[12,"highest_block_number","","Highest block number in the download queue (if any).",1,null],[12,"blocks_total","","Total number of blocks for the sync process.",1,null],[12,"blocks_received","","Number of blocks downloaded so far.",1,null],[12,"num_peers","","Total number of connected peers",1,null],[12,"num_active_peers","","Total number of active peers",1,null],[12,"mem_used","","Heap memory used in bytes",1,null],[4,"SyncState","","Sync state",null,null],[13,"ChainHead","","Downloading subchain heads",2,null],[13,"Idle","","Initial chain sync complete. Waiting for new packets",2,null],[13,"Waiting","","Block downloading paused. Waiting for block queue to process blocks and free some space",2,null],[13,"Blocks","","Downloading blocks",2,null],[13,"NewBlocks","","Downloading blocks learned from `NewHashes` packet",2,null],[11,"fmt","","",2,{"inputs":[{"name":"syncstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"syncstate"},{"name":"syncstate"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"syncstate"}],"output":{"name":"syncstate"}}],[11,"clone","","",1,{"inputs":[{"name":"syncstatus"}],"output":{"name":"syncstatus"}}],[8,"SyncProvider","","Current sync status",null,null],[10,"status","","Get sync status",3,{"inputs":[{"name":"syncprovider"}],"output":{"name":"syncstatus"}}],[10,"start_network","","Start the network",3,{"inputs":[{"name":"syncprovider"}],"output":null}],[10,"stop_network","","Stop the network",3,{"inputs":[{"name":"syncprovider"}],"output":null}],[11,"default","","",0,{"inputs":[],"output":{"name":"syncconfig"}}],[11,"new","","Creates and register protocol with the network service",4,{"inputs":[{"name":"syncconfig"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"register","","Register protocol with the network service",4,{"inputs":[{"name":"networkservice"},{"name":"arc"}],"output":{"name":"result"}}],[11,"stop","","Stop sync",4,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"}],"output":null}],[11,"restart","","Restart sync",4,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"}],"output":null}],[11,"status","","Get sync status",4,{"inputs":[{"name":"ethsync"}],"output":{"name":"syncstatus"}}],[11,"start_network","","",4,{"inputs":[{"name":"ethsync"}],"output":null}],[11,"stop_network","","",4,{"inputs":[{"name":"ethsync"}],"output":null}],[11,"initialize","","",4,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"}],"output":null}],[11,"read","","",4,null],[11,"connected","","",4,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"disconnected","","",4,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"timeout","","",4,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"timertoken"}],"output":null}],[11,"message","","",4,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"syncmessage"}],"output":null}]],"paths":[[3,"SyncConfig"],[3,"SyncStatus"],[4,"SyncState"],[8,"SyncProvider"],[3,"EthSync"]]};
searchIndex["ethcore"] = {"doc":"Ethcore library","items":[[5,"get_info","ethcore","Return details about specific instruction",null,{"inputs":[{"name":"instruction"}],"output":{"name":"instructioninfo"}}],[5,"contract_address","","Returns new address created from address and given nonce.",null,{"inputs":[{"name":"address"},{"name":"u256"}],"output":{"name":"address"}}],[0,"account_provider","","Account management.",null,null],[3,"Secret","ethcore::account_provider","Primitive",null,null],[3,"Message","","Primitive",null,null],[3,"Address","","Primitive",null,null],[3,"AccountProvider","","Account management.\nResponsible for unlocking accounts.",null,null],[4,"Error","","`AccountProvider` errors.",null,null],[13,"NotUnlocked","","Returned when account is not unlocked.",0,null],[13,"SStore","","Returned when signing fails.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"sserror"}],"output":{"name":"self"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"sssecret"}],"output":{"name":"self"}}],[11,"into","","",1,{"inputs":[{"name":"secret"}],"output":{"name":"h256"}}],[11,"into","","",1,{"inputs":[{"name":"secret"}],"output":{"name":"sssecret"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"ssmessage"}],"output":{"name":"self"}}],[11,"into","","",2,{"inputs":[{"name":"message"}],"output":{"name":"h256"}}],[11,"into","","",2,{"inputs":[{"name":"message"}],"output":{"name":"ssmessage"}}],[11,"from","","",3,null],[11,"from","","",3,{"inputs":[{"name":"h160"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"ssaddress"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"address"}],"output":{"name":"h160"}}],[11,"into","","",3,{"inputs":[{"name":"address"}],"output":{"name":"ssaddress"}}],[11,"new","","Creates new account provider.",4,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"transient_provider","","Creates not disk backed provider.",4,{"inputs":[],"output":{"name":"self"}}],[11,"new_account","","Creates new random account.",4,{"inputs":[{"name":"accountprovider"},{"name":"str"}],"output":{"name":"result"}}],[11,"insert_account","","Inserts new account into underlying store.\nDoes not unlock account!",4,{"inputs":[{"name":"accountprovider"},{"name":"s"},{"name":"str"}],"output":{"name":"result"}}],[11,"accounts","","Returns addresses of all accounts.",4,{"inputs":[{"name":"accountprovider"}],"output":{"name":"vec"}}],[11,"unlock_account_permanently","","Unlocks account permanently.",4,{"inputs":[{"name":"accountprovider"},{"name":"a"},{"name":"string"}],"output":{"name":"result"}}],[11,"unlock_account_temporarily","","Unlocks account temporarily (for one signing).",4,{"inputs":[{"name":"accountprovider"},{"name":"a"},{"name":"string"}],"output":{"name":"result"}}],[11,"is_unlocked","","Checks if given account is unlocked",4,{"inputs":[{"name":"accountprovider"},{"name":"a"}],"output":{"name":"bool"}}],[11,"sign","","Signs the message. Account must be unlocked.",4,{"inputs":[{"name":"accountprovider"},{"name":"a"},{"name":"m"}],"output":{"name":"result"}}],[11,"sign_with_password","","Unlocks an account, signs the message, and locks it again.",4,{"inputs":[{"name":"accountprovider"},{"name":"a"},{"name":"string"},{"name":"m"}],"output":{"name":"result"}}],[0,"basic_authority","ethcore","A blockchain engine that supports a basic, non-BFT proof-of-authority.",null,null],[3,"BasicAuthorityParams","ethcore::basic_authority","`BasicAuthority` params.",null,null],[12,"gas_limit_bound_divisor","","Gas limit divisor.",5,null],[12,"duration_limit","","Block duration.",5,null],[12,"authorities","","Valid signatories.",5,null],[3,"BasicAuthority","","Engine using `BasicAuthority` proof-of-work consensus algorithm, suitable for Ethereum\nmainnet chains in the Olympic, Frontier and Homestead eras.",null,null],[5,"new_test_authority","","Create a new test chain spec with `BasicAuthority` consensus engine.",null,{"inputs":[],"output":{"name":"spec"}}],[11,"eq","","",5,{"inputs":[{"name":"basicauthorityparams"},{"name":"basicauthorityparams"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"basicauthorityparams"},{"name":"basicauthorityparams"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"basicauthorityparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"basicauthorityparams"}],"output":{"name":"self"}}],[11,"new","","Create a new instance of BasicAuthority engine",6,{"inputs":[{"name":"commonparams"},{"name":"basicauthorityparams"},{"name":"btreemap"}],"output":{"name":"self"}}],[11,"name","","",6,{"inputs":[{"name":"basicauthority"}],"output":{"name":"str"}}],[11,"version","","",6,{"inputs":[{"name":"basicauthority"}],"output":{"name":"semanticversion"}}],[11,"seal_fields","","",6,{"inputs":[{"name":"basicauthority"}],"output":{"name":"usize"}}],[11,"params","","",6,{"inputs":[{"name":"basicauthority"}],"output":{"name":"commonparams"}}],[11,"builtins","","",6,{"inputs":[{"name":"basicauthority"}],"output":{"name":"btreemap"}}],[11,"extra_info","","Additional engine-specific information for the user/developer concerning `header`.",6,{"inputs":[{"name":"basicauthority"},{"name":"header"}],"output":{"name":"hashmap"}}],[11,"schedule","","",6,{"inputs":[{"name":"basicauthority"},{"name":"envinfo"}],"output":{"name":"schedule"}}],[11,"populate_from_parent","","",6,{"inputs":[{"name":"basicauthority"},{"name":"header"},{"name":"header"},{"name":"u256"},{"name":"u256"}],"output":null}],[11,"on_close_block","","Apply the block reward on finalisation of the block.\nThis assumes that all uncles are valid uncles (i.e. of at least one generation before the current).",6,{"inputs":[{"name":"basicauthority"},{"name":"executedblock"}],"output":null}],[11,"generate_seal","","Attempt to seal the block internally.",6,{"inputs":[{"name":"basicauthority"},{"name":"executedblock"},{"name":"option"}],"output":{"name":"option"}}],[11,"verify_block_basic","","",6,{"inputs":[{"name":"basicauthority"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_unordered","","",6,{"inputs":[{"name":"basicauthority"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_family","","",6,{"inputs":[{"name":"basicauthority"},{"name":"header"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_transaction_basic","","",6,{"inputs":[{"name":"basicauthority"},{"name":"signedtransaction"},{"name":"header"}],"output":{"name":"result"}}],[11,"verify_transaction","","",6,{"inputs":[{"name":"basicauthority"},{"name":"signedtransaction"},{"name":"header"}],"output":{"name":"result"}}],[0,"block","ethcore","Blockchain block.",null,null],[3,"Block","ethcore::block","A block, encoded as it is on the block chain.",null,null],[12,"header","","The header of this block.",7,null],[12,"transactions","","The transactions in this block.",7,null],[12,"uncles","","The uncles of this block.",7,null],[3,"ExecutedBlock","","Internal type for a block&#39;s common elements.",null,null],[3,"BlockRefMut","","A set of references to `ExecutedBlock` fields that are publicly accessible.",null,null],[12,"header","","Block header.",8,null],[12,"transactions","","Block transactions.",8,null],[12,"uncles","","Block uncles.",8,null],[12,"receipts","","Transaction receipts.",8,null],[12,"state","","State.",8,null],[12,"traces","","Traces.",8,null],[3,"BlockRef","","A set of immutable references to `ExecutedBlock` fields that are publicly accessible.",null,null],[12,"header","","Block header.",9,null],[12,"transactions","","Block transactions.",9,null],[12,"uncles","","Block uncles.",9,null],[12,"receipts","","Transaction receipts.",9,null],[12,"state","","State.",9,null],[12,"traces","","Traces.",9,null],[3,"OpenBlock","","Block that is ready for transactions to be added.",null,null],[3,"ClosedBlock","","Just like `OpenBlock`, except that we&#39;ve applied `Engine::on_close_block`, finished up the non-seal header fields,\nand collected the uncles.",null,null],[3,"LockedBlock","","Just like `ClosedBlock` except that we can&#39;t reopen it and it&#39;s faster.",null,null],[3,"SealedBlock","","A block that has a valid seal.",null,null],[5,"enact","","Enact the block given by block header, transactions and uncles",null,null],[5,"enact_bytes","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header",null,null],[5,"enact_verified","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header",null,{"inputs":[{"name":"preverifiedblock"},{"name":"engine"},{"name":"bool"},{"name":"box"},{"name":"header"},{"name":"lasthashes"},{"name":"option"},{"name":"evmfactory"}],"output":{"name":"result"}}],[5,"enact_and_seal","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header. Seal the block aferwards",null,null],[8,"IsBlock","","Trait for a object that is a `ExecutedBlock`.",null,null],[10,"block","","Get the block associated with this object.",10,{"inputs":[{"name":"isblock"}],"output":{"name":"executedblock"}}],[11,"header","","Get the header associated with this object&#39;s block.",10,{"inputs":[{"name":"isblock"}],"output":{"name":"header"}}],[11,"state","","Get the final state associated with this object&#39;s block.",10,{"inputs":[{"name":"isblock"}],"output":{"name":"state"}}],[11,"transactions","","Get all information on transactions in this block.",10,{"inputs":[{"name":"isblock"}],"output":{"name":"vec"}}],[11,"receipts","","Get all information on receipts in this block.",10,{"inputs":[{"name":"isblock"}],"output":{"name":"vec"}}],[11,"traces","","Get all information concerning transaction tracing in this block.",10,{"inputs":[{"name":"isblock"}],"output":{"name":"option"}}],[11,"uncles","","Get all uncles in this block.",10,{"inputs":[{"name":"isblock"}],"output":{"name":"vec"}}],[11,"clone","","",7,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",7,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"block"}}],[11,"is_good","","Returns true if the given bytes form a valid encoding of a block in RLP.",7,null],[11,"decode","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"executedblock"}],"output":{"name":"executedblock"}}],[11,"fields_mut","","Get a structure containing individual references to all public fields.",11,{"inputs":[{"name":"executedblock"}],"output":{"name":"blockrefmut"}}],[11,"fields","","Get a structure containing individual references to all public fields.",11,{"inputs":[{"name":"executedblock"}],"output":{"name":"blockref"}}],[11,"block","","",11,{"inputs":[{"name":"executedblock"}],"output":{"name":"executedblock"}}],[11,"clone","","",12,{"inputs":[{"name":"closedblock"}],"output":{"name":"closedblock"}}],[11,"clone","","",13,{"inputs":[{"name":"lockedblock"}],"output":{"name":"lockedblock"}}],[11,"new","","Create a new `OpenBlock` ready for transaction pushing.",14,null],[11,"set_author","","Alter the author for the block.",14,{"inputs":[{"name":"openblock"},{"name":"address"}],"output":null}],[11,"set_timestamp","","Alter the timestamp of the block.",14,{"inputs":[{"name":"openblock"},{"name":"u64"}],"output":null}],[11,"set_difficulty","","Alter the difficulty for the block.",14,{"inputs":[{"name":"openblock"},{"name":"u256"}],"output":null}],[11,"set_gas_limit","","Alter the gas limit for the block.",14,{"inputs":[{"name":"openblock"},{"name":"u256"}],"output":null}],[11,"set_gas_used","","Alter the gas limit for the block.",14,{"inputs":[{"name":"openblock"},{"name":"u256"}],"output":null}],[11,"set_extra_data","","Alter the extra_data for the block.",14,{"inputs":[{"name":"openblock"},{"name":"bytes"}],"output":{"name":"result"}}],[11,"push_uncle","","Add an uncle to the block, if possible.",14,{"inputs":[{"name":"openblock"},{"name":"header"}],"output":{"name":"result"}}],[11,"env_info","","Get the environment info concerning this block.",14,{"inputs":[{"name":"openblock"}],"output":{"name":"envinfo"}}],[11,"push_transaction","","Push a transaction into the block.",14,{"inputs":[{"name":"openblock"},{"name":"signedtransaction"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","Turn this into a `ClosedBlock`. A `BlockChain` must be provided in order to figure out the uncles.",14,{"inputs":[{"name":"openblock"}],"output":{"name":"closedblock"}}],[11,"close_and_lock","","Turn this into a `LockedBlock`. A BlockChain must be provided in order to figure out the uncles.",14,{"inputs":[{"name":"openblock"}],"output":{"name":"lockedblock"}}],[11,"block","","",14,{"inputs":[{"name":"openblock"}],"output":{"name":"executedblock"}}],[11,"block","","",12,{"inputs":[{"name":"closedblock"}],"output":{"name":"executedblock"}}],[11,"block","","",13,{"inputs":[{"name":"lockedblock"}],"output":{"name":"executedblock"}}],[11,"hash","","Get the hash of the header without seal arguments.",12,{"inputs":[{"name":"closedblock"}],"output":{"name":"h256"}}],[11,"lock","","Turn this into a `LockedBlock`, unable to be reopened again.",12,{"inputs":[{"name":"closedblock"}],"output":{"name":"lockedblock"}}],[11,"reopen","","Given an engine reference, reopen the `ClosedBlock` into an `OpenBlock`.",12,{"inputs":[{"name":"closedblock"},{"name":"engine"},{"name":"evmfactory"}],"output":{"name":"openblock"}}],[11,"hash","","Get the hash of the header without seal arguments.",13,{"inputs":[{"name":"lockedblock"}],"output":{"name":"h256"}}],[11,"seal","","Provide a valid seal in order to turn this into a `SealedBlock`.",13,{"inputs":[{"name":"lockedblock"},{"name":"engine"},{"name":"vec"}],"output":{"name":"result"}}],[11,"try_seal","","Provide a valid seal in order to turn this into a `SealedBlock`.\nThis does check the validity of `seal` with the engine.\nReturns the `ClosedBlock` back again if the seal is no good.",13,{"inputs":[{"name":"lockedblock"},{"name":"engine"},{"name":"vec"}],"output":{"name":"result"}}],[11,"drain","","Drop this object and return the underlieing database.",13,{"inputs":[{"name":"lockedblock"}],"output":{"name":"box"}}],[11,"rlp_bytes","","Get the RLP-encoding of the block.",15,{"inputs":[{"name":"sealedblock"}],"output":{"name":"bytes"}}],[11,"drain","","Drop this object and return the underlieing database.",15,{"inputs":[{"name":"sealedblock"}],"output":{"name":"box"}}],[11,"block","","",15,{"inputs":[{"name":"sealedblock"}],"output":{"name":"executedblock"}}],[0,"block_queue","ethcore","A queue of blocks. Sits between network or other I/O and the `BlockChain`.\nSorts them ready for blockchain insertion.",null,null],[3,"BlockQueueConfig","ethcore::block_queue","Block queue configuration",null,null],[12,"max_queue_size","","Maximum number of blocks to keep in unverified queue.\nWhen the limit is reached, is_full returns true.",16,null],[12,"max_mem_use","","Maximum heap memory to use.\nWhen the limit is reached, is_full returns true.",16,null],[3,"BlockQueueInfo","","Block queue status",null,null],[12,"unverified_queue_size","","Number of queued blocks pending verification",17,null],[12,"verified_queue_size","","Number of verified queued blocks pending import",17,null],[12,"verifying_queue_size","","Number of blocks being verified",17,null],[12,"max_queue_size","","Configured maximum number of blocks in the queue",17,null],[12,"max_mem_use","","Configured maximum number of bytes to use",17,null],[12,"mem_used","","Heap memory used in bytes",17,null],[3,"BlockQueue","","A queue of blocks. Sits between network or other I/O and the `BlockChain`.\nSorts them ready for blockchain insertion.",null,null],[11,"fmt","","",16,{"inputs":[{"name":"blockqueueconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"blockqueueinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"total_queue_size","","The total size of the queues.",17,{"inputs":[{"name":"blockqueueinfo"}],"output":{"name":"usize"}}],[11,"incomplete_queue_size","","The size of the unverified and verifying queues.",17,{"inputs":[{"name":"blockqueueinfo"}],"output":{"name":"usize"}}],[11,"is_full","","Indicates that queue is full",17,{"inputs":[{"name":"blockqueueinfo"}],"output":{"name":"bool"}}],[11,"is_empty","","Indicates that queue is empty",17,{"inputs":[{"name":"blockqueueinfo"}],"output":{"name":"bool"}}],[11,"new","","Creates a new queue instance.",18,{"inputs":[{"name":"blockqueueconfig"},{"name":"arc"},{"name":"iochannel"}],"output":{"name":"blockqueue"}}],[11,"clear","","Clear the queue and stop verification activity.",18,{"inputs":[{"name":"blockqueue"}],"output":null}],[11,"flush","","Wait for unverified queue to be empty",18,{"inputs":[{"name":"blockqueue"}],"output":null}],[11,"block_status","","Check if the block is currently in the queue",18,{"inputs":[{"name":"blockqueue"},{"name":"h256"}],"output":{"name":"blockstatus"}}],[11,"import_block","","Add a block to the queue.",18,{"inputs":[{"name":"blockqueue"},{"name":"bytes"}],"output":{"name":"importresult"}}],[11,"mark_as_bad","","Mark given block and all its children as bad. Stops verification.",18,null],[11,"mark_as_good","","Mark given block as processed",18,null],[11,"drain","","Removes up to `max` verified blocks from the queue",18,{"inputs":[{"name":"blockqueue"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"queue_info","","Get queue status.",18,{"inputs":[{"name":"blockqueue"}],"output":{"name":"blockqueueinfo"}}],[11,"collect_garbage","","Optimise memory footprint of the heap fields.",18,{"inputs":[{"name":"blockqueue"}],"output":null}],[11,"on_panic","","",18,{"inputs":[{"name":"blockqueue"},{"name":"f"}],"output":null}],[11,"drop","","",18,{"inputs":[{"name":"blockqueue"}],"output":null}],[0,"client","ethcore","Blockchain database client.",null,null],[3,"BlockChainCacheSize","ethcore::client","Represents blockchain&#39;s in-memory cache size in bytes.",null,null],[12,"blocks","","Blocks cache size.",19,null],[12,"block_details","","BlockDetails cache size.",19,null],[12,"transaction_addresses","","Transaction addresses cache size.",19,null],[12,"blocks_blooms","","Blooms cache size.",19,null],[12,"block_receipts","","Block receipts size.",19,null],[3,"BlockChainInfo","","Information about the blockchain gathered together.",null,null],[12,"total_difficulty","","Blockchain difficulty.",20,null],[12,"pending_total_difficulty","","Block queue difficulty.",20,null],[12,"genesis_hash","","Genesis block hash.",20,null],[12,"best_block_hash","","Best blockchain block hash.",20,null],[12,"best_block_number","","Best blockchain block number.",20,null],[3,"ClientReport","","Report on the status of a client.",null,null],[12,"blocks_imported","","How many blocks have been imported so far.",21,null],[12,"transactions_applied","","How many transactions have been applied so far.",21,null],[12,"gas_processed","","How much gas has been processed so far.",21,null],[12,"state_db_mem","","Memory used by state DB",21,null],[3,"Client","","Blockchain database client backed by a persistent database. Owns and manages a blockchain and a block queue.\nCall `import_block()` to import a block asynchronously; `flush_queue()` flushes the queue.",null,null],[3,"ClientConfig","","Client configuration. Includes configs for all sub-systems.",null,null],[12,"queue","","Block queue configuration.",22,null],[12,"blockchain","","Blockchain configuration.",22,null],[12,"tracing","","Trace configuration.",22,null],[12,"vm_type","","VM type.",22,null],[12,"pruning","","The JournalDB (&quot;pruning&quot;) algorithm to use.",22,null],[12,"name","","The name of the client instance.",22,null],[12,"db_cache_size","","State db cache-size if not default",22,null],[3,"Config","","Blockchain configuration.",null,null],[12,"pref_cache_size","","Preferred cache size in bytes.",23,null],[12,"max_cache_size","","Maximum cache size in bytes.",23,null],[12,"db_cache_size","","Backing db cache_size",23,null],[3,"TraceId","","Uniquely identifies Trace.",null,null],[12,"transaction","","Transaction",24,null],[12,"address","","Trace address within transaction.",24,null],[3,"UncleID","","Uniquely identifies Uncle.",null,null],[12,"0","","",25,null],[12,"1","","",25,null],[3,"TestBlockChainClient","","Test client.",null,null],[12,"blocks","","Blocks.",26,null],[12,"numbers","","Mapping of numbers to hashes.",26,null],[12,"genesis_hash","","Genesis block hash.",26,null],[12,"last_hash","","Last block hash.",26,null],[12,"difficulty","","Difficulty.",26,null],[12,"balances","","Balances.",26,null],[12,"nonces","","Nonces.",26,null],[12,"storage","","Storage.",26,null],[12,"code","","Code.",26,null],[12,"execution_result","","Execution result.",26,null],[12,"receipts","","Transaction receipts.",26,null],[12,"queue_size","","Block queue size.",26,null],[12,"miner","","Miner",26,null],[3,"TraceFilter","","Easy to use trace filter.",null,null],[12,"range","","Range of filtering.",27,null],[12,"from_address","","From address.",27,null],[12,"to_address","","To address.",27,null],[3,"Executed","","Transaction execution receipt.",null,null],[12,"gas","","Gas paid up front for execution of transaction.",28,null],[12,"gas_used","","Gas used during execution of transaction.",28,null],[12,"refunded","","Gas refunded after the execution of transaction.\nTo get gas that was required up front, add `refunded` and `gas_used`.",28,null],[12,"cumulative_gas_used","","Cumulative gas used in current block so far.",28,null],[12,"logs","","Vector of logs generated by transaction.",28,null],[12,"contracts_created","","Addresses of contracts created during execution of transaction.\nOrdered from earliest creation.",28,null],[12,"output","","Transaction output.",28,null],[12,"trace","","The trace of this transaction.",28,null],[12,"vm_trace","","The VM trace of this transaction.",28,null],[12,"state_diff","","The state diff, if we traced it.",28,null],[3,"Executive","","Transaction executor.",null,null],[3,"TransactOptions","","Transaction execution options.",null,null],[12,"tracing","","Enable call tracing.",29,null],[12,"vm_tracing","","Enable VM tracing.",29,null],[12,"check_nonce","","Check transaction nonce before execution.",29,null],[3,"EnvInfo","","Information concerning the execution environment for a message-call/contract-creation.",null,null],[12,"number","","The block number.",30,null],[12,"author","","The block author.",30,null],[12,"timestamp","","The block timestamp.",30,null],[12,"difficulty","","The block difficulty.",30,null],[12,"gas_limit","","The block gas limit.",30,null],[12,"last_hashes","","The last 256 block hashes.",30,null],[12,"gas_used","","The gas used.",30,null],[12,"dao_rescue_block_gas_limit","","Block gas limit at DAO rescue block SOFT_FORK_BLOCK or None if not yet there.",30,null],[3,"CallAnalytics","","Options concerning what analytics we run on the call.",null,null],[12,"transaction_tracing","","Make a transaction trace.",31,null],[12,"vm_tracing","","Make a VM trace.",31,null],[12,"state_diffing","","Make a diff.",31,null],[4,"BlockStatus","","General block status",null,null],[13,"InChain","","Part of the blockchain.",32,null],[13,"Queued","","Queued for import.",32,null],[13,"Bad","","Known as bad.",32,null],[13,"Unknown","","Unknown.",32,null],[4,"Switch","","3-value enum.",null,null],[13,"On","","True.",33,null],[13,"Off","","False.",33,null],[13,"Auto","","Auto.",33,null],[4,"VMType","","Type of EVM to use.",null,null],[13,"Interpreter","","RUST EVM",34,null],[4,"Error","","Client configuration errors.",null,null],[13,"Trace","","TraceDB configuration error.",35,null],[4,"BlockID","","Uniquely identifies block.",null,null],[13,"Hash","","Block&#39;s sha3.\nQuerying by hash is always faster.",36,null],[13,"Number","","Block number within canon blockchain.",36,null],[13,"Earliest","","Earliest block (genesis).",36,null],[13,"Latest","","Latest mined block.",36,null],[4,"TransactionID","","Uniquely identifies transaction.",null,null],[13,"Hash","","Transaction&#39;s sha3.",37,null],[13,"Location","","Block id and transaction index within this block.\nQuerying by block position is always faster.",37,null],[4,"EachBlockWith","","Used for generating test client blocks.",null,null],[13,"Nothing","","Plain block.",38,null],[13,"Uncle","","Block with an uncle.",38,null],[13,"Transaction","","Block with a transaction.",38,null],[13,"UncleAndTransaction","","Block with an uncle and transaction.",38,null],[5,"get_db_path","","Get the path for the databases given the root path and information on the databases.",null,{"inputs":[{"name":"path"},{"name":"algorithm"},{"name":"h256"}],"output":{"name":"pathbuf"}}],[5,"append_path","","Append a path element to the given path and return the string.",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"string"}}],[11,"fmt","","",20,{"inputs":[{"name":"blockchaininfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"clientreport"},{"name":"clientreport"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"clientreport"},{"name":"clientreport"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"clientreport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"clientreport"}],"output":{"name":"clientreport"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"clientreport"}}],[11,"accrue_block","","Alter internal reporting to reflect the additional `block` has been processed.",21,{"inputs":[{"name":"clientreport"},{"name":"preverifiedblock"}],"output":null}],[11,"new","","Create a new client with given spec and DB path.",39,{"inputs":[{"name":"clientconfig"},{"name":"spec"},{"name":"path"},{"name":"arc"},{"name":"iochannel"}],"output":{"name":"result"}}],[11,"new_with_verifier","","Create a new client with given spec and DB path and custom verifier.",39,{"inputs":[{"name":"clientconfig"},{"name":"spec"},{"name":"path"},{"name":"arc"},{"name":"iochannel"}],"output":{"name":"result"}}],[11,"flush_queue","","Flush the block import queue.",39,{"inputs":[{"name":"client"}],"output":null}],[11,"import_verified_blocks","","This is triggered by a message coming from a block queue when the block is ready for insertion",39,{"inputs":[{"name":"client"},{"name":"iochannel"}],"output":{"name":"usize"}}],[11,"import_queued_transactions","","Import transactions from the IO queue",39,null],[11,"state_at","","Attempt to get a copy of a specific block&#39;s state.",39,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"state","","Get a copy of the best block&#39;s state.",39,{"inputs":[{"name":"client"}],"output":{"name":"state"}}],[11,"blockchain_cache_info","","Get info on the cache.",39,{"inputs":[{"name":"client"}],"output":{"name":"blockchaincachesize"}}],[11,"report","","Get the report.",39,{"inputs":[{"name":"client"}],"output":{"name":"clientreport"}}],[11,"tick","","Tick the client.",39,{"inputs":[{"name":"client"}],"output":null}],[11,"configure_cache","","Set up the cache behaviour.",39,{"inputs":[{"name":"client"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"block_number","","Look up the block number for the given block ID.",39,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"call","","",39,{"inputs":[{"name":"client"},{"name":"signedtransaction"},{"name":"callanalytics"}],"output":{"name":"result"}}],[11,"vm_factory","","",39,{"inputs":[{"name":"client"}],"output":{"name":"evmfactory"}}],[11,"block_header","","",39,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block_body","","",39,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block","","",39,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block_status","","",39,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"blockstatus"}}],[11,"block_total_difficulty","","",39,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"nonce","","",39,{"inputs":[{"name":"client"},{"name":"address"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block_hash","","",39,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"code","","",39,{"inputs":[{"name":"client"},{"name":"address"}],"output":{"name":"option"}}],[11,"balance","","",39,{"inputs":[{"name":"client"},{"name":"address"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"storage_at","","",39,{"inputs":[{"name":"client"},{"name":"address"},{"name":"h256"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"transaction","","",39,{"inputs":[{"name":"client"},{"name":"transactionid"}],"output":{"name":"option"}}],[11,"uncle","","",39,{"inputs":[{"name":"client"},{"name":"uncleid"}],"output":{"name":"option"}}],[11,"transaction_receipt","","",39,{"inputs":[{"name":"client"},{"name":"transactionid"}],"output":{"name":"option"}}],[11,"tree_route","","",39,{"inputs":[{"name":"client"},{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[11,"find_uncles","","",39,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"state_data","","",39,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_receipts","","",39,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"import_block","","",39,{"inputs":[{"name":"client"},{"name":"bytes"}],"output":{"name":"importresult"}}],[11,"queue_info","","",39,{"inputs":[{"name":"client"}],"output":{"name":"blockqueueinfo"}}],[11,"clear_queue","","",39,{"inputs":[{"name":"client"}],"output":null}],[11,"chain_info","","",39,{"inputs":[{"name":"client"}],"output":{"name":"blockchaininfo"}}],[11,"blocks_with_bloom","","",39,{"inputs":[{"name":"client"},{"name":"h2048"},{"name":"blockid"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"logs","","",39,{"inputs":[{"name":"client"},{"name":"filter"}],"output":{"name":"vec"}}],[11,"filter_traces","","",39,{"inputs":[{"name":"client"},{"name":"tracefilter"}],"output":{"name":"option"}}],[11,"trace","","",39,{"inputs":[{"name":"client"},{"name":"traceid"}],"output":{"name":"option"}}],[11,"transaction_traces","","",39,{"inputs":[{"name":"client"},{"name":"transactionid"}],"output":{"name":"option"}}],[11,"block_traces","","",39,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"last_hashes","","",39,{"inputs":[{"name":"client"}],"output":{"name":"lasthashes"}}],[11,"import_transactions","","",39,{"inputs":[{"name":"client"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"queue_transactions","","",39,{"inputs":[{"name":"client"},{"name":"vec"}],"output":null}],[11,"all_transactions","","",39,{"inputs":[{"name":"client"}],"output":{"name":"vec"}}],[11,"prepare_open_block","","",39,null],[11,"on_panic","","",39,{"inputs":[{"name":"client"},{"name":"f"}],"output":null}],[11,"default","","",22,{"inputs":[],"output":{"name":"clientconfig"}}],[11,"fmt","","",22,{"inputs":[{"name":"clientconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",35,{"inputs":[{"name":"traceerror"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"eachblockwith"}],"output":{"name":"eachblockwith"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new test client.",26,{"inputs":[],"output":{"name":"self"}}],[11,"set_transaction_receipt","","Set the transaction receipt result",26,{"inputs":[{"name":"testblockchainclient"},{"name":"transactionid"},{"name":"localizedreceipt"}],"output":null}],[11,"set_execution_result","","Set the execution result.",26,{"inputs":[{"name":"testblockchainclient"},{"name":"executed"}],"output":null}],[11,"set_balance","","Set the balance of account `address` to `balance`.",26,{"inputs":[{"name":"testblockchainclient"},{"name":"address"},{"name":"u256"}],"output":null}],[11,"set_nonce","","Set nonce of account `address` to `nonce`.",26,{"inputs":[{"name":"testblockchainclient"},{"name":"address"},{"name":"u256"}],"output":null}],[11,"set_code","","Set `code` at `address`.",26,{"inputs":[{"name":"testblockchainclient"},{"name":"address"},{"name":"bytes"}],"output":null}],[11,"set_storage","","Set storage `position` to `value` for account `address`.",26,{"inputs":[{"name":"testblockchainclient"},{"name":"address"},{"name":"h256"},{"name":"h256"}],"output":null}],[11,"set_queue_size","","Set block queue size for testing",26,{"inputs":[{"name":"testblockchainclient"},{"name":"usize"}],"output":null}],[11,"add_blocks","","Add blocks to test client.",26,{"inputs":[{"name":"testblockchainclient"},{"name":"usize"},{"name":"eachblockwith"}],"output":null}],[11,"corrupt_block","","Make a bad block by setting invalid extra data.",26,{"inputs":[{"name":"testblockchainclient"},{"name":"blocknumber"}],"output":null}],[11,"corrupt_block_parent","","Make a bad block by setting invalid parent hash.",26,{"inputs":[{"name":"testblockchainclient"},{"name":"blocknumber"}],"output":null}],[11,"block_hash_delta_minus","","TODO:",26,{"inputs":[{"name":"testblockchainclient"},{"name":"usize"}],"output":{"name":"h256"}}],[11,"prepare_open_block","","",26,null],[11,"call","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"signedtransaction"},{"name":"callanalytics"}],"output":{"name":"result"}}],[11,"block_total_difficulty","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block_hash","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"nonce","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"address"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"code","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"address"}],"output":{"name":"option"}}],[11,"balance","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"address"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"storage_at","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"address"},{"name":"h256"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"transaction","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"transactionid"}],"output":{"name":"option"}}],[11,"uncle","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"uncleid"}],"output":{"name":"option"}}],[11,"transaction_receipt","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"transactionid"}],"output":{"name":"option"}}],[11,"blocks_with_bloom","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"h2048"},{"name":"blockid"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"logs","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"filter"}],"output":{"name":"vec"}}],[11,"last_hashes","","",26,{"inputs":[{"name":"testblockchainclient"}],"output":{"name":"lasthashes"}}],[11,"block_header","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block_body","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block_status","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"blockid"}],"output":{"name":"blockstatus"}}],[11,"tree_route","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[11,"find_uncles","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[11,"state_data","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_receipts","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[11,"import_block","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"bytes"}],"output":{"name":"importresult"}}],[11,"queue_info","","",26,{"inputs":[{"name":"testblockchainclient"}],"output":{"name":"blockqueueinfo"}}],[11,"clear_queue","","",26,{"inputs":[{"name":"testblockchainclient"}],"output":null}],[11,"chain_info","","",26,{"inputs":[{"name":"testblockchainclient"}],"output":{"name":"blockchaininfo"}}],[11,"vm_factory","","",26,{"inputs":[{"name":"testblockchainclient"}],"output":{"name":"evmfactory"}}],[11,"filter_traces","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"tracefilter"}],"output":{"name":"option"}}],[11,"trace","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"traceid"}],"output":{"name":"option"}}],[11,"transaction_traces","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"transactionid"}],"output":{"name":"option"}}],[11,"block_traces","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"import_transactions","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"queue_transactions","","",26,{"inputs":[{"name":"testblockchainclient"},{"name":"vec"}],"output":null}],[11,"all_transactions","","",26,{"inputs":[{"name":"testblockchainclient"}],"output":{"name":"vec"}}],[6,"LastHashes","","Simple vector of hashes, should be at most 256 items large, can be smaller if being used\nfor a block whose number is less than 257.",null,null],[8,"BlockChainClient","","Blockchain database client. Owns and manages a blockchain and a block queue.",null,null],[10,"block_header","","Get raw block header data by block id.",40,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"block_body","","Get raw block body data by block id.\nBlock body is an RLP list of two items: uncles and transactions.",40,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"block","","Get raw block data by block header hash.",40,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"block_status","","Get block status by block header hash.",40,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"blockstatus"}}],[10,"block_total_difficulty","","Get block total difficulty.",40,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"nonce","","Attempt to get address nonce at given block.\nMay not fail on BlockID::Latest.",40,{"inputs":[{"name":"blockchainclient"},{"name":"address"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"latest_nonce","","Get address nonce at the latest block&#39;s state.",40,{"inputs":[{"name":"blockchainclient"},{"name":"address"}],"output":{"name":"u256"}}],[10,"block_hash","","Get block hash.",40,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"code","","Get address code.",40,{"inputs":[{"name":"blockchainclient"},{"name":"address"}],"output":{"name":"option"}}],[10,"balance","","Get address balance at the given block&#39;s state.",40,{"inputs":[{"name":"blockchainclient"},{"name":"address"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"latest_balance","","Get address balance at the latest block&#39;s state.",40,{"inputs":[{"name":"blockchainclient"},{"name":"address"}],"output":{"name":"u256"}}],[10,"storage_at","","Get value of the storage at given position at the given block&#39;s state.",40,{"inputs":[{"name":"blockchainclient"},{"name":"address"},{"name":"h256"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"latest_storage_at","","Get value of the storage at given position at the latest block&#39;s state.",40,{"inputs":[{"name":"blockchainclient"},{"name":"address"},{"name":"h256"}],"output":{"name":"h256"}}],[10,"transaction","","Get transaction with given hash.",40,{"inputs":[{"name":"blockchainclient"},{"name":"transactionid"}],"output":{"name":"option"}}],[10,"uncle","","Get uncle with given id.",40,{"inputs":[{"name":"blockchainclient"},{"name":"uncleid"}],"output":{"name":"option"}}],[10,"transaction_receipt","","Get transaction receipt with given hash.",40,{"inputs":[{"name":"blockchainclient"},{"name":"transactionid"}],"output":{"name":"option"}}],[10,"tree_route","","Get a tree route between `from` and `to`.\nSee `BlockChain::tree_route`.",40,{"inputs":[{"name":"blockchainclient"},{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[10,"find_uncles","","Get all possible uncle hashes for a block.",40,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"state_data","","Get latest state node",40,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_receipts","","Get raw block receipts data by block header hash.",40,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"import_block","","Import a block into the blockchain.",40,{"inputs":[{"name":"blockchainclient"},{"name":"bytes"}],"output":{"name":"importresult"}}],[10,"queue_info","","Get block queue information.",40,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"blockqueueinfo"}}],[10,"clear_queue","","Clear block queue and abort all import activity.",40,{"inputs":[{"name":"blockchainclient"}],"output":null}],[10,"chain_info","","Get blockchain information.",40,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"blockchaininfo"}}],[11,"best_block_header","","Get the best block header.",40,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"bytes"}}],[10,"blocks_with_bloom","","Returns numbers of blocks containing given bloom.",40,{"inputs":[{"name":"blockchainclient"},{"name":"h2048"},{"name":"blockid"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"logs","","Returns logs matching given filter.",40,{"inputs":[{"name":"blockchainclient"},{"name":"filter"}],"output":{"name":"vec"}}],[10,"call","","Makes a non-persistent transaction call.",40,{"inputs":[{"name":"blockchainclient"},{"name":"signedtransaction"},{"name":"callanalytics"}],"output":{"name":"result"}}],[10,"vm_factory","","Returns EvmFactory.",40,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"evmfactory"}}],[10,"filter_traces","","Returns traces matching given filter.",40,{"inputs":[{"name":"blockchainclient"},{"name":"tracefilter"}],"output":{"name":"option"}}],[10,"trace","","Returns trace with given id.",40,{"inputs":[{"name":"blockchainclient"},{"name":"traceid"}],"output":{"name":"option"}}],[10,"transaction_traces","","Returns traces created by transaction.",40,{"inputs":[{"name":"blockchainclient"},{"name":"transactionid"}],"output":{"name":"option"}}],[10,"block_traces","","Returns traces created by transaction from block.",40,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"last_hashes","","Get last hashes starting from best block.",40,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"lasthashes"}}],[10,"import_transactions","","import transactions from network/other 3rd party",40,{"inputs":[{"name":"blockchainclient"},{"name":"vec"}],"output":{"name":"vec"}}],[10,"queue_transactions","","Queue transactions for importing.",40,{"inputs":[{"name":"blockchainclient"},{"name":"vec"}],"output":null}],[10,"all_transactions","","list all transactions",40,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"vec"}}],[11,"gas_price_statistics","","Get the gas price distribution.",40,{"inputs":[{"name":"blockchainclient"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"dao_rescue_block_gas_limit","","Get `Some` gas limit of SOFT_FORK_BLOCK, or `None` if chain is not yet that long.",40,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[8,"MiningBlockChainClient","","Extended client interface used for mining",null,null],[10,"prepare_open_block","","Returns OpenBlock prepared for closing.",41,null],[11,"fmt","","",31,{"inputs":[{"name":"callanalytics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"callanalytics"}],"output":{"name":"callanalytics"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"callanalytics"}}],[11,"eq","","",31,{"inputs":[{"name":"callanalytics"},{"name":"callanalytics"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"callanalytics"},{"name":"callanalytics"}],"output":{"name":"bool"}}],[0,"error","ethcore","General error types for use in ethcore.",null,null],[4,"ExecutionError","ethcore::error","Result of executing the transaction.",null,null],[13,"NotEnoughBaseGas","","Returned when there gas paid for transaction execution is\nlower than base gas required.",42,null],[12,"required","ethcore::error::ExecutionError","Absolute minimum gas required.",42,null],[12,"got","","Gas provided.",42,null],[13,"BlockGasLimitReached","ethcore::error","Returned when block (gas_used + gas) &gt; gas_limit.",42,null],[12,"gas_limit","ethcore::error::ExecutionError","Gas limit of block for transaction.",42,null],[12,"gas_used","","Gas used in block prior to transaction.",42,null],[12,"gas","","Amount of gas in block.",42,null],[13,"InvalidNonce","ethcore::error","Returned when transaction nonce does not match state nonce.",42,null],[12,"expected","ethcore::error::ExecutionError","Nonce expected.",42,null],[12,"got","","Nonce found.",42,null],[13,"NotEnoughCash","ethcore::error","Returned when cost of transaction (value + gas_price * gas) exceeds\ncurrent sender balance.",42,null],[12,"required","ethcore::error::ExecutionError","Minimum required balance.",42,null],[12,"got","","Actual balance.",42,null],[13,"Internal","ethcore::error","Returned when internal evm error occurs.",42,null],[13,"TransactionMalformed","","Returned when generic transaction occurs",42,null],[4,"TransactionError","","Errors concerning transaction processing.",null,null],[13,"AlreadyImported","","Transaction is already imported to the queue",43,null],[13,"Old","","Transaction is not valid anymore (state already has higher nonce)",43,null],[13,"TooCheapToReplace","","Transaction has too low fee\n(there is already a transaction with the same sender-nonce but higher gas price)",43,null],[13,"LimitReached","","Transaction was not imported to the queue because limit has been reached.",43,null],[13,"InsufficientGasPrice","","Transaction&#39;s gas price is below threshold.",43,null],[12,"minimal","ethcore::error::TransactionError","Minimal expected gas price",43,null],[12,"got","","Transaction gas price",43,null],[13,"InsufficientBalance","ethcore::error","Sender doesn&#39;t have enough funds to pay for this transaction",43,null],[12,"balance","ethcore::error::TransactionError","Senders balance",43,null],[12,"cost","","Transaction cost",43,null],[13,"GasLimitExceeded","ethcore::error","Transactions gas is higher then current gas limit",43,null],[12,"limit","ethcore::error::TransactionError","Current gas limit",43,null],[12,"got","","Declared transaction gas",43,null],[13,"InvalidGasLimit","ethcore::error","Transaction&#39;s gas limit (aka gas) is invalid.",43,null],[13,"DAORescue","","Transaction is invalid for some other reason.",43,null],[4,"BlockError","","Errors concerning block processing.",null,null],[13,"TooManyUncles","","Block has too many uncles.",44,null],[13,"ExtraDataOutOfBounds","","Extra data is of an invalid length.",44,null],[13,"InvalidSealArity","","Seal is incorrect format.",44,null],[13,"TooMuchGasUsed","","Block has too much gas used.",44,null],[13,"InvalidUnclesHash","","Uncles hash in header is invalid.",44,null],[13,"UncleTooOld","","An uncle is from a generation too old.",44,null],[13,"UncleIsBrother","","An uncle is from the same generation as the block.",44,null],[13,"UncleInChain","","An uncle is already in the chain.",44,null],[13,"UncleParentNotInChain","","An uncle has a parent not in the chain.",44,null],[13,"InvalidStateRoot","","State root header field is invalid.",44,null],[13,"InvalidGasUsed","","Gas used header field is invalid.",44,null],[13,"InvalidTransactionsRoot","","Transactions root header field is invalid.",44,null],[13,"DifficultyOutOfBounds","","Difficulty is out of range; this can be used as an looser error prior to getting a definitive\nvalue for difficulty. This error needs only provide bounds of which it is out.",44,null],[13,"InvalidDifficulty","","Difficulty header field is invalid; this is a strong error used after getting a definitive\nvalue for difficulty (which is provided).",44,null],[13,"MismatchedH256SealElement","","Seal element of type H256 (max_hash for Ethash, but could be something else for\nother seal engines) is out of bounds.",44,null],[13,"InvalidProofOfWork","","Proof-of-work aspect of seal, which we assume is a 256-bit value, is invalid.",44,null],[13,"InvalidSeal","","Some low-level aspect of the seal is incorrect.",44,null],[13,"InvalidGasLimit","","Gas limit header field is invalid.",44,null],[13,"InvalidReceiptsRoot","","Receipts trie root header field is invalid.",44,null],[13,"InvalidTimestamp","","Timestamp header field is invalid.",44,null],[13,"InvalidLogBloom","","Log bloom header field is invalid.",44,null],[13,"InvalidParentHash","","Parent hash field of header is invalid; this is an invalid error indicating a logic flaw in the codebase.\nTODO: remove and favour an assert!/panic!.",44,null],[13,"InvalidNumber","","Number field of header is invalid.",44,null],[13,"RidiculousNumber","","Block number isn&#39;t sensible.",44,null],[13,"UnknownParent","","Parent given is unknown.",44,null],[13,"UnknownUncleParent","","Uncle parent given is unknown.",44,null],[4,"ImportError","","Import to the block queue result",null,null],[13,"AlreadyInChain","","Already in the block chain.",45,null],[13,"AlreadyQueued","","Already in the block queue.",45,null],[13,"KnownBad","","Already marked as bad from a previous import (could mean parent is bad).",45,null],[4,"Error","","General error type which should be capable of representing all errors in ethcore.",null,null],[13,"Client","","Client configuration error.",46,null],[13,"Util","","Error concerning a utility.",46,null],[13,"Block","","Error concerning block processing.",46,null],[13,"UnknownEngineName","","Unknown engine given.",46,null],[13,"Execution","","Error concerning EVM code execution.",46,null],[13,"Transaction","","Error concerning transaction processing.",46,null],[13,"Import","","Error concerning block import.",46,null],[13,"PowHashInvalid","","PoW hash is invalid or out of date.",46,null],[13,"PowInvalid","","The value of the nonce or mishash is invalid.",46,null],[13,"Trie","","Error concerning TrieDBs",46,null],[6,"ImportResult","","Result of import block operation.",null,null],[11,"eq","","",43,{"inputs":[{"name":"transactionerror"},{"name":"transactionerror"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"transactionerror"},{"name":"transactionerror"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"transactionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"transactionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"blockerror"},{"name":"blockerror"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"blockerror"},{"name":"blockerror"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"blockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"blockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"importerror"},{"name":"importerror"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"importerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"importerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",46,{"inputs":[{"name":"clienterror"}],"output":{"name":"error"}}],[11,"from","","",46,{"inputs":[{"name":"transactionerror"}],"output":{"name":"error"}}],[11,"from","","",46,{"inputs":[{"name":"importerror"}],"output":{"name":"error"}}],[11,"from","","",46,{"inputs":[{"name":"blockerror"}],"output":{"name":"error"}}],[11,"from","","",46,{"inputs":[{"name":"executionerror"}],"output":{"name":"error"}}],[11,"from","","",46,{"inputs":[{"name":"cryptoerror"}],"output":{"name":"error"}}],[11,"from","","",46,{"inputs":[{"name":"decodererror"}],"output":{"name":"error"}}],[11,"from","","",46,{"inputs":[{"name":"utilerror"}],"output":{"name":"error"}}],[11,"from","","",46,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",46,{"inputs":[{"name":"trieerror"}],"output":{"name":"error"}}],[0,"ethereum","ethcore","Ethereum protocol module.",null,null],[5,"new_olympic","ethcore::ethereum","Create a new Olympic chain spec.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_frontier","","Create a new Frontier mainnet chain spec.",null,{"inputs":[{"name":"bool"}],"output":{"name":"spec"}}],[5,"new_frontier_test","","Create a new Frontier chain spec as though it never changes to Homestead.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_homestead_test","","Create a new Homestead chain spec as though it never changed from Frontier.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_mainnet_like","","Create a new Frontier main net chain spec without genesis accounts.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_morden","","Create a new Morden chain spec.",null,{"inputs":[],"output":{"name":"spec"}}],[0,"ethash","","Export the ethash module.",null,null],[3,"EthashParams","ethcore::ethereum::ethash","Ethash params.",null,null],[12,"gas_limit_bound_divisor","","Gas limit divisor.",47,null],[12,"minimum_difficulty","","Minimum difficulty.",47,null],[12,"difficulty_bound_divisor","","Difficulty bound divisor.",47,null],[12,"duration_limit","","Block duration.",47,null],[12,"block_reward","","Block reward.",47,null],[12,"registrar","","Namereg contract address.",47,null],[12,"frontier_compatibility_mode_limit","","Homestead transition block number.",47,null],[12,"dao_rescue_soft_fork","","Enable the soft-fork logic.",47,null],[3,"Ethash","","Engine using Ethash proof-of-work consensus algorithm, suitable for Ethereum\nmainnet chains in the Olympic, Frontier and Homestead eras.",null,null],[11,"eq","","",47,{"inputs":[{"name":"ethashparams"},{"name":"ethashparams"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"ethashparams"},{"name":"ethashparams"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"ethashparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",47,{"inputs":[{"name":"ethashparams"}],"output":{"name":"self"}}],[11,"new","","Create a new instance of Ethash engine",48,{"inputs":[{"name":"commonparams"},{"name":"ethashparams"},{"name":"btreemap"}],"output":{"name":"self"}}],[11,"name","","",48,{"inputs":[{"name":"ethash"}],"output":{"name":"str"}}],[11,"version","","",48,{"inputs":[{"name":"ethash"}],"output":{"name":"semanticversion"}}],[11,"seal_fields","","",48,{"inputs":[{"name":"ethash"}],"output":{"name":"usize"}}],[11,"params","","",48,{"inputs":[{"name":"ethash"}],"output":{"name":"commonparams"}}],[11,"builtins","","",48,{"inputs":[{"name":"ethash"}],"output":{"name":"btreemap"}}],[11,"extra_info","","Additional engine-specific information for the user/developer concerning `header`.",48,{"inputs":[{"name":"ethash"},{"name":"header"}],"output":{"name":"hashmap"}}],[11,"schedule","","",48,{"inputs":[{"name":"ethash"},{"name":"envinfo"}],"output":{"name":"schedule"}}],[11,"populate_from_parent","","",48,{"inputs":[{"name":"ethash"},{"name":"header"},{"name":"header"},{"name":"u256"},{"name":"u256"}],"output":null}],[11,"on_close_block","","Apply the block reward on finalisation of the block.\nThis assumes that all uncles are valid uncles (i.e. of at least one generation before the current).",48,{"inputs":[{"name":"ethash"},{"name":"executedblock"}],"output":null}],[11,"verify_block_basic","","",48,{"inputs":[{"name":"ethash"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_unordered","","",48,{"inputs":[{"name":"ethash"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_family","","",48,{"inputs":[{"name":"ethash"},{"name":"header"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_transaction_basic","","",48,{"inputs":[{"name":"ethash"},{"name":"signedtransaction"},{"name":"header"}],"output":{"name":"result"}}],[11,"verify_transaction","","",48,{"inputs":[{"name":"ethash"},{"name":"signedtransaction"},{"name":"header"}],"output":{"name":"result"}}],[11,"boundary_to_difficulty","","Convert an Ethash boundary to its original difficulty. Basically just `f(x) = 2^256 / x`.",48,{"inputs":[{"name":"h256"}],"output":{"name":"u256"}}],[11,"difficulty_to_boundary","","Convert an Ethash difficulty to the target boundary. Basically just `f(x) = 2^256 / x`.",48,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[0,"denominations","ethcore::ethereum","Export the denominations module.",null,null],[5,"ether","ethcore::ethereum::denominations","1 Ether in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"finney","","1 Finney in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"szabo","","1 Szabo in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"shannon","","1 Shannon in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"wei","","1 Wei in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[0,"filter","ethcore","Blockchain filter",null,null],[3,"Filter","ethcore::filter","Blockchain Filter.",null,null],[12,"from_block","","Blockchain will be searched from this block.",49,null],[12,"to_block","","Till this block.",49,null],[12,"address","","Search addresses.",49,null],[12,"topics","","Search topics.",49,null],[11,"clone","","",49,{"inputs":[{"name":"filter"}],"output":{"name":"self"}}],[11,"bloom_possibilities","","Returns combinations of each address and topic.",49,{"inputs":[{"name":"filter"}],"output":{"name":"vec"}}],[11,"matches","","Returns true if given log entry matches filter.",49,{"inputs":[{"name":"filter"},{"name":"logentry"}],"output":{"name":"bool"}}],[0,"header","ethcore","Block header.",null,null],[3,"Header","ethcore::header","A block header.",null,null],[12,"parent_hash","","Parent hash.",50,null],[12,"timestamp","","Block timestamp.",50,null],[12,"number","","Block number.",50,null],[12,"author","","Block author.",50,null],[12,"transactions_root","","Transactions root.",50,null],[12,"uncles_hash","","Block uncles hash.",50,null],[12,"extra_data","","Block extra data.",50,null],[12,"state_root","","State root.",50,null],[12,"receipts_root","","Block receipts root.",50,null],[12,"log_bloom","","Block bloom.",50,null],[12,"gas_used","","Gas used for contracts execution.",50,null],[12,"gas_limit","","Block gas limit.",50,null],[12,"difficulty","","Block difficulty.",50,null],[12,"seal","","Vector of post-RLP-encoded fields.",50,null],[12,"hash","","The memoized hash of the RLP representation *including* the seal fields.",50,null],[12,"bare_hash","","The memoized hash of the RLP representation *without* the seal fields.",50,null],[6,"BlockNumber","","Type for Block number",null,null],[11,"clone","","",50,{"inputs":[{"name":"header"}],"output":{"name":"header"}}],[11,"fmt","","",50,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new, default-valued, header.",50,{"inputs":[],"output":{"name":"self"}}],[11,"parent_hash","","Get the parent_hash field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"timestamp","","Get the timestamp field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"u64"}}],[11,"number","","Get the number field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"blocknumber"}}],[11,"author","","Get the author field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"address"}}],[11,"extra_data","","Get the extra data field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"bytes"}}],[11,"state_root","","Get the state root field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"receipts_root","","Get the receipts root field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"gas_limit","","Get the gas limit field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"u256"}}],[11,"difficulty","","Get the difficulty field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"u256"}}],[11,"seal","","Get the seal field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"vec"}}],[11,"set_parent_hash","","Set the number field of the header.",50,{"inputs":[{"name":"header"},{"name":"h256"}],"output":null}],[11,"set_timestamp","","Set the timestamp field of the header.",50,{"inputs":[{"name":"header"},{"name":"u64"}],"output":null}],[11,"set_timestamp_now","","Set the timestamp field of the header to the current time.",50,{"inputs":[{"name":"header"},{"name":"u64"}],"output":null}],[11,"set_number","","Set the number field of the header.",50,{"inputs":[{"name":"header"},{"name":"blocknumber"}],"output":null}],[11,"set_author","","Set the author field of the header.",50,{"inputs":[{"name":"header"},{"name":"address"}],"output":null}],[11,"set_extra_data","","Set the extra data field of the header.",50,{"inputs":[{"name":"header"},{"name":"bytes"}],"output":null}],[11,"set_gas_used","","Set the gas used field of the header.",50,{"inputs":[{"name":"header"},{"name":"u256"}],"output":null}],[11,"set_gas_limit","","Set the gas limit field of the header.",50,{"inputs":[{"name":"header"},{"name":"u256"}],"output":null}],[11,"set_difficulty","","Set the difficulty field of the header.",50,{"inputs":[{"name":"header"},{"name":"u256"}],"output":null}],[11,"set_seal","","Set the seal field of the header.",50,{"inputs":[{"name":"header"},{"name":"vec"}],"output":null}],[11,"hash","","Get the hash of this header (sha3 of the RLP).",50,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"bare_hash","","Get the hash of the header excluding the seal",50,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"note_dirty","","Note that some fields have changed. Resets the memoised hash.",50,{"inputs":[{"name":"header"}],"output":null}],[11,"stream_rlp","","Place this header into an RLP stream `s`, optionally `with_seal`.",50,{"inputs":[{"name":"header"},{"name":"rlpstream"},{"name":"seal"}],"output":null}],[11,"rlp","","Get the RLP of this header, optionally `with_seal`.",50,{"inputs":[{"name":"header"},{"name":"seal"}],"output":{"name":"bytes"}}],[11,"rlp_sha3","","Get the SHA3 (Keccak) of this header, optionally `with_seal`.",50,{"inputs":[{"name":"header"},{"name":"seal"}],"output":{"name":"h256"}}],[11,"decode","","",50,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"rlp_append","","",50,{"inputs":[{"name":"header"},{"name":"rlpstream"}],"output":null}],[0,"service","ethcore","Creates and registers client and network services.",null,null],[3,"ClientService","ethcore::service","Client service setup. Creates and registers client and network services with the IO subsystem.",null,null],[4,"SyncMessage","","Message type for external and internal events",null,null],[13,"NewChainBlocks","","New block has been imported into the blockchain",51,null],[12,"imported","ethcore::service::SyncMessage","Hashes of blocks imported to blockchain",51,null],[12,"invalid","","Hashes of blocks not imported to blockchain (because were invalid)",51,null],[12,"retracted","","Hashes of blocks that were removed from canonical chain",51,null],[12,"enacted","","Hashes of blocks that are now included in cannonical chain",51,null],[13,"NewChainHead","ethcore::service","Best Block Hash in chain has been changed",51,null],[13,"BlockVerified","","A block is ready",51,null],[13,"NewTransactions","","New transaction RLPs are ready to be imported",51,null],[13,"StartNetwork","","Start network command.",51,null],[13,"StopNetwork","","Stop network command.",51,null],[6,"NetSyncMessage","","IO Message type used for Network service",null,null],[11,"clone","","",51,{"inputs":[{"name":"syncmessage"}],"output":{"name":"syncmessage"}}],[11,"start","","Start the service in a separate thread.",52,{"inputs":[{"name":"clientconfig"},{"name":"spec"},{"name":"networkconfiguration"},{"name":"path"},{"name":"arc"},{"name":"bool"}],"output":{"name":"result"}}],[11,"add_node","","Add a node to network",52,{"inputs":[{"name":"clientservice"},{"name":"str"}],"output":null}],[11,"register_io_handler","","Get general IO interface",52,{"inputs":[{"name":"clientservice"},{"name":"arc"}],"output":{"name":"result"}}],[11,"client","","Get client interface",52,{"inputs":[{"name":"clientservice"}],"output":{"name":"arc"}}],[11,"network","","Get network service component",52,{"inputs":[{"name":"clientservice"}],"output":{"name":"arc"}}],[11,"on_panic","","",52,{"inputs":[{"name":"clientservice"},{"name":"f"}],"output":null}],[0,"trace","ethcore","Tracing",null,null],[3,"BlockTraces","ethcore::trace","Traces created by transactions from the same block.",null,null],[3,"Config","","Traces config.",null,null],[12,"enabled","","Indicates if tracing should be enabled or not.\nIf it&#39;s None, it will be automatically configured.",53,null],[12,"blooms","","Traces blooms configuration.",53,null],[12,"db_cache_size","","Database cache-size if not default",53,null],[3,"TraceDB","","Trace database.",null,null],[3,"Trace","","A trace; includes a description of the action being traced and sub traces of each interior action.",null,null],[12,"depth","","The number of EVM execution environments active when this action happened; 0 if it&#39;s\nthe outer action of the transaction.",54,null],[12,"action","","The action being performed.",54,null],[12,"subs","","The sub traces for each interior action performed as part of this call.",54,null],[12,"result","","The result of the performed action.",54,null],[3,"VMTrace","","A record of a full VM trace for a CALL/CREATE.",null,null],[12,"parent_step","","The step (i.e. index into operations) at which this trace corresponds.",55,null],[12,"code","","The code to be executed.",55,null],[12,"operations","","The operations executed.",55,null],[12,"subs","","The sub traces for each interior action performed as part of this call/create.\nThre is a 1:1 correspondance between these and a CALL/CREATE/CALLCODE/DELEGATECALL instruction.",55,null],[3,"VMOperation","","A record of the execution of a single VM operation.",null,null],[12,"pc","","The program counter.",56,null],[12,"instruction","","The instruction executed.",56,null],[12,"gas_cost","","The gas cost for this instruction.",56,null],[12,"executed","","Information concerning the execution of the operation.",56,null],[3,"VMExecutedOperation","","A record of an executed VM operation.",null,null],[12,"gas_used","","The total gas used.",57,null],[12,"stack_push","","The stack item placed, if any.",57,null],[12,"mem_diff","","If altered, the memory delta.",57,null],[12,"store_diff","","The altered storage value, if any.",57,null],[3,"MemoryDiff","","A diff of some chunk of memory.",null,null],[12,"offset","","Offset into memory the change begins.",58,null],[12,"data","","The changed data.",58,null],[3,"StorageDiff","","A diff of some storage value.",null,null],[12,"location","","Which key in storage is changed.",59,null],[12,"value","","What the value has been changed to.",59,null],[3,"NoopTracer","","Nonoperative tracer. Does not trace anything.",null,null],[3,"NoopVMTracer","","Nonoperative VM tracer. Does not trace anything.",null,null],[3,"ExecutiveTracer","","Simple executive tracer. Traces all calls and creates. Ignores delegatecalls.",null,null],[3,"ExecutiveVMTracer","","Simple VM tracer. Traces all operations.",null,null],[3,"Filter","","Traces filter.",null,null],[12,"range","","Block range.",60,null],[12,"from_address","","From address filter.",60,null],[12,"to_address","","To address filter.",60,null],[3,"AddressesFilter","","Addresses filter.",null,null],[3,"ImportRequest","","Traces import request.",null,null],[12,"traces","","Traces to import.",61,null],[12,"block_hash","","Hash of traces block.",61,null],[12,"block_number","","Number of traces block.",61,null],[12,"enacted","","Blocks enacted by this import.",61,null],[12,"retracted","","Number of blocks retracted by this import.",61,null],[3,"LocalizedTrace","","Localized trace.",null,null],[12,"action","","Type of action performed by a transaction.",62,null],[12,"result","","Result of this action.",62,null],[12,"subtraces","","Number of subtraces.",62,null],[12,"trace_address","","Exact location of trace.",62,null],[12,"transaction_number","","Transaction number within the block.",62,null],[12,"transaction_hash","","Signed transaction hash.",62,null],[12,"block_number","","Block number.",62,null],[12,"block_hash","","Block hash.",62,null],[4,"Switch","","3-value enum.",null,null],[13,"On","","True.",33,null],[13,"Off","","False.",33,null],[13,"Auto","","Auto.",33,null],[4,"Error","","`TraceDB` errors.",null,null],[13,"ResyncRequired","","Returned when tracing is enabled,\nbut database does not contain traces of old transactions.",63,null],[11,"clone","","",64,{"inputs":[{"name":"blocktraces"}],"output":{"name":"blocktraces"}}],[11,"from","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",64,{"inputs":[{"name":"blocktraces"}],"output":{"name":"vec"}}],[11,"decode","","",64,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"rlp_append","","",64,{"inputs":[{"name":"blocktraces"},{"name":"rlpstream"}],"output":null}],[11,"bloom","","Returns bloom of all traces in given block.",64,{"inputs":[{"name":"blocktraces"}],"output":{"name":"logbloom"}}],[11,"eq","ethcore::client","",33,{"inputs":[{"name":"switch"},{"name":"switch"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"switch"}],"output":{"name":"switch"}}],[11,"fmt","","",33,{"inputs":[{"name":"switch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"turn_to","","Tries to turn old switch to new value.",33,{"inputs":[{"name":"switch"},{"name":"switch"}],"output":{"name":"result"}}],[11,"clone","ethcore::trace","",53,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"fmt","","",53,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"blooms_at","","",65,{"inputs":[{"name":"tracedb"},{"name":"groupposition"}],"output":{"name":"option"}}],[11,"new","","Creates new instance of `TraceDB`.",65,{"inputs":[{"name":"config"},{"name":"path"},{"name":"arc"}],"output":{"name":"result"}}],[11,"tracing_enabled","","",65,{"inputs":[{"name":"tracedb"}],"output":{"name":"bool"}}],[11,"import","","Traces of import request&#39;s enacted blocks are expected to be already in database\nor to be the currently inserted trace.",65,{"inputs":[{"name":"tracedb"},{"name":"importrequest"}],"output":null}],[11,"trace","","",65,{"inputs":[{"name":"tracedb"},{"name":"blocknumber"},{"name":"usize"},{"name":"vec"}],"output":{"name":"option"}}],[11,"transaction_traces","","",65,{"inputs":[{"name":"tracedb"},{"name":"blocknumber"},{"name":"usize"}],"output":{"name":"option"}}],[11,"block_traces","","",65,{"inputs":[{"name":"tracedb"},{"name":"blocknumber"}],"output":{"name":"option"}}],[11,"filter","","",65,{"inputs":[{"name":"tracedb"},{"name":"filter"}],"output":{"name":"vec"}}],[11,"fmt","","",63,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"executivetracer"}}],[11,"prepare_trace_call","","",66,{"inputs":[{"name":"executivetracer"},{"name":"actionparams"}],"output":{"name":"option"}}],[11,"prepare_trace_create","","",66,{"inputs":[{"name":"executivetracer"},{"name":"actionparams"}],"output":{"name":"option"}}],[11,"prepare_trace_output","","",66,{"inputs":[{"name":"executivetracer"}],"output":{"name":"option"}}],[11,"trace_call","","",66,{"inputs":[{"name":"executivetracer"},{"name":"option"},{"name":"u256"},{"name":"option"},{"name":"usize"},{"name":"vec"},{"name":"bool"}],"output":null}],[11,"trace_create","","",66,{"inputs":[{"name":"executivetracer"},{"name":"option"},{"name":"u256"},{"name":"option"},{"name":"address"},{"name":"usize"},{"name":"vec"}],"output":null}],[11,"trace_failed_call","","",66,{"inputs":[{"name":"executivetracer"},{"name":"option"},{"name":"usize"},{"name":"vec"},{"name":"bool"}],"output":null}],[11,"trace_failed_create","","",66,{"inputs":[{"name":"executivetracer"},{"name":"option"},{"name":"usize"},{"name":"vec"}],"output":null}],[11,"subtracer","","",66,{"inputs":[{"name":"executivetracer"}],"output":{"name":"self"}}],[11,"traces","","",66,{"inputs":[{"name":"executivetracer"}],"output":{"name":"vec"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"executivevmtracer"}}],[11,"trace_prepare_execute","","",67,{"inputs":[{"name":"executivevmtracer"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"trace_executed","","",67,null],[11,"prepare_subtrace","","",67,null],[11,"done_subtrace","","",67,{"inputs":[{"name":"executivevmtracer"},{"name":"self"}],"output":null}],[11,"drain","","",67,{"inputs":[{"name":"executivevmtracer"}],"output":{"name":"option"}}],[0,"flat","","Flat trace module",null,null],[3,"FlatTrace","ethcore::trace::flat","Trace localized in vector of traces produced by a single transaction.",null,null],[12,"action","","Type of action performed by a transaction.",68,null],[12,"result","","Result of this action.",68,null],[12,"subtraces","","Number of subtraces.",68,null],[12,"trace_address","","Exact location of trace.",68,null],[3,"FlatTransactionTraces","","Represents all traces produced by a single transaction.",null,null],[3,"FlatBlockTraces","","Represents all traces produced by transactions in a single block.",null,null],[11,"into","","",69,{"inputs":[{"name":"flattransactiontraces"}],"output":{"name":"vec"}}],[11,"from","","",70,{"inputs":[{"name":"blocktraces"}],"output":{"name":"self"}}],[11,"into","","",70,{"inputs":[{"name":"flatblocktraces"}],"output":{"name":"vec"}}],[11,"prepare_trace_call","ethcore::trace","",71,{"inputs":[{"name":"nooptracer"},{"name":"actionparams"}],"output":{"name":"option"}}],[11,"prepare_trace_create","","",71,{"inputs":[{"name":"nooptracer"},{"name":"actionparams"}],"output":{"name":"option"}}],[11,"prepare_trace_output","","",71,{"inputs":[{"name":"nooptracer"}],"output":{"name":"option"}}],[11,"trace_call","","",71,{"inputs":[{"name":"nooptracer"},{"name":"option"},{"name":"u256"},{"name":"option"},{"name":"usize"},{"name":"vec"},{"name":"bool"}],"output":null}],[11,"trace_create","","",71,{"inputs":[{"name":"nooptracer"},{"name":"option"},{"name":"u256"},{"name":"option"},{"name":"address"},{"name":"usize"},{"name":"vec"}],"output":null}],[11,"trace_failed_call","","",71,{"inputs":[{"name":"nooptracer"},{"name":"option"},{"name":"usize"},{"name":"vec"},{"name":"bool"}],"output":null}],[11,"trace_failed_create","","",71,{"inputs":[{"name":"nooptracer"},{"name":"option"},{"name":"usize"},{"name":"vec"}],"output":null}],[11,"subtracer","","",71,{"inputs":[{"name":"nooptracer"}],"output":{"name":"self"}}],[11,"traces","","",71,{"inputs":[{"name":"nooptracer"}],"output":{"name":"vec"}}],[11,"trace_prepare_execute","","Trace the preparation to execute a single instruction.",72,{"inputs":[{"name":"noopvmtracer"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"trace_executed","","Trace the finalised execution of a single instruction.",72,null],[11,"prepare_subtrace","","Spawn subtracer which will be used to trace deeper levels of execution.",72,null],[11,"done_subtrace","","Spawn subtracer which will be used to trace deeper levels of execution.",72,{"inputs":[{"name":"noopvmtracer"},{"name":"self"}],"output":null}],[11,"drain","","Consumes self and returns all VM traces.",72,{"inputs":[{"name":"noopvmtracer"}],"output":{"name":"option"}}],[0,"filter","","Trace filters type definitions",null,null],[3,"AddressesFilter","ethcore::trace::filter","Addresses filter.",null,null],[3,"Filter","","Traces filter.",null,null],[12,"range","","Block range.",60,null],[12,"from_address","","From address filter.",60,null],[12,"to_address","","To address filter.",60,null],[0,"trace","ethcore::trace","Tracing datatypes.",null,null],[3,"CallResult","ethcore::trace::trace","`Call` result.",null,null],[12,"gas_used","","Gas used by call.",73,null],[12,"output","","Call Output.",73,null],[3,"CreateResult","","`Create` result.",null,null],[12,"gas_used","","Gas used by create.",74,null],[12,"code","","Code of the newly created contract.",74,null],[12,"address","","Address of the newly created contract.",74,null],[3,"Call","","Description of a _call_ action, either a `CALL` operation or a message transction.",null,null],[12,"from","","The sending account.",75,null],[12,"to","","The destination account.",75,null],[12,"value","","The value transferred to the destination account.",75,null],[12,"gas","","The gas available for executing the call.",75,null],[12,"input","","The input data provided to the call.",75,null],[3,"Create","","Description of a _create_ action, either a `CREATE` operation or a create transction.",null,null],[12,"from","","The address of the creator.",76,null],[12,"value","","The value with which the new account is endowed.",76,null],[12,"gas","","The gas available for the creation init code.",76,null],[12,"init","","The init code.",76,null],[3,"Trace","","A trace; includes a description of the action being traced and sub traces of each interior action.",null,null],[12,"depth","","The number of EVM execution environments active when this action happened; 0 if it&#39;s\nthe outer action of the transaction.",54,null],[12,"action","","The action being performed.",54,null],[12,"subs","","The sub traces for each interior action performed as part of this call.",54,null],[12,"result","","The result of the performed action.",54,null],[3,"MemoryDiff","","A diff of some chunk of memory.",null,null],[12,"offset","","Offset into memory the change begins.",58,null],[12,"data","","The changed data.",58,null],[3,"StorageDiff","","A diff of some storage value.",null,null],[12,"location","","Which key in storage is changed.",59,null],[12,"value","","What the value has been changed to.",59,null],[3,"VMExecutedOperation","","A record of an executed VM operation.",null,null],[12,"gas_used","","The total gas used.",57,null],[12,"stack_push","","The stack item placed, if any.",57,null],[12,"mem_diff","","If altered, the memory delta.",57,null],[12,"store_diff","","The altered storage value, if any.",57,null],[3,"VMOperation","","A record of the execution of a single VM operation.",null,null],[12,"pc","","The program counter.",56,null],[12,"instruction","","The instruction executed.",56,null],[12,"gas_cost","","The gas cost for this instruction.",56,null],[12,"executed","","Information concerning the execution of the operation.",56,null],[3,"VMTrace","","A record of a full VM trace for a CALL/CREATE.",null,null],[12,"parent_step","","The step (i.e. index into operations) at which this trace corresponds.",55,null],[12,"code","","The code to be executed.",55,null],[12,"operations","","The operations executed.",55,null],[12,"subs","","The sub traces for each interior action performed as part of this call/create.\nThre is a 1:1 correspondance between these and a CALL/CREATE/CALLCODE/DELEGATECALL instruction.",55,null],[4,"Action","","Description of an action that we trace; will be either a call or a create.",null,null],[13,"Call","","It&#39;s a call action.",77,null],[13,"Create","","It&#39;s a create action.",77,null],[4,"Res","","The result of the performed action.",null,null],[13,"Call","","Successful call action result.",78,null],[13,"Create","","Successful create action result.",78,null],[13,"FailedCall","","Failed call.",78,null],[13,"FailedCreate","","Failed create.",78,null],[0,"localized","ethcore::trace","Localized traces type definitions",null,null],[3,"LocalizedTrace","ethcore::trace::localized","Localized trace.",null,null],[12,"action","","Type of action performed by a transaction.",62,null],[12,"result","","Result of this action.",62,null],[12,"subtraces","","Number of subtraces.",62,null],[12,"trace_address","","Exact location of trace.",62,null],[12,"transaction_number","","Transaction number within the block.",62,null],[12,"transaction_hash","","Signed transaction hash.",62,null],[12,"block_number","","Block number.",62,null],[12,"block_hash","","Block hash.",62,null],[8,"Tracer","ethcore::trace","This trait is used by executive to build traces.",null,null],[10,"prepare_trace_call","","Prepares call trace for given params. Noop tracer should return None.",79,{"inputs":[{"name":"tracer"},{"name":"actionparams"}],"output":{"name":"option"}}],[10,"prepare_trace_create","","Prepares create trace for given params. Noop tracer should return None.",79,{"inputs":[{"name":"tracer"},{"name":"actionparams"}],"output":{"name":"option"}}],[10,"prepare_trace_output","","Prepare trace output. Noop tracer should return None.",79,{"inputs":[{"name":"tracer"}],"output":{"name":"option"}}],[10,"trace_call","","Stores trace call info.",79,{"inputs":[{"name":"tracer"},{"name":"option"},{"name":"u256"},{"name":"option"},{"name":"usize"},{"name":"vec"},{"name":"bool"}],"output":null}],[10,"trace_create","","Stores trace create info.",79,{"inputs":[{"name":"tracer"},{"name":"option"},{"name":"u256"},{"name":"option"},{"name":"address"},{"name":"usize"},{"name":"vec"}],"output":null}],[10,"trace_failed_call","","Stores failed call trace.",79,{"inputs":[{"name":"tracer"},{"name":"option"},{"name":"usize"},{"name":"vec"},{"name":"bool"}],"output":null}],[10,"trace_failed_create","","Stores failed create trace.",79,{"inputs":[{"name":"tracer"},{"name":"option"},{"name":"usize"},{"name":"vec"}],"output":null}],[10,"subtracer","","Spawn subtracer which will be used to trace deeper levels of execution.",79,{"inputs":[{"name":"tracer"}],"output":{"name":"self"}}],[10,"traces","","Consumes self and returns all traces.",79,{"inputs":[{"name":"tracer"}],"output":{"name":"vec"}}],[8,"VMTracer","","Used by executive to build VM traces.",null,null],[11,"trace_prepare_execute","","Trace the preparation to execute a single instruction.\n@returns true if `trace_executed` should be called.",80,{"inputs":[{"name":"vmtracer"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"trace_executed","","Trace the finalised execution of a single instruction.",80,null],[10,"prepare_subtrace","","Spawn subtracer which will be used to trace deeper levels of execution.",80,null],[10,"done_subtrace","","Spawn subtracer which will be used to trace deeper levels of execution.",80,{"inputs":[{"name":"vmtracer"},{"name":"self"}],"output":null}],[10,"drain","","Consumes self and returns the VM trace.",80,{"inputs":[{"name":"vmtracer"}],"output":{"name":"option"}}],[8,"DatabaseExtras","","`DbExtras` provides an interface to query extra data which is not stored in tracesdb,\nbut necessary to work correctly.",null,null],[10,"block_hash","","Returns hash of given block number.",81,{"inputs":[{"name":"databaseextras"},{"name":"blocknumber"}],"output":{"name":"option"}}],[10,"transaction_hash","","Returns hash of transaction at given position.",81,{"inputs":[{"name":"databaseextras"},{"name":"blocknumber"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Database","","Db provides an interface to query tracesdb.",null,null],[10,"tracing_enabled","","Returns true if tracing is enabled. Otherwise false.",82,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[10,"import","","Imports new block traces.",82,{"inputs":[{"name":"database"},{"name":"importrequest"}],"output":null}],[10,"trace","","Returns localized trace at given position.",82,{"inputs":[{"name":"database"},{"name":"blocknumber"},{"name":"usize"},{"name":"vec"}],"output":{"name":"option"}}],[10,"transaction_traces","","Returns localized traces created by a single transaction.",82,{"inputs":[{"name":"database"},{"name":"blocknumber"},{"name":"usize"}],"output":{"name":"option"}}],[10,"block_traces","","Returns localized traces created in given block.",82,{"inputs":[{"name":"database"},{"name":"blocknumber"}],"output":{"name":"option"}}],[10,"filter","","Filter traces matching given filter.",82,{"inputs":[{"name":"database"},{"name":"filter"}],"output":{"name":"vec"}}],[0,"spec","ethcore","Blockchain params.",null,null],[3,"Genesis","ethcore::spec","Genesis components.",null,null],[12,"seal","","Seal.",83,null],[12,"difficulty","","Difficulty.",83,null],[12,"author","","Author.",83,null],[12,"timestamp","","Timestamp.",83,null],[12,"parent_hash","","Parent hash.",83,null],[12,"gas_limit","","Gas limit.",83,null],[12,"transactions_root","","Transactions root.",83,null],[12,"receipts_root","","Receipts root.",83,null],[12,"state_root","","State root.",83,null],[12,"gas_used","","Gas used.",83,null],[12,"extra_data","","Extra data.",83,null],[11,"from","","",83,{"inputs":[{"name":"genesis"}],"output":{"name":"self"}}],[0,"spec","","Parameters for a block chain.",null,null],[3,"CommonParams","ethcore::spec::spec","Parameters common to all engines.",null,null],[12,"account_start_nonce","","Account start nonce.",84,null],[12,"maximum_extra_data_size","","Maximum size of extra data.",84,null],[12,"network_id","","Network id.",84,null],[12,"min_gas_limit","","Minimum gas limit.",84,null],[3,"Spec","","Parameters for a block chain; includes both those intrinsic to the design of the\nchain and those to be interpreted by the active chain engine.",null,null],[12,"name","","User friendly spec name",85,null],[12,"engine","","What engine are we using for this?",85,null],[12,"nodes","","Known nodes on the network in enode format.",85,null],[12,"params","","Parameters common to all engines.",85,null],[12,"parent_hash","","The genesis block&#39;s parent hash field.",85,null],[12,"author","","The genesis block&#39;s author field.",85,null],[12,"difficulty","","The genesis block&#39;s difficulty field.",85,null],[12,"gas_limit","","The genesis block&#39;s gas limit field.",85,null],[12,"gas_used","","The genesis block&#39;s gas used field.",85,null],[12,"timestamp","","The genesis block&#39;s timestamp field.",85,null],[12,"transactions_root","","Transactions root of the genesis block. Should be SHA3_NULL_RLP.",85,null],[12,"receipts_root","","Receipts root of the genesis block. Should be SHA3_NULL_RLP.",85,null],[12,"extra_data","","The genesis block&#39;s extra data field.",85,null],[12,"seal_fields","","The number of seal fields in the genesis block.",85,null],[12,"seal_rlp","","Each seal field, expressed as RLP, concatenated.",85,null],[11,"clone","","",84,{"inputs":[{"name":"commonparams"}],"output":{"name":"commonparams"}}],[11,"eq","","",84,{"inputs":[{"name":"commonparams"},{"name":"commonparams"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"commonparams"},{"name":"commonparams"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"commonparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",84,{"inputs":[{"name":"params"}],"output":{"name":"self"}}],[11,"from","","",85,{"inputs":[{"name":"spec"}],"output":{"name":"self"}}],[11,"state_root","","Return the state root for the genesis state, memoising accordingly.",85,{"inputs":[{"name":"spec"}],"output":{"name":"h256"}}],[11,"nodes","","Get the known knodes of the network in enode format.",85,{"inputs":[{"name":"spec"}],"output":{"name":"vec"}}],[11,"network_id","","Get the configured Network ID.",85,{"inputs":[{"name":"spec"}],"output":{"name":"u256"}}],[11,"genesis_header","","Get the header of the genesis block.",85,{"inputs":[{"name":"spec"}],"output":{"name":"header"}}],[11,"genesis_block","","Compose the genesis block for this chain.",85,{"inputs":[{"name":"spec"}],"output":{"name":"bytes"}}],[11,"overwrite_genesis_params","","Overwrite the genesis components.",85,{"inputs":[{"name":"spec"},{"name":"genesis"}],"output":null}],[11,"set_genesis_state","","Alter the value of the genesis state.",85,{"inputs":[{"name":"spec"},{"name":"podstate"}],"output":null}],[11,"is_state_root_valid","","Returns `false` if the memoized state root is invalid. `true` otherwise.",85,{"inputs":[{"name":"spec"}],"output":{"name":"bool"}}],[11,"ensure_db_good","","Ensure that the given state DB has the trie nodes in for the genesis state.",85,{"inputs":[{"name":"spec"},{"name":"hashdb"}],"output":{"name":"bool"}}],[11,"load","","Loads spec from json file.",85,null],[11,"new_test","","Create a new Spec which conforms to the Frontier-era Morden chain except that it&#39;s a NullEngine consensus.",85,{"inputs":[],"output":{"name":"spec"}}],[11,"new_null","","Create a new Spec which is a NullEngine consensus with a premine of address whose secret is sha3(&#39;&#39;).",85,{"inputs":[],"output":{"name":"spec"}}],[0,"views","ethcore","Block oriented views onto rlp.",null,null],[3,"TransactionView","ethcore::views","View onto transaction rlp.",null,null],[3,"AccountView","","View onto transaction rlp.",null,null],[3,"BlockView","","View onto block rlp.",null,null],[3,"HeaderView","","View onto block header rlp.",null,null],[11,"new","","Creates new view onto block from raw bytes.",86,null],[11,"new_from_rlp","","Creates new view onto block from rlp.",86,{"inputs":[{"name":"rlp"}],"output":{"name":"transactionview"}}],[11,"rlp","","Return reference to underlaying rlp.",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"rlp"}}],[11,"nonce","","Get the nonce field of the transaction.",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"gas_price","","Get the gas_price field of the transaction.",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"gas","","Get the gas field of the transaction.",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"value","","Get the value field of the transaction.",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"data","","Get the data field of the transaction.",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"bytes"}}],[11,"v","","Get the v field of the transaction.",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"u8"}}],[11,"r","","Get the r field of the transaction.",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"s","","Get the s field of the transaction.",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"sha3","","",86,{"inputs":[{"name":"transactionview"}],"output":{"name":"h256"}}],[11,"new","","Creates new view onto block from raw bytes.",87,null],[11,"new_from_rlp","","Creates new view onto block from rlp.",87,{"inputs":[{"name":"rlp"}],"output":{"name":"accountview"}}],[11,"rlp","","Return reference to underlaying rlp.",87,{"inputs":[{"name":"accountview"}],"output":{"name":"rlp"}}],[11,"nonce","","Get the nonce field of the transaction.",87,{"inputs":[{"name":"accountview"}],"output":{"name":"u256"}}],[11,"balance","","Get the gas_price field of the transaction.",87,{"inputs":[{"name":"accountview"}],"output":{"name":"u256"}}],[11,"storage_root","","Get the gas field of the transaction.",87,{"inputs":[{"name":"accountview"}],"output":{"name":"h256"}}],[11,"code_hash","","Get the value field of the transaction.",87,{"inputs":[{"name":"accountview"}],"output":{"name":"h256"}}],[11,"new","","Creates new view onto block from raw bytes.",88,null],[11,"new_from_rlp","","Creates new view onto block from rlp.",88,{"inputs":[{"name":"rlp"}],"output":{"name":"blockview"}}],[11,"rlp","","Return reference to underlaying rlp.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"rlp"}}],[11,"header","","Create new Header object from header rlp.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"header"}}],[11,"header_view","","Create new header view obto block head rlp.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"headerview"}}],[11,"transactions","","Return List of transactions in given block.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"localized_transactions","","Return List of transactions with additional localization info.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"transactions_count","","Return number of transactions in given block, without deserializing them.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"usize"}}],[11,"transaction_views","","Return List of transactions in given block.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"transaction_hashes","","Return transaction hashes.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"transaction_at","","Returns transaction at given index without deserializing unnecessary data.",88,{"inputs":[{"name":"blockview"},{"name":"usize"}],"output":{"name":"option"}}],[11,"localized_transaction_at","","Returns localized transaction at given index.",88,{"inputs":[{"name":"blockview"},{"name":"usize"}],"output":{"name":"option"}}],[11,"uncles","","Return list of uncles of given block.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"uncles_count","","Return number of uncles in given block, without deserializing them.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"usize"}}],[11,"uncle_views","","Return List of transactions in given block.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"uncle_hashes","","Return list of uncle hashes of given block.",88,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"uncle_at","","Return nth uncle.",88,{"inputs":[{"name":"blockview"},{"name":"usize"}],"output":{"name":"option"}}],[11,"sha3","","",88,{"inputs":[{"name":"blockview"}],"output":{"name":"h256"}}],[11,"new","","Creates new view onto header from raw bytes.",89,null],[11,"new_from_rlp","","Creates new view onto header from rlp.",89,{"inputs":[{"name":"rlp"}],"output":{"name":"headerview"}}],[11,"hash","","Returns header hash.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"rlp","","Returns raw rlp.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"rlp"}}],[11,"parent_hash","","Returns parent hash.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"uncles_hash","","Returns uncles hash.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"author","","Returns author.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"address"}}],[11,"state_root","","Returns state root.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"transactions_root","","Returns transactions root.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"receipts_root","","Returns block receipts root.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"log_bloom","","Returns block log bloom.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"h2048"}}],[11,"difficulty","","Returns block difficulty.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"u256"}}],[11,"number","","Returns block number.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"blocknumber"}}],[11,"gas_limit","","Returns block gas limit.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"u256"}}],[11,"gas_used","","Returns block gas used.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"u256"}}],[11,"timestamp","","Returns timestamp.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"u64"}}],[11,"extra_data","","Returns block extra data.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"bytes"}}],[11,"seal","","Returns a vector of post-RLP-encoded seal fields.",89,{"inputs":[{"name":"headerview"}],"output":{"name":"vec"}}],[11,"sha3","","",89,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[0,"pod_state","ethcore","State of all accounts in the system expressed in Plain Old Data.",null,null],[3,"PodState","ethcore::pod_state","State of all accounts in the system expressed in Plain Old Data.",null,null],[5,"diff_pod","","Calculate and return diff between `pre` state and `post` state.",null,{"inputs":[{"name":"podstate"},{"name":"podstate"}],"output":{"name":"statediff"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"podstate"}}],[11,"eq","","",90,{"inputs":[{"name":"podstate"},{"name":"podstate"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"podstate"},{"name":"podstate"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"podstate"}],"output":{"name":"podstate"}}],[11,"fmt","","",90,{"inputs":[{"name":"podstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Contruct a new object from the `m`.",90,{"inputs":[],"output":{"name":"podstate"}}],[11,"from","","Contruct a new object from the `m`.",90,{"inputs":[{"name":"btreemap"}],"output":{"name":"podstate"}}],[11,"get","","Get the underlying map.",90,{"inputs":[{"name":"podstate"}],"output":{"name":"btreemap"}}],[11,"root","","Get the root hash of the trie of the RLP of this.",90,{"inputs":[{"name":"podstate"}],"output":{"name":"h256"}}],[11,"drain","","Drain object to get the underlying map.",90,{"inputs":[{"name":"podstate"}],"output":{"name":"btreemap"}}],[11,"from","","",90,{"inputs":[{"name":"state"}],"output":{"name":"podstate"}}],[11,"from","","",90,{"inputs":[{"name":"state"}],"output":{"name":"podstate"}}],[11,"fmt","","",90,{"inputs":[{"name":"podstate"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"engine","ethcore","Consensus engine specification",null,null],[8,"Engine","ethcore::engine","A consensus mechanism for the chain. Generally either proof-of-work or proof-of-stake-based.\nProvides hooks into each of the major parts of block import.",null,null],[10,"name","","The name of this engine.",91,{"inputs":[{"name":"engine"}],"output":{"name":"str"}}],[11,"version","","The version of this engine. Should be of the form",91,{"inputs":[{"name":"engine"}],"output":{"name":"semanticversion"}}],[11,"seal_fields","","The number of additional header fields required for this engine.",91,{"inputs":[{"name":"engine"}],"output":{"name":"usize"}}],[11,"extra_info","","Additional engine-specific information for the user/developer concerning `header`.",91,{"inputs":[{"name":"engine"},{"name":"header"}],"output":{"name":"hashmap"}}],[10,"params","","Get the general parameters of the chain.",91,{"inputs":[{"name":"engine"}],"output":{"name":"commonparams"}}],[10,"schedule","","Get the EVM schedule for the given `env_info`.",91,{"inputs":[{"name":"engine"},{"name":"envinfo"}],"output":{"name":"schedule"}}],[10,"builtins","","Builtin-contracts we would like to see in the chain.\n(In principle these are just hints for the engine since that has the last word on them.)",91,{"inputs":[{"name":"engine"}],"output":{"name":"btreemap"}}],[11,"maximum_extra_data_size","","Some intrinsic operation parameters; by default they take their value from the `spec()`&#39;s `engine_params`.",91,{"inputs":[{"name":"engine"}],"output":{"name":"usize"}}],[11,"maximum_uncle_count","","Maximum number of uncles a block is allowed to declare.",91,{"inputs":[{"name":"engine"}],"output":{"name":"usize"}}],[11,"maximum_uncle_age","","The number of generations back that uncles can be.",91,{"inputs":[{"name":"engine"}],"output":{"name":"usize"}}],[11,"account_start_nonce","","The nonce with which accounts begin.",91,{"inputs":[{"name":"engine"}],"output":{"name":"u256"}}],[11,"on_new_block","","Block transformation functions, before the transactions.",91,{"inputs":[{"name":"engine"},{"name":"executedblock"}],"output":null}],[11,"on_close_block","","Block transformation functions, after the transactions.",91,{"inputs":[{"name":"engine"},{"name":"executedblock"}],"output":null}],[11,"generate_seal","","Attempt to seal the block internally.",91,{"inputs":[{"name":"engine"},{"name":"executedblock"},{"name":"option"}],"output":{"name":"option"}}],[11,"verify_block_basic","","Phase 1 quick block verification. Only does checks that are cheap. `block` (the header&#39;s full block)\nmay be provided for additional checks. Returns either a null `Ok` or a general error detailing the problem with import.",91,{"inputs":[{"name":"engine"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_unordered","","Phase 2 verification. Perform costly checks such as transaction signatures. `block` (the header&#39;s full block)\nmay be provided for additional checks. Returns either a null `Ok` or a general error detailing the problem with import.",91,{"inputs":[{"name":"engine"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_family","","Phase 3 verification. Check block information against parent and uncles. `block` (the header&#39;s full block)\nmay be provided for additional checks. Returns either a null `Ok` or a general error detailing the problem with import.",91,{"inputs":[{"name":"engine"},{"name":"header"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_transaction_basic","","Additional verification for transactions in blocks.",91,{"inputs":[{"name":"engine"},{"name":"signedtransaction"},{"name":"header"}],"output":{"name":"result"}}],[11,"verify_transaction","","Verify a particular transaction is valid.",91,{"inputs":[{"name":"engine"},{"name":"signedtransaction"},{"name":"header"}],"output":{"name":"result"}}],[11,"verify_block_seal","","Verify the seal of a block. This is an auxilliary method that actually just calls other `verify_` methods\nto get the job done. By default it must pass `verify_basic` and `verify_block_unordered`. If more or fewer\nmethods are needed for an Engine, this may be overridden.",91,{"inputs":[{"name":"engine"},{"name":"header"}],"output":{"name":"result"}}],[11,"populate_from_parent","","Don&#39;t forget to call Super::populate_from_parent when subclassing &amp; overriding.",91,{"inputs":[{"name":"engine"},{"name":"header"},{"name":"header"},{"name":"u256"},{"name":"u256"}],"output":null}],[11,"is_builtin","","Determine whether a particular address is a builtin contract.",91,{"inputs":[{"name":"engine"},{"name":"address"}],"output":{"name":"bool"}}],[11,"cost_of_builtin","","Determine the code execution cost of the builtin contract with address `a`.\nPanics if `is_builtin(a)` is not true.",91,null],[11,"execute_builtin","","Execution the builtin contract `a` on `input` and return `output`.\nPanics if `is_builtin(a)` is not true.",91,null],[0,"migrations","ethcore","Database migrations.",null,null],[0,"extras","ethcore::migrations","Extras database migrations.",null,null],[3,"ToV6","ethcore::migrations::extras","This migration reduces the sizes of keys and moves `ExtrasIndex` byte from back to the front.",null,null],[11,"version","","",92,{"inputs":[{"name":"tov6"}],"output":{"name":"u32"}}],[11,"simple_migrate","","",92,{"inputs":[{"name":"tov6"},{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[0,"miner","ethcore","Miner module\nKeeps track of transactions and mined block.",null,null],[3,"TransactionQueue","ethcore::miner","`TransactionQueue` implementation",null,null],[3,"AccountDetails","","Details of account",null,null],[12,"nonce","","Most recent account nonce",93,null],[12,"balance","","Current account balance",93,null],[3,"Miner","","Keeps track of transactions using priority queue and holds currently mined block.",null,null],[3,"ExternalMiner","","External Miner.",null,null],[3,"MinerStatus","","Mining status",null,null],[12,"transactions_in_pending_queue","","Number of transactions in queue with state `pending` (ready to be included in block)",94,null],[12,"transactions_in_future_queue","","Number of transactions in queue with state `future` (not yet ready to be included in block)",94,null],[12,"transactions_in_pending_block","","Number of transactions included in currently mined block",94,null],[4,"TransactionImportResult","","Represents the result of importing transaction.",null,null],[13,"Current","","Transaction was imported to current queue.",95,null],[13,"Future","","Transaction was imported to future queue.",95,null],[4,"TransactionOrigin","","Transaction origin",null,null],[13,"Local","","Transaction coming from local RPC",96,null],[13,"External","","External transaction received from network",96,null],[11,"default","","",97,{"inputs":[],"output":{"name":"miner"}}],[11,"new","","Creates new instance of miner",97,{"inputs":[{"name":"bool"},{"name":"spec"}],"output":{"name":"arc"}}],[11,"with_accounts","","Creates new instance of miner",97,{"inputs":[{"name":"bool"},{"name":"spec"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"clear_and_reset","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"}],"output":null}],[11,"status","","",97,{"inputs":[{"name":"miner"}],"output":{"name":"minerstatus"}}],[11,"call","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"},{"name":"signedtransaction"},{"name":"callanalytics"}],"output":{"name":"result"}}],[11,"balance","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"},{"name":"address"}],"output":{"name":"u256"}}],[11,"storage_at","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"},{"name":"address"},{"name":"h256"}],"output":{"name":"h256"}}],[11,"nonce","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"},{"name":"address"}],"output":{"name":"u256"}}],[11,"code","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"},{"name":"address"}],"output":{"name":"option"}}],[11,"set_author","","",97,{"inputs":[{"name":"miner"},{"name":"address"}],"output":null}],[11,"set_extra_data","","",97,{"inputs":[{"name":"miner"},{"name":"bytes"}],"output":null}],[11,"set_gas_floor_target","","Set the gas limit we wish to target when sealing a new block.",97,{"inputs":[{"name":"miner"},{"name":"u256"}],"output":null}],[11,"set_gas_ceil_target","","",97,{"inputs":[{"name":"miner"},{"name":"u256"}],"output":null}],[11,"set_minimal_gas_price","","",97,{"inputs":[{"name":"miner"},{"name":"u256"}],"output":null}],[11,"minimal_gas_price","","",97,{"inputs":[{"name":"miner"}],"output":{"name":"u256"}}],[11,"sensible_gas_price","","",97,{"inputs":[{"name":"miner"}],"output":{"name":"u256"}}],[11,"sensible_gas_limit","","",97,{"inputs":[{"name":"miner"}],"output":{"name":"u256"}}],[11,"transactions_limit","","",97,{"inputs":[{"name":"miner"}],"output":{"name":"usize"}}],[11,"set_transactions_limit","","",97,{"inputs":[{"name":"miner"},{"name":"usize"}],"output":null}],[11,"author","","Get the author that we will seal blocks as.",97,{"inputs":[{"name":"miner"}],"output":{"name":"address"}}],[11,"extra_data","","Get the extra_data that we will seal blocks with.",97,{"inputs":[{"name":"miner"}],"output":{"name":"bytes"}}],[11,"gas_floor_target","","Get the gas limit we wish to target when sealing a new block.",97,{"inputs":[{"name":"miner"}],"output":{"name":"u256"}}],[11,"gas_ceil_target","","Get the gas limit we wish to target when sealing a new block.",97,{"inputs":[{"name":"miner"}],"output":{"name":"u256"}}],[11,"import_transactions","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"},{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[11,"import_own_transaction","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"},{"name":"signedtransaction"},{"name":"t"}],"output":{"name":"result"}}],[11,"pending_transactions_hashes","","",97,{"inputs":[{"name":"miner"}],"output":{"name":"vec"}}],[11,"transaction","","",97,{"inputs":[{"name":"miner"},{"name":"h256"}],"output":{"name":"option"}}],[11,"all_transactions","","",97,{"inputs":[{"name":"miner"}],"output":{"name":"vec"}}],[11,"pending_transactions","","",97,{"inputs":[{"name":"miner"}],"output":{"name":"vec"}}],[11,"pending_receipts","","",97,{"inputs":[{"name":"miner"}],"output":{"name":"btreemap"}}],[11,"last_nonce","","",97,{"inputs":[{"name":"miner"},{"name":"address"}],"output":{"name":"option"}}],[11,"update_sealing","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"}],"output":null}],[11,"map_sealing_work","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"},{"name":"f"}],"output":{"name":"option"}}],[11,"submit_seal","","",97,{"inputs":[{"name":"miner"},{"name":"miningblockchainclient"},{"name":"h256"},{"name":"vec"}],"output":{"name":"result"}}],[11,"chain_new_blocks","","",97,null],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new external miner with prefilled hashrates.",98,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[11,"submit_hashrate","","",98,{"inputs":[{"name":"externalminer"},{"name":"u256"},{"name":"h256"}],"output":null}],[11,"hashrate","","",98,{"inputs":[{"name":"externalminer"}],"output":{"name":"u256"}}],[11,"is_mining","","",98,{"inputs":[{"name":"externalminer"}],"output":{"name":"bool"}}],[11,"eq","","",96,{"inputs":[{"name":"transactionorigin"},{"name":"transactionorigin"}],"output":{"name":"bool"}}],[11,"fmt","","",96,{"inputs":[{"name":"transactionorigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"transactionorigin"}],"output":{"name":"transactionorigin"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"transactionorigin"},{"name":"transactionorigin"}],"output":{"name":"option"}}],[11,"cmp","","",96,{"inputs":[{"name":"transactionorigin"},{"name":"transactionorigin"}],"output":{"name":"ordering"}}],[11,"eq","","",95,{"inputs":[{"name":"transactionimportresult"},{"name":"transactionimportresult"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"transactionimportresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new instance of this Queue",99,{"inputs":[],"output":{"name":"self"}}],[11,"with_limit","","Create new instance of this Queue with specified limits",99,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"set_limit","","Set the new limit for `current` and `future` queue.",99,{"inputs":[{"name":"transactionqueue"},{"name":"usize"}],"output":null}],[11,"limit","","Returns current limit of transactions in the queue.",99,{"inputs":[{"name":"transactionqueue"}],"output":{"name":"usize"}}],[11,"minimal_gas_price","","Get the minimal gas price.",99,{"inputs":[{"name":"transactionqueue"}],"output":{"name":"u256"}}],[11,"set_minimal_gas_price","","Sets new gas price threshold for incoming transactions.\nAny transaction already imported to the queue is not affected.",99,{"inputs":[{"name":"transactionqueue"},{"name":"u256"}],"output":null}],[11,"set_gas_limit","","Sets new gas limit. Transactions with gas slightly (`GAS_LIMIT_HYSTERESIS`) above the limit won&#39;t be imported.\nAny transaction already imported to the queue is not affected.",99,{"inputs":[{"name":"transactionqueue"},{"name":"u256"}],"output":null}],[11,"status","","Returns current status for this queue",99,{"inputs":[{"name":"transactionqueue"}],"output":{"name":"transactionqueuestatus"}}],[11,"add","","Add signed transaction to queue to be verified and imported",99,{"inputs":[{"name":"transactionqueue"},{"name":"signedtransaction"},{"name":"t"},{"name":"transactionorigin"}],"output":{"name":"result"}}],[11,"remove_all","","Removes all transactions from particular sender up to (excluding) given client (state) nonce.\nClient (State) Nonce = next valid nonce for this sender.",99,{"inputs":[{"name":"transactionqueue"},{"name":"address"},{"name":"u256"}],"output":null}],[11,"remove_invalid","","Removes invalid transaction identified by hash from queue.\nAssumption is that this transaction nonce is not related to client nonce,\nso transactions left in queue are processed according to client nonce.",99,{"inputs":[{"name":"transactionqueue"},{"name":"h256"},{"name":"t"}],"output":null}],[11,"top_transactions","","Returns top transactions from the queue ordered by priority.",99,{"inputs":[{"name":"transactionqueue"}],"output":{"name":"vec"}}],[11,"pending_hashes","","Returns hashes of all transactions from current, ordered by priority.",99,{"inputs":[{"name":"transactionqueue"}],"output":{"name":"vec"}}],[11,"has_local_pending_transactions","","Returns true if there is at least one local transaction pending",99,{"inputs":[{"name":"transactionqueue"}],"output":{"name":"bool"}}],[11,"find","","Finds transaction in the queue by hash (if any)",99,{"inputs":[{"name":"transactionqueue"},{"name":"h256"}],"output":{"name":"option"}}],[11,"clear","","Removes all elements (in any state) from the queue",99,{"inputs":[{"name":"transactionqueue"}],"output":null}],[11,"last_nonce","","Returns highest transaction nonce for given address.",99,{"inputs":[{"name":"transactionqueue"},{"name":"address"}],"output":{"name":"option"}}],[8,"ExternalMinerService","","External miner interface.",null,null],[10,"submit_hashrate","","Submit hashrate for given miner.",100,{"inputs":[{"name":"externalminerservice"},{"name":"u256"},{"name":"h256"}],"output":null}],[10,"hashrate","","Total hashrate.",100,{"inputs":[{"name":"externalminerservice"}],"output":{"name":"u256"}}],[10,"is_mining","","Returns true if external miner is mining.",100,{"inputs":[{"name":"externalminerservice"}],"output":{"name":"bool"}}],[8,"MinerService","","Miner client API",null,null],[10,"status","","Returns miner&#39;s status.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"minerstatus"}}],[10,"author","","Get the author that we will seal blocks as.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"address"}}],[10,"set_author","","Set the author that we will seal blocks as.",101,{"inputs":[{"name":"minerservice"},{"name":"address"}],"output":null}],[10,"extra_data","","Get the extra_data that we will seal blocks with.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"bytes"}}],[10,"set_extra_data","","Set the extra_data that we will seal blocks with.",101,{"inputs":[{"name":"minerservice"},{"name":"bytes"}],"output":null}],[10,"minimal_gas_price","","Get current minimal gas price for transactions accepted to queue.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"u256"}}],[10,"set_minimal_gas_price","","Set minimal gas price of transaction to be accepted for mining.",101,{"inputs":[{"name":"minerservice"},{"name":"u256"}],"output":null}],[10,"gas_floor_target","","Get the lower bound of the gas limit we wish to target when sealing a new block.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"u256"}}],[10,"gas_ceil_target","","Get the upper bound of the gas limit we wish to target when sealing a new block.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"u256"}}],[10,"set_gas_floor_target","","Set the lower bound of gas limit we wish to target when sealing a new block.",101,{"inputs":[{"name":"minerservice"},{"name":"u256"}],"output":null}],[10,"set_gas_ceil_target","","Set the upper bound of gas limit we wish to target when sealing a new block.",101,{"inputs":[{"name":"minerservice"},{"name":"u256"}],"output":null}],[10,"transactions_limit","","Get current transactions limit in queue.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"usize"}}],[10,"set_transactions_limit","","Set maximal number of transactions kept in the queue (both current and future).",101,{"inputs":[{"name":"minerservice"},{"name":"usize"}],"output":null}],[10,"import_transactions","","Imports transactions to transaction queue.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"},{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[10,"import_own_transaction","","Imports own (node owner) transaction to queue.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"},{"name":"signedtransaction"},{"name":"t"}],"output":{"name":"result"}}],[10,"pending_transactions_hashes","","Returns hashes of transactions currently in pending",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"vec"}}],[10,"clear_and_reset","","Removes all transactions from the queue and restart mining operation.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"}],"output":null}],[10,"chain_new_blocks","","Called when blocks are imported to chain, updates transactions queue.",101,null],[10,"update_sealing","","New chain head event. Restart mining operation.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"}],"output":null}],[10,"submit_seal","","Submit `seal` as a valid solution for the header of `pow_hash`.\nWill check the seal, but not actually insert the block into the chain.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"},{"name":"h256"},{"name":"vec"}],"output":{"name":"result"}}],[10,"map_sealing_work","","Get the sealing work package and if `Some`, apply some transform.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"},{"name":"f"}],"output":{"name":"option"}}],[10,"transaction","","Query pending transactions for hash.",101,{"inputs":[{"name":"minerservice"},{"name":"h256"}],"output":{"name":"option"}}],[10,"all_transactions","","Get a list of all transactions.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"vec"}}],[10,"pending_transactions","","Get a list of all pending transactions.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"vec"}}],[10,"pending_receipts","","Get a list of all pending receipts.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"btreemap"}}],[10,"last_nonce","","Returns highest transaction nonce for given address.",101,{"inputs":[{"name":"minerservice"},{"name":"address"}],"output":{"name":"option"}}],[11,"sensible_gas_price","","Suggested gas price.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"u256"}}],[11,"sensible_gas_limit","","Suggested gas limit.",101,{"inputs":[{"name":"minerservice"}],"output":{"name":"u256"}}],[10,"balance","","Latest account balance in pending state.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"},{"name":"address"}],"output":{"name":"u256"}}],[10,"call","","Call into contract code using pending state.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"},{"name":"signedtransaction"},{"name":"callanalytics"}],"output":{"name":"result"}}],[10,"storage_at","","Get storage value in pending state.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"},{"name":"address"},{"name":"h256"}],"output":{"name":"h256"}}],[10,"nonce","","Get account nonce in pending state.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"},{"name":"address"}],"output":{"name":"u256"}}],[10,"code","","Get contract code in pending state.",101,{"inputs":[{"name":"minerservice"},{"name":"miningblockchainclient"},{"name":"address"}],"output":{"name":"option"}}],[11,"fmt","","",94,{"inputs":[{"name":"minerstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","ethcore::client","",34,{"inputs":[{"name":"vmtype"}],"output":{"name":"vmtype"}}],[11,"fmt","","",34,{"inputs":[{"name":"vmtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"vmtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"all","","Return all possible VMs (Interpreter)",34,{"inputs":[],"output":{"name":"vec"}}],[11,"jit","","Return new jit if it&#39;s possible",34,{"inputs":[],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"envinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"env"}],"output":{"name":"self"}}],[11,"new","","Basic constructor.",102,{"inputs":[{"name":"state"},{"name":"envinfo"},{"name":"engine"},{"name":"factory"}],"output":{"name":"self"}}],[11,"from_parent","","Populates executive from parent properties. Increments executive depth.",102,{"inputs":[{"name":"state"},{"name":"envinfo"},{"name":"engine"},{"name":"factory"},{"name":"usize"}],"output":{"name":"self"}}],[11,"as_externalities","","Creates `Externalities` from `Executive`.",102,{"inputs":[{"name":"executive"},{"name":"origininfo"},{"name":"substate"},{"name":"outputpolicy"},{"name":"t"},{"name":"v"}],"output":{"name":"externalities"}}],[11,"transact","","This function should be used to execute transaction.",102,{"inputs":[{"name":"executive"},{"name":"signedtransaction"},{"name":"transactoptions"}],"output":{"name":"result"}}],[11,"transact_with_tracer","","Execute transaction/call with tracing enabled",102,{"inputs":[{"name":"executive"},{"name":"signedtransaction"},{"name":"bool"},{"name":"t"},{"name":"v"}],"output":{"name":"result"}}],[11,"call","","Calls contract function with given contract params.\nNOTE. It does not finalize the transaction (doesn&#39;t do refunds, nor suicides).\nModifies the substate and the output.\nReturns either gas_left or `evm::Error`.",102,{"inputs":[{"name":"executive"},{"name":"actionparams"},{"name":"substate"},{"name":"bytesref"},{"name":"t"},{"name":"v"}],"output":{"name":"result"}}],[11,"create","","Creates contract with given contract params.\nNOTE. It does not finalize the transaction (doesn&#39;t do refunds, nor suicides).\nModifies the substate.",102,{"inputs":[{"name":"executive"},{"name":"actionparams"},{"name":"substate"},{"name":"t"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"blockchaincachesize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"total","","Total amount used by the cache.",19,{"inputs":[{"name":"blockchaincachesize"}],"output":{"name":"usize"}}],[11,"fmt","","",23,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"blockid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"blockid"},{"name":"blockid"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"blockid"},{"name":"blockid"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"blockid"}],"output":{"name":"blockid"}}],[11,"hash","","",36,null],[11,"size","","",36,{"inputs":[{"name":"blockid"}],"output":{"name":"usize"}}],[11,"to_bytes","","",36,null],[11,"from_bytes","","",36,null],[11,"len_params","","",36,{"inputs":[],"output":{"name":"usize"}}],[11,"fmt","","",37,{"inputs":[{"name":"transactionid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"transactionid"},{"name":"transactionid"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"transactionid"},{"name":"transactionid"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"transactionid"}],"output":{"name":"transactionid"}}],[11,"hash","","",37,null],[11,"size","","",37,{"inputs":[{"name":"transactionid"}],"output":{"name":"usize"}}],[11,"to_bytes","","",37,null],[11,"from_bytes","","",37,null],[11,"len_params","","",37,{"inputs":[],"output":{"name":"usize"}}],[11,"fmt","","",25,{"inputs":[{"name":"uncleid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"blockchaininfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size","","",20,{"inputs":[{"name":"blockchaininfo"}],"output":{"name":"usize"}}],[11,"to_bytes","","",20,null],[11,"from_bytes","","",20,null],[11,"len_params","","",20,{"inputs":[],"output":{"name":"usize"}}],[11,"size","ethcore::trace","",103,{"inputs":[{"name":"addressesfilter"}],"output":{"name":"usize"}}],[11,"to_bytes","","",103,null],[11,"from_bytes","","",103,null],[11,"len_params","","",103,{"inputs":[],"output":{"name":"usize"}}],[11,"from","","",103,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"matches","","Returns true if address matches one of the searched addresses.",103,{"inputs":[{"name":"addressesfilter"},{"name":"address"}],"output":{"name":"bool"}}],[11,"matches_all","","Returns true if this address filter matches everything.",103,{"inputs":[{"name":"addressesfilter"}],"output":{"name":"bool"}}],[11,"blooms","","Returns blooms of this addresses filter.",103,{"inputs":[{"name":"addressesfilter"}],"output":{"name":"vec"}}],[11,"with_blooms","","Returns vector of blooms zipped with blooms of this addresses filter.",103,{"inputs":[{"name":"addressesfilter"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"size","","",60,{"inputs":[{"name":"filter"}],"output":{"name":"usize"}}],[11,"to_bytes","","",60,null],[11,"from_bytes","","",60,null],[11,"len_params","","",60,{"inputs":[],"output":{"name":"usize"}}],[11,"bloom_possibilities","","",60,{"inputs":[{"name":"filter"}],"output":{"name":"vec"}}],[11,"range","","",60,{"inputs":[{"name":"filter"}],"output":{"name":"range"}}],[11,"matches","","Returns true if given trace matches the filter.",60,{"inputs":[{"name":"filter"},{"name":"flattrace"}],"output":{"name":"bool"}}],[11,"fmt","ethcore::trace::trace","",73,{"inputs":[{"name":"callresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"callresult"}],"output":{"name":"callresult"}}],[11,"eq","","",73,{"inputs":[{"name":"callresult"},{"name":"callresult"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"callresult"},{"name":"callresult"}],"output":{"name":"bool"}}],[11,"default","","",73,{"inputs":[],"output":{"name":"callresult"}}],[11,"size","","",73,{"inputs":[{"name":"callresult"}],"output":{"name":"usize"}}],[11,"to_bytes","","",73,null],[11,"from_bytes","","",73,null],[11,"len_params","","",73,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",73,{"inputs":[{"name":"callresult"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",73,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"createresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"createresult"}],"output":{"name":"createresult"}}],[11,"eq","","",74,{"inputs":[{"name":"createresult"},{"name":"createresult"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"createresult"},{"name":"createresult"}],"output":{"name":"bool"}}],[11,"size","","",74,{"inputs":[{"name":"createresult"}],"output":{"name":"usize"}}],[11,"to_bytes","","",74,null],[11,"from_bytes","","",74,null],[11,"len_params","","",74,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",74,{"inputs":[{"name":"createresult"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",74,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"call"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"call"}],"output":{"name":"call"}}],[11,"eq","","",75,{"inputs":[{"name":"call"},{"name":"call"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"call"},{"name":"call"}],"output":{"name":"bool"}}],[11,"size","","",75,{"inputs":[{"name":"call"}],"output":{"name":"usize"}}],[11,"to_bytes","","",75,null],[11,"from_bytes","","",75,null],[11,"len_params","","",75,{"inputs":[],"output":{"name":"usize"}}],[11,"from","","",75,{"inputs":[{"name":"actionparams"}],"output":{"name":"self"}}],[11,"rlp_append","","",75,{"inputs":[{"name":"call"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",75,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"bloom","","Returns call action bloom.\nThe bloom contains from and to addresses.",75,{"inputs":[{"name":"call"}],"output":{"name":"logbloom"}}],[11,"fmt","","",76,{"inputs":[{"name":"create"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"create"}],"output":{"name":"create"}}],[11,"eq","","",76,{"inputs":[{"name":"create"},{"name":"create"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"create"},{"name":"create"}],"output":{"name":"bool"}}],[11,"size","","",76,{"inputs":[{"name":"create"}],"output":{"name":"usize"}}],[11,"to_bytes","","",76,null],[11,"from_bytes","","",76,null],[11,"len_params","","",76,{"inputs":[],"output":{"name":"usize"}}],[11,"from","","",76,{"inputs":[{"name":"actionparams"}],"output":{"name":"self"}}],[11,"rlp_append","","",76,{"inputs":[{"name":"create"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",76,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"bloom","","Returns bloom create action bloom.\nThe bloom contains only from address.",76,{"inputs":[{"name":"create"}],"output":{"name":"logbloom"}}],[11,"fmt","","",77,{"inputs":[{"name":"action"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"action"}],"output":{"name":"action"}}],[11,"eq","","",77,{"inputs":[{"name":"action"},{"name":"action"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"action"},{"name":"action"}],"output":{"name":"bool"}}],[11,"size","","",77,{"inputs":[{"name":"action"}],"output":{"name":"usize"}}],[11,"to_bytes","","",77,null],[11,"from_bytes","","",77,null],[11,"len_params","","",77,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",77,{"inputs":[{"name":"action"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",77,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"bloom","","Returns action bloom.",77,{"inputs":[{"name":"action"}],"output":{"name":"logbloom"}}],[11,"fmt","","",78,{"inputs":[{"name":"res"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"res"}],"output":{"name":"res"}}],[11,"eq","","",78,{"inputs":[{"name":"res"},{"name":"res"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"res"},{"name":"res"}],"output":{"name":"bool"}}],[11,"size","","",78,{"inputs":[{"name":"res"}],"output":{"name":"usize"}}],[11,"to_bytes","","",78,null],[11,"from_bytes","","",78,null],[11,"len_params","","",78,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",78,{"inputs":[{"name":"res"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",78,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","ethcore::trace","",54,{"inputs":[{"name":"trace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"trace"}],"output":{"name":"trace"}}],[11,"eq","","",54,{"inputs":[{"name":"trace"},{"name":"trace"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"trace"},{"name":"trace"}],"output":{"name":"bool"}}],[11,"size","","",54,{"inputs":[{"name":"trace"}],"output":{"name":"usize"}}],[11,"to_bytes","","",54,null],[11,"from_bytes","","",54,null],[11,"len_params","","",54,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",54,{"inputs":[{"name":"trace"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",54,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"bloom","","Returns trace bloom.",54,{"inputs":[{"name":"trace"}],"output":{"name":"logbloom"}}],[11,"fmt","","",58,{"inputs":[{"name":"memorydiff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"memorydiff"}],"output":{"name":"memorydiff"}}],[11,"eq","","",58,{"inputs":[{"name":"memorydiff"},{"name":"memorydiff"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"memorydiff"},{"name":"memorydiff"}],"output":{"name":"bool"}}],[11,"size","","",58,{"inputs":[{"name":"memorydiff"}],"output":{"name":"usize"}}],[11,"to_bytes","","",58,null],[11,"from_bytes","","",58,null],[11,"len_params","","",58,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",58,{"inputs":[{"name":"memorydiff"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",58,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"storagediff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"storagediff"}],"output":{"name":"storagediff"}}],[11,"eq","","",59,{"inputs":[{"name":"storagediff"},{"name":"storagediff"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"storagediff"},{"name":"storagediff"}],"output":{"name":"bool"}}],[11,"size","","",59,{"inputs":[{"name":"storagediff"}],"output":{"name":"usize"}}],[11,"to_bytes","","",59,null],[11,"from_bytes","","",59,null],[11,"len_params","","",59,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",59,{"inputs":[{"name":"storagediff"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"vmexecutedoperation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"vmexecutedoperation"}],"output":{"name":"vmexecutedoperation"}}],[11,"eq","","",57,{"inputs":[{"name":"vmexecutedoperation"},{"name":"vmexecutedoperation"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"vmexecutedoperation"},{"name":"vmexecutedoperation"}],"output":{"name":"bool"}}],[11,"size","","",57,{"inputs":[{"name":"vmexecutedoperation"}],"output":{"name":"usize"}}],[11,"to_bytes","","",57,null],[11,"from_bytes","","",57,null],[11,"len_params","","",57,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",57,{"inputs":[{"name":"vmexecutedoperation"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",57,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"vmoperation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"vmoperation"}],"output":{"name":"vmoperation"}}],[11,"eq","","",56,{"inputs":[{"name":"vmoperation"},{"name":"vmoperation"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"vmoperation"},{"name":"vmoperation"}],"output":{"name":"bool"}}],[11,"size","","",56,{"inputs":[{"name":"vmoperation"}],"output":{"name":"usize"}}],[11,"to_bytes","","",56,null],[11,"from_bytes","","",56,null],[11,"len_params","","",56,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",56,{"inputs":[{"name":"vmoperation"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",56,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"vmtrace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"vmtrace"}],"output":{"name":"vmtrace"}}],[11,"eq","","",55,{"inputs":[{"name":"vmtrace"},{"name":"vmtrace"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"vmtrace"},{"name":"vmtrace"}],"output":{"name":"bool"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"vmtrace"}}],[11,"size","","",55,{"inputs":[{"name":"vmtrace"}],"output":{"name":"usize"}}],[11,"to_bytes","","",55,null],[11,"from_bytes","","",55,null],[11,"len_params","","",55,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",55,{"inputs":[{"name":"vmtrace"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",55,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"localizedtrace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"localizedtrace"},{"name":"localizedtrace"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"localizedtrace"},{"name":"localizedtrace"}],"output":{"name":"bool"}}],[11,"size","","",62,{"inputs":[{"name":"localizedtrace"}],"output":{"name":"usize"}}],[11,"to_bytes","","",62,null],[11,"from_bytes","","",62,null],[11,"len_params","","",62,{"inputs":[],"output":{"name":"usize"}}],[11,"fmt","ethcore::client","",28,{"inputs":[{"name":"executed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"executed"},{"name":"executed"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"executed"},{"name":"executed"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"executed"}],"output":{"name":"executed"}}],[11,"eq","ethcore::error","",42,{"inputs":[{"name":"executionerror"},{"name":"executionerror"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"executionerror"},{"name":"executionerror"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"executionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size","","",42,{"inputs":[{"name":"executionerror"}],"output":{"name":"usize"}}],[11,"to_bytes","","",42,null],[11,"from_bytes","","",42,null],[11,"len_params","","",42,{"inputs":[],"output":{"name":"usize"}}],[11,"fmt","","",42,{"inputs":[{"name":"executionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","ethcore::client","",32,{"inputs":[{"name":"blockstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"blockstatus"},{"name":"blockstatus"}],"output":{"name":"bool"}}],[11,"size","","",32,{"inputs":[{"name":"blockstatus"}],"output":{"name":"usize"}}],[11,"to_bytes","","",32,null],[11,"from_bytes","","",32,null],[11,"len_params","","",32,{"inputs":[],"output":{"name":"usize"}}],[11,"new","collections::btree::map","Makes a new empty BTreeMap with a reasonable choice for B.",104,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",104,null],[11,"get","","Returns a reference to the value corresponding to the key.",104,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",104,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",104,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",104,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",104,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",104,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",104,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",104,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",104,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",104,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",104,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",104,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",104,{"inputs":[{"name":"btreemap"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",104,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",104,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"index","","",104,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"fmt","","",104,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",104,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"eq","","",104,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"btreemap"}}],[11,"hash","","",104,null],[11,"extend","","",104,null],[11,"extend","","",104,null],[11,"from_iter","","",104,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"into_iter","","",104,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"clone","","",104,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"drop","","",104,null],[0,"transaction","ethcore","Transaction data structure.",null,null],[3,"Transaction","ethcore::transaction","A set of information describing an externally-originating message call\nor contract creation operation.",null,null],[12,"nonce","","Nonce.",105,null],[12,"gas_price","","Gas price.",105,null],[12,"gas","","Gas paid up front for transaction execution.",105,null],[12,"action","","Action, can be either call or contract create.",105,null],[12,"value","","Transfered value.",105,null],[12,"data","","Transaction data.",105,null],[3,"SignedTransaction","","Signed transaction information.",null,null],[3,"LocalizedTransaction","","Signed Transaction that is a part of canon blockchain.",null,null],[12,"signed","","Signed part.",106,null],[12,"block_number","","Block number.",106,null],[12,"block_hash","","Block hash.",106,null],[12,"transaction_index","","Transaction index within block.",106,null],[4,"Action","","Transaction action type.",null,null],[13,"Create","","Create creates new contract.",107,null],[13,"Call","","Calls contract at given address.\nIn the case of a transfer, this is the receiver&#39;s address.&#39;",107,null],[0,"ids","ethcore","Unique identifiers.",null,null],[3,"TraceId","ethcore::ids","Uniquely identifies Trace.",null,null],[12,"transaction","","Transaction",24,null],[12,"address","","Trace address within transaction.",24,null],[3,"UncleID","","Uniquely identifies Uncle.",null,null],[12,"0","","",25,null],[12,"1","","",25,null],[4,"BlockID","","Uniquely identifies block.",null,null],[13,"Hash","","Block&#39;s sha3.\nQuerying by hash is always faster.",36,null],[13,"Number","","Block number within canon blockchain.",36,null],[13,"Earliest","","Earliest block (genesis).",36,null],[13,"Latest","","Latest mined block.",36,null],[4,"TransactionID","","Uniquely identifies transaction.",null,null],[13,"Hash","","Transaction&#39;s sha3.",37,null],[13,"Location","","Block id and transaction index within this block.\nQuerying by block position is always faster.",37,null],[0,"receipt","ethcore","Receipt",null,null],[3,"Receipt","ethcore::receipt","Information describing execution of a transaction.",null,null],[12,"state_root","","The state root after executing the transaction.",108,null],[12,"gas_used","","The total gas used in the block following execution of the transaction.",108,null],[12,"log_bloom","","The OR-wide combination of all logs&#39; blooms for this transaction.",108,null],[12,"logs","","The logs stemming from this transaction.",108,null],[3,"LocalizedReceipt","","Receipt with additional info.",null,null],[12,"transaction_hash","","Transaction hash.",109,null],[12,"transaction_index","","Transaction index.",109,null],[12,"block_hash","","Block hash.",109,null],[12,"block_number","","Block number.",109,null],[12,"cumulative_gas_used","","The total gas used in the block following execution of the transaction.",109,null],[12,"gas_used","","The gas used in the execution of the transaction. Note the difference of meaning to `Receipt::gas_used`.",109,null],[12,"contract_address","","Contract address.",109,null],[12,"logs","","Logs",109,null],[0,"tree_route","ethcore","Tree route info type definition",null,null],[3,"TreeRoute","ethcore::tree_route","Represents a tree route between `from` block and `to` block:",null,null],[12,"blocks","","A vector of hashes of all blocks, ordered from `from` to `to`.",110,null],[12,"ancestor","","Best common ancestor of these blocks.",110,null],[12,"index","","An index where best common ancestor would be.",110,null],[0,"blockchain_info","ethcore","Blockhain info type definition",null,null],[3,"BlockChainInfo","ethcore::blockchain_info","Information about the blockchain gathered together.",null,null],[12,"total_difficulty","","Blockchain difficulty.",20,null],[12,"pending_total_difficulty","","Block queue difficulty.",20,null],[12,"genesis_hash","","Genesis block hash.",20,null],[12,"best_block_hash","","Best blockchain block hash.",20,null],[12,"best_block_number","","Best blockchain block number.",20,null],[0,"log_entry","ethcore","Log entry type definition.",null,null],[3,"LogEntry","ethcore::log_entry","A record of execution for a `LOG` operation.",null,null],[12,"address","","The address of the contract executing at the point of the `LOG` operation.",111,null],[12,"topics","","The topics associated with the `LOG` operation.",111,null],[12,"data","","The data associated with the `LOG` operation.",111,null],[3,"LocalizedLogEntry","","Log localized in a blockchain.",null,null],[12,"entry","","Plain log entry.",112,null],[12,"block_hash","","Block in which this log was created.",112,null],[12,"block_number","","Block number.",112,null],[12,"transaction_hash","","Hash of transaction in which this log was created.",112,null],[12,"transaction_index","","Index of transaction within block.",112,null],[12,"log_index","","Log position in the block.",112,null],[0,"trace_types","ethcore","Types used in the public api",null,null],[0,"filter","ethcore::trace_types","Trace filters type definitions",null,null],[3,"AddressesFilter","ethcore::trace_types::filter","Addresses filter.",null,null],[3,"Filter","","Traces filter.",null,null],[12,"range","","Block range.",60,null],[12,"from_address","","From address filter.",60,null],[12,"to_address","","To address filter.",60,null],[0,"trace","ethcore::trace_types","Tracing datatypes.",null,null],[3,"CallResult","ethcore::trace_types::trace","`Call` result.",null,null],[12,"gas_used","","Gas used by call.",73,null],[12,"output","","Call Output.",73,null],[3,"CreateResult","","`Create` result.",null,null],[12,"gas_used","","Gas used by create.",74,null],[12,"code","","Code of the newly created contract.",74,null],[12,"address","","Address of the newly created contract.",74,null],[3,"Call","","Description of a _call_ action, either a `CALL` operation or a message transction.",null,null],[12,"from","","The sending account.",75,null],[12,"to","","The destination account.",75,null],[12,"value","","The value transferred to the destination account.",75,null],[12,"gas","","The gas available for executing the call.",75,null],[12,"input","","The input data provided to the call.",75,null],[3,"Create","","Description of a _create_ action, either a `CREATE` operation or a create transction.",null,null],[12,"from","","The address of the creator.",76,null],[12,"value","","The value with which the new account is endowed.",76,null],[12,"gas","","The gas available for the creation init code.",76,null],[12,"init","","The init code.",76,null],[3,"Trace","","A trace; includes a description of the action being traced and sub traces of each interior action.",null,null],[12,"depth","","The number of EVM execution environments active when this action happened; 0 if it&#39;s\nthe outer action of the transaction.",54,null],[12,"action","","The action being performed.",54,null],[12,"subs","","The sub traces for each interior action performed as part of this call.",54,null],[12,"result","","The result of the performed action.",54,null],[3,"MemoryDiff","","A diff of some chunk of memory.",null,null],[12,"offset","","Offset into memory the change begins.",58,null],[12,"data","","The changed data.",58,null],[3,"StorageDiff","","A diff of some storage value.",null,null],[12,"location","","Which key in storage is changed.",59,null],[12,"value","","What the value has been changed to.",59,null],[3,"VMExecutedOperation","","A record of an executed VM operation.",null,null],[12,"gas_used","","The total gas used.",57,null],[12,"stack_push","","The stack item placed, if any.",57,null],[12,"mem_diff","","If altered, the memory delta.",57,null],[12,"store_diff","","The altered storage value, if any.",57,null],[3,"VMOperation","","A record of the execution of a single VM operation.",null,null],[12,"pc","","The program counter.",56,null],[12,"instruction","","The instruction executed.",56,null],[12,"gas_cost","","The gas cost for this instruction.",56,null],[12,"executed","","Information concerning the execution of the operation.",56,null],[3,"VMTrace","","A record of a full VM trace for a CALL/CREATE.",null,null],[12,"parent_step","","The step (i.e. index into operations) at which this trace corresponds.",55,null],[12,"code","","The code to be executed.",55,null],[12,"operations","","The operations executed.",55,null],[12,"subs","","The sub traces for each interior action performed as part of this call/create.\nThre is a 1:1 correspondance between these and a CALL/CREATE/CALLCODE/DELEGATECALL instruction.",55,null],[4,"Action","","Description of an action that we trace; will be either a call or a create.",null,null],[13,"Call","","It&#39;s a call action.",77,null],[13,"Create","","It&#39;s a create action.",77,null],[4,"Res","","The result of the performed action.",null,null],[13,"Call","","Successful call action result.",78,null],[13,"Create","","Successful create action result.",78,null],[13,"FailedCall","","Failed call.",78,null],[13,"FailedCreate","","Failed create.",78,null],[0,"localized","ethcore::trace_types","Localized traces type definitions",null,null],[3,"LocalizedTrace","ethcore::trace_types::localized","Localized trace.",null,null],[12,"action","","Type of action performed by a transaction.",62,null],[12,"result","","Result of this action.",62,null],[12,"subtraces","","Number of subtraces.",62,null],[12,"trace_address","","Exact location of trace.",62,null],[12,"transaction_number","","Transaction number within the block.",62,null],[12,"transaction_hash","","Signed transaction hash.",62,null],[12,"block_number","","Block number.",62,null],[12,"block_hash","","Block hash.",62,null],[0,"executed","ethcore","Transaction execution format module.",null,null],[3,"Executed","ethcore::executed","Transaction execution receipt.",null,null],[12,"gas","","Gas paid up front for execution of transaction.",28,null],[12,"gas_used","","Gas used during execution of transaction.",28,null],[12,"refunded","","Gas refunded after the execution of transaction.\nTo get gas that was required up front, add `refunded` and `gas_used`.",28,null],[12,"cumulative_gas_used","","Cumulative gas used in current block so far.",28,null],[12,"logs","","Vector of logs generated by transaction.",28,null],[12,"contracts_created","","Addresses of contracts created during execution of transaction.\nOrdered from earliest creation.",28,null],[12,"output","","Transaction output.",28,null],[12,"trace","","The trace of this transaction.",28,null],[12,"vm_trace","","The VM trace of this transaction.",28,null],[12,"state_diff","","The state diff, if we traced it.",28,null],[4,"ExecutionError","","Result of executing the transaction.",null,null],[13,"NotEnoughBaseGas","","Returned when there gas paid for transaction execution is\nlower than base gas required.",42,null],[12,"required","ethcore::executed::ExecutionError","Absolute minimum gas required.",42,null],[12,"got","","Gas provided.",42,null],[13,"BlockGasLimitReached","ethcore::executed","Returned when block (gas_used + gas) &gt; gas_limit.",42,null],[12,"gas_limit","ethcore::executed::ExecutionError","Gas limit of block for transaction.",42,null],[12,"gas_used","","Gas used in block prior to transaction.",42,null],[12,"gas","","Amount of gas in block.",42,null],[13,"InvalidNonce","ethcore::executed","Returned when transaction nonce does not match state nonce.",42,null],[12,"expected","ethcore::executed::ExecutionError","Nonce expected.",42,null],[12,"got","","Nonce found.",42,null],[13,"NotEnoughCash","ethcore::executed","Returned when cost of transaction (value + gas_price * gas) exceeds\ncurrent sender balance.",42,null],[12,"required","ethcore::executed::ExecutionError","Minimum required balance.",42,null],[12,"got","","Actual balance.",42,null],[13,"Internal","ethcore::executed","Returned when internal evm error occurs.",42,null],[13,"TransactionMalformed","","Returned when generic transaction occurs",42,null],[6,"ExecutionResult","","Transaction execution result.",null,null],[0,"block_status","ethcore","Block status description module",null,null],[4,"BlockStatus","ethcore::block_status","General block status",null,null],[13,"InChain","","Part of the blockchain.",32,null],[13,"Queued","","Queued for import.",32,null],[13,"Bad","","Known as bad.",32,null],[13,"Unknown","","Unknown.",32,null],[0,"account_diff","ethcore","Diff between two accounts.",null,null],[3,"AccountDiff","ethcore::account_diff","Account diff.",null,null],[12,"balance","","Change in balance, allowed to be `Diff::Same`.",113,null],[12,"nonce","","Change in nonce, allowed to be `Diff::Same`.",113,null],[12,"code","","Change in code, allowed to be `Diff::Same`.",113,null],[12,"storage","","Change in storage, values are not allowed to be `Diff::Same`.",113,null],[4,"Diff","","Diff type for specifying a change (or not).",null,null],[13,"Same","","Both sides are the same.",114,null],[13,"Born","","Left (pre, source) side doesn&#39;t include value, right side (post, destination) does.",114,null],[13,"Changed","","Both sides include data; it chaged value between them.",114,null],[13,"Died","","Left (pre, source) side does include value, right side (post, destination) does not.",114,null],[4,"Existance","","Change in existance type.",null,null],[13,"Born","","Item came into existance.",115,null],[13,"Alive","","Item stayed in existance.",115,null],[13,"Died","","Item went out of existance.",115,null],[0,"state_diff","ethcore","State diff module.",null,null],[3,"StateDiff","ethcore::state_diff","Expression for the delta between two system states. Encoded the\ndelta of every altered account.",null,null],[12,"0","","",116,null],[14,"evm_test!","ethcore","Create tests by injecting different VM factories",null,null],[14,"evm_test_ignore!","","Create ignored tests by injecting different VM factories",null,null],[11,"signature","ethcore::header","Get the none field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"h520"}}],[11,"nonce","","Get the none field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"h64"}}],[11,"mix_hash","","Get the mix hash field of the header.",50,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"set_nonce_and_mix_hash","","Set the nonce and mix hash fields of the header.",50,{"inputs":[{"name":"header"},{"name":"h64"},{"name":"h256"}],"output":null}],[11,"fmt","ethcore::transaction","",107,{"inputs":[{"name":"action"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"action"}],"output":{"name":"action"}}],[11,"eq","","",107,{"inputs":[{"name":"action"},{"name":"action"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"action"},{"name":"action"}],"output":{"name":"bool"}}],[11,"size","","",107,{"inputs":[{"name":"action"}],"output":{"name":"usize"}}],[11,"to_bytes","","",107,null],[11,"from_bytes","","",107,null],[11,"len_params","","",107,{"inputs":[],"output":{"name":"usize"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"action"}}],[11,"decode","","",107,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"transaction"}}],[11,"fmt","","",105,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"transaction"}],"output":{"name":"transaction"}}],[11,"eq","","",105,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"size","","",105,{"inputs":[{"name":"transaction"}],"output":{"name":"usize"}}],[11,"to_bytes","","",105,null],[11,"from_bytes","","",105,null],[11,"len_params","","",105,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append_unsigned_transaction","","Append object with a without signature into RLP stream",105,{"inputs":[{"name":"transaction"},{"name":"rlpstream"}],"output":null}],[11,"from","","",117,{"inputs":[{"name":"transaction"}],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"transaction"}],"output":{"name":"self"}}],[11,"hash","","The message hash of the transaction.",105,{"inputs":[{"name":"transaction"}],"output":{"name":"h256"}}],[11,"sign","","Signs the transaction as coming from `sender`.",105,{"inputs":[{"name":"transaction"},{"name":"secret"}],"output":{"name":"signedtransaction"}}],[11,"with_signature","","Signs the transaction with signature.",105,{"inputs":[{"name":"transaction"},{"name":"h520"}],"output":{"name":"signedtransaction"}}],[11,"fake_sign","","Specify the sender; this won&#39;t survive the serialize/deserialize process, but can be cloned.",105,{"inputs":[{"name":"transaction"},{"name":"address"}],"output":{"name":"signedtransaction"}}],[11,"gas_required_for","","Get the transaction cost in gas for the given params.",105,null],[11,"gas_required","","Get the transaction cost in gas for this transaction.",105,{"inputs":[{"name":"transaction"},{"name":"schedule"}],"output":{"name":"u64"}}],[11,"fmt","","",117,{"inputs":[{"name":"signedtransaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"signedtransaction"}}],[11,"size","","",117,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"usize"}}],[11,"to_bytes","","",117,null],[11,"from_bytes","","",117,null],[11,"len_params","","",117,{"inputs":[],"output":{"name":"usize"}}],[11,"eq","","",117,{"inputs":[{"name":"signedtransaction"},{"name":"signedtransaction"}],"output":{"name":"bool"}}],[11,"deref","","",117,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"target"}}],[11,"decode","","",117,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"rlp_append","","",117,{"inputs":[{"name":"signedtransaction"},{"name":"rlpstream"}],"output":null}],[11,"rlp_append_sealed_transaction","","Append object with a signature into RLP stream",117,{"inputs":[{"name":"signedtransaction"},{"name":"rlpstream"}],"output":null}],[11,"hash","","Get the hash of this header (sha3 of the RLP).",117,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"h256"}}],[11,"standard_v","","0 is `v` is 27, 1 if 28, and 4 otherwise.",117,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"u8"}}],[11,"signature","","Construct a signature object from the sig.",117,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"signature"}}],[11,"check_low_s","","Checks whether the signature has a low &#39;s&#39; value.",117,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"result"}}],[11,"sender","","Returns transaction sender.",117,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"localizedtransaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"localizedtransaction"},{"name":"localizedtransaction"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"localizedtransaction"},{"name":"localizedtransaction"}],"output":{"name":"bool"}}],[11,"size","","",106,{"inputs":[{"name":"localizedtransaction"}],"output":{"name":"usize"}}],[11,"to_bytes","","",106,null],[11,"from_bytes","","",106,null],[11,"len_params","","",106,{"inputs":[],"output":{"name":"usize"}}],[11,"deref","","",106,{"inputs":[{"name":"localizedtransaction"}],"output":{"name":"target"}}],[11,"default","ethcore::receipt","",108,{"inputs":[],"output":{"name":"receipt"}}],[11,"fmt","","",108,{"inputs":[{"name":"receipt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"receipt"}],"output":{"name":"receipt"}}],[11,"size","","",108,{"inputs":[{"name":"receipt"}],"output":{"name":"usize"}}],[11,"to_bytes","","",108,null],[11,"from_bytes","","",108,null],[11,"len_params","","",108,{"inputs":[],"output":{"name":"usize"}}],[11,"new","","Create a new receipt.",108,{"inputs":[{"name":"h256"},{"name":"u256"},{"name":"vec"}],"output":{"name":"receipt"}}],[11,"rlp_append","","",108,{"inputs":[{"name":"receipt"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",108,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",108,{"inputs":[{"name":"receipt"}],"output":{"name":"usize"}}],[11,"fmt","","",109,{"inputs":[{"name":"localizedreceipt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"localizedreceipt"}],"output":{"name":"localizedreceipt"}}],[11,"eq","","",109,{"inputs":[{"name":"localizedreceipt"},{"name":"localizedreceipt"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"localizedreceipt"},{"name":"localizedreceipt"}],"output":{"name":"bool"}}],[11,"size","","",109,{"inputs":[{"name":"localizedreceipt"}],"output":{"name":"usize"}}],[11,"to_bytes","","",109,null],[11,"from_bytes","","",109,null],[11,"len_params","","",109,{"inputs":[],"output":{"name":"usize"}}],[11,"fmt","ethcore::tree_route","",110,{"inputs":[{"name":"treeroute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","ethcore::log_entry","",111,{"inputs":[],"output":{"name":"logentry"}}],[11,"fmt","","",111,{"inputs":[{"name":"logentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"logentry"}],"output":{"name":"logentry"}}],[11,"eq","","",111,{"inputs":[{"name":"logentry"},{"name":"logentry"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"logentry"},{"name":"logentry"}],"output":{"name":"bool"}}],[11,"size","","",111,{"inputs":[{"name":"logentry"}],"output":{"name":"usize"}}],[11,"to_bytes","","",111,null],[11,"from_bytes","","",111,null],[11,"len_params","","",111,{"inputs":[],"output":{"name":"usize"}}],[11,"rlp_append","","",111,{"inputs":[{"name":"logentry"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",111,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",111,{"inputs":[{"name":"logentry"}],"output":{"name":"usize"}}],[11,"bloom","","Calculates the bloom of this log entry.",111,{"inputs":[{"name":"logentry"}],"output":{"name":"logbloom"}}],[11,"from","","",111,{"inputs":[{"name":"log"}],"output":{"name":"self"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"localizedlogentry"}}],[11,"fmt","","",112,{"inputs":[{"name":"localizedlogentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"localizedlogentry"},{"name":"localizedlogentry"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"localizedlogentry"},{"name":"localizedlogentry"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"localizedlogentry"}],"output":{"name":"localizedlogentry"}}],[11,"size","","",112,{"inputs":[{"name":"localizedlogentry"}],"output":{"name":"usize"}}],[11,"to_bytes","","",112,null],[11,"from_bytes","","",112,null],[11,"len_params","","",112,{"inputs":[],"output":{"name":"usize"}}],[11,"deref","","",112,{"inputs":[{"name":"localizedlogentry"}],"output":{"name":"target"}}],[11,"fmt","ethcore::account_diff","",114,{"inputs":[{"name":"diff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"diff"},{"name":"diff"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"diff"},{"name":"diff"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"diff"}],"output":{"name":"diff"}}],[11,"new","","Construct new object with given `pre` and `post`.",114,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre","","Get the before value, if there is one.",114,{"inputs":[{"name":"diff"}],"output":{"name":"option"}}],[11,"post","","Get the after value, if there is one.",114,{"inputs":[{"name":"diff"}],"output":{"name":"option"}}],[11,"is_same","","Determine whether there was a change or not.",114,{"inputs":[{"name":"diff"}],"output":{"name":"bool"}}],[11,"fmt","","",113,{"inputs":[{"name":"accountdiff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",113,{"inputs":[{"name":"accountdiff"},{"name":"accountdiff"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"accountdiff"},{"name":"accountdiff"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"accountdiff"}],"output":{"name":"accountdiff"}}],[11,"fmt","","",115,{"inputs":[{"name":"existance"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"existance"},{"name":"existance"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"existance"}],"output":{"name":"existance"}}],[11,"fmt","","",115,{"inputs":[{"name":"existance"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"existance","","Get `Existance` projection.",113,{"inputs":[{"name":"accountdiff"}],"output":{"name":"existance"}}],[11,"fmt","","",113,{"inputs":[{"name":"accountdiff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","ethcore::state_diff","",116,{"inputs":[{"name":"statediff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"statediff"},{"name":"statediff"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"statediff"},{"name":"statediff"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"statediff"}],"output":{"name":"statediff"}}],[11,"get","","Get the actual data.",116,{"inputs":[{"name":"statediff"}],"output":{"name":"btreemap"}}],[11,"fmt","","",116,{"inputs":[{"name":"statediff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",116,{"inputs":[{"name":"statediff"}],"output":{"name":"target"}}]],"paths":[[4,"Error"],[3,"Secret"],[3,"Message"],[3,"Address"],[3,"AccountProvider"],[3,"BasicAuthorityParams"],[3,"BasicAuthority"],[3,"Block"],[3,"BlockRefMut"],[3,"BlockRef"],[8,"IsBlock"],[3,"ExecutedBlock"],[3,"ClosedBlock"],[3,"LockedBlock"],[3,"OpenBlock"],[3,"SealedBlock"],[3,"BlockQueueConfig"],[3,"BlockQueueInfo"],[3,"BlockQueue"],[3,"BlockChainCacheSize"],[3,"BlockChainInfo"],[3,"ClientReport"],[3,"ClientConfig"],[3,"Config"],[3,"TraceId"],[3,"UncleID"],[3,"TestBlockChainClient"],[3,"TraceFilter"],[3,"Executed"],[3,"TransactOptions"],[3,"EnvInfo"],[3,"CallAnalytics"],[4,"BlockStatus"],[4,"Switch"],[4,"VMType"],[4,"Error"],[4,"BlockID"],[4,"TransactionID"],[4,"EachBlockWith"],[3,"Client"],[8,"BlockChainClient"],[8,"MiningBlockChainClient"],[4,"ExecutionError"],[4,"TransactionError"],[4,"BlockError"],[4,"ImportError"],[4,"Error"],[3,"EthashParams"],[3,"Ethash"],[3,"Filter"],[3,"Header"],[4,"SyncMessage"],[3,"ClientService"],[3,"Config"],[3,"Trace"],[3,"VMTrace"],[3,"VMOperation"],[3,"VMExecutedOperation"],[3,"MemoryDiff"],[3,"StorageDiff"],[3,"Filter"],[3,"ImportRequest"],[3,"LocalizedTrace"],[4,"Error"],[3,"BlockTraces"],[3,"TraceDB"],[3,"ExecutiveTracer"],[3,"ExecutiveVMTracer"],[3,"FlatTrace"],[3,"FlatTransactionTraces"],[3,"FlatBlockTraces"],[3,"NoopTracer"],[3,"NoopVMTracer"],[3,"CallResult"],[3,"CreateResult"],[3,"Call"],[3,"Create"],[4,"Action"],[4,"Res"],[8,"Tracer"],[8,"VMTracer"],[8,"DatabaseExtras"],[8,"Database"],[3,"Genesis"],[3,"CommonParams"],[3,"Spec"],[3,"TransactionView"],[3,"AccountView"],[3,"BlockView"],[3,"HeaderView"],[3,"PodState"],[8,"Engine"],[3,"ToV6"],[3,"AccountDetails"],[3,"MinerStatus"],[4,"TransactionImportResult"],[4,"TransactionOrigin"],[3,"Miner"],[3,"ExternalMiner"],[3,"TransactionQueue"],[8,"ExternalMinerService"],[8,"MinerService"],[3,"Executive"],[3,"AddressesFilter"],[3,"BTreeMap"],[3,"Transaction"],[3,"LocalizedTransaction"],[4,"Action"],[3,"Receipt"],[3,"LocalizedReceipt"],[3,"TreeRoute"],[3,"LogEntry"],[3,"LocalizedLogEntry"],[3,"AccountDiff"],[4,"Diff"],[4,"Existance"],[3,"StateDiff"],[3,"SignedTransaction"]]};
searchIndex["ethstore"] = {"doc":"","items":[[3,"SafeAccount","ethstore","",null,null],[12,"id","","",0,null],[12,"version","","",0,null],[12,"address","","",0,null],[12,"crypto","","",0,null],[3,"EthStore","","",null,null],[3,"PresaleWallet","","",null,null],[4,"Error","","",null,null],[13,"Io","","",1,null],[13,"InvalidPassword","","",1,null],[13,"InvalidSecret","","",1,null],[13,"InvalidAccount","","",1,null],[13,"CreationFailed","","",1,null],[13,"EthKey","","",1,null],[13,"Custom","","",1,null],[5,"import_accounts","","",null,{"inputs":[{"name":"keydirectory"},{"name":"keydirectory"}],"output":{"name":"result"}}],[0,"dir","","",null,null],[3,"DiskDirectory","ethstore::dir","",null,null],[3,"GethDirectory","","",null,null],[3,"ParityDirectory","","",null,null],[4,"DirectoryType","","",null,null],[13,"Testnet","","",2,null],[13,"Main","","",2,null],[11,"create","","",3,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"at","","",3,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"load","","",3,{"inputs":[{"name":"diskdirectory"}],"output":{"name":"result"}}],[11,"insert","","",3,{"inputs":[{"name":"diskdirectory"},{"name":"safeaccount"}],"output":{"name":"result"}}],[11,"remove","","",3,{"inputs":[{"name":"diskdirectory"},{"name":"address"}],"output":{"name":"result"}}],[11,"create","","",4,{"inputs":[{"name":"directorytype"}],"output":{"name":"result"}}],[11,"open","","",4,{"inputs":[{"name":"directorytype"}],"output":{"name":"self"}}],[11,"load","","",4,{"inputs":[{"name":"gethdirectory"}],"output":{"name":"result"}}],[11,"insert","","",4,{"inputs":[{"name":"gethdirectory"},{"name":"safeaccount"}],"output":{"name":"result"}}],[11,"remove","","",4,{"inputs":[{"name":"gethdirectory"},{"name":"address"}],"output":{"name":"result"}}],[11,"create","","",5,{"inputs":[{"name":"directorytype"}],"output":{"name":"result"}}],[11,"open","","",5,{"inputs":[{"name":"directorytype"}],"output":{"name":"self"}}],[11,"load","","",5,{"inputs":[{"name":"paritydirectory"}],"output":{"name":"result"}}],[11,"insert","","",5,{"inputs":[{"name":"paritydirectory"},{"name":"safeaccount"}],"output":{"name":"result"}}],[11,"remove","","",5,{"inputs":[{"name":"paritydirectory"},{"name":"address"}],"output":{"name":"result"}}],[8,"KeyDirectory","","",null,null],[10,"load","","",6,{"inputs":[{"name":"keydirectory"}],"output":{"name":"result"}}],[10,"insert","","",6,{"inputs":[{"name":"keydirectory"},{"name":"safeaccount"}],"output":{"name":"result"}}],[10,"remove","","",6,{"inputs":[{"name":"keydirectory"},{"name":"address"}],"output":{"name":"result"}}],[0,"ethkey","ethstore","ethkey reexport to make documentation look pretty.",null,null],[11,"into","ethkey::primitive","",7,{"inputs":[{"name":"address"}],"output":{"name":"h160"}}],[11,"from","","",7,{"inputs":[{"name":"h160"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"h160"}],"output":{"name":"self"}}],[11,"clone","ethstore","",0,{"inputs":[{"name":"safeaccount"}],"output":{"name":"safeaccount"}}],[11,"eq","","",0,{"inputs":[{"name":"safeaccount"},{"name":"safeaccount"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"safeaccount"},{"name":"safeaccount"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"safeaccount"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"keyfile"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"safeaccount"}],"output":{"name":"keyfile"}}],[11,"create","","",0,null],[11,"sign","","",0,{"inputs":[{"name":"safeaccount"},{"name":"str"},{"name":"message"}],"output":{"name":"result"}}],[11,"change_password","","",0,{"inputs":[{"name":"safeaccount"},{"name":"str"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"check_password","","",0,{"inputs":[{"name":"safeaccount"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"ioerror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"ethkeyerror"}],"output":{"name":"self"}}],[11,"open","","",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"open_with_iterations","","",8,{"inputs":[{"name":"box"},{"name":"u32"}],"output":{"name":"result"}}],[11,"insert_account","","",8,{"inputs":[{"name":"ethstore"},{"name":"secret"},{"name":"str"}],"output":{"name":"result"}}],[11,"accounts","","",8,{"inputs":[{"name":"ethstore"}],"output":{"name":"vec"}}],[11,"change_password","","",8,{"inputs":[{"name":"ethstore"},{"name":"address"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remove_account","","",8,{"inputs":[{"name":"ethstore"},{"name":"address"},{"name":"str"}],"output":{"name":"result"}}],[11,"sign","","",8,{"inputs":[{"name":"ethstore"},{"name":"address"},{"name":"str"},{"name":"message"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"presalewallet"}],"output":{"name":"self"}}],[11,"open","","",9,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"decrypt","","",9,{"inputs":[{"name":"presalewallet"},{"name":"str"}],"output":{"name":"result"}}],[8,"SecretStore","","",null,null],[10,"insert_account","","",10,{"inputs":[{"name":"secretstore"},{"name":"secret"},{"name":"str"}],"output":{"name":"result"}}],[10,"accounts","","",10,{"inputs":[{"name":"secretstore"}],"output":{"name":"vec"}}],[10,"change_password","","",10,{"inputs":[{"name":"secretstore"},{"name":"address"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"remove_account","","",10,{"inputs":[{"name":"secretstore"},{"name":"address"},{"name":"str"}],"output":{"name":"result"}}],[10,"sign","","",10,{"inputs":[{"name":"secretstore"},{"name":"address"},{"name":"str"},{"name":"message"}],"output":{"name":"result"}}]],"paths":[[3,"SafeAccount"],[4,"Error"],[4,"DirectoryType"],[3,"DiskDirectory"],[3,"GethDirectory"],[3,"ParityDirectory"],[8,"KeyDirectory"],[3,"Address"],[3,"EthStore"],[3,"PresaleWallet"],[8,"SecretStore"]]};
searchIndex["ethkey"] = {"doc":"","items":[[3,"Brain","ethkey","Simple brainwallet.",null,null],[3,"KeyPair","","secp256k1 key pair",null,null],[3,"Secret","","",null,null],[3,"Public","","",null,null],[3,"Address","","",null,null],[3,"Message","","",null,null],[3,"Prefix","","Tries to find keypair with address starting with given prefix.",null,null],[3,"Random","","Randomly generates new keypair.",null,null],[3,"Signature","","",null,null],[4,"Error","","Crypto error",null,null],[13,"InvalidSecret","","Invalid secret key",0,null],[13,"InvalidPublic","","Invalid public key",0,null],[13,"InvalidAddress","","Invalid address",0,null],[13,"InvalidSignature","","Invalid EC signature",0,null],[13,"InvalidMessage","","Invalid AES message",0,null],[13,"Io","","IO Error",0,null],[13,"Custom","","Custom",0,null],[5,"public_to_address","","",null,{"inputs":[{"name":"public"}],"output":{"name":"address"}}],[5,"sign","","",null,{"inputs":[{"name":"secret"},{"name":"message"}],"output":{"name":"result"}}],[5,"verify_public","","",null,{"inputs":[{"name":"public"},{"name":"signature"},{"name":"message"}],"output":{"name":"result"}}],[5,"verify_address","","",null,{"inputs":[{"name":"address"},{"name":"signature"},{"name":"message"}],"output":{"name":"result"}}],[5,"recover","","",null,{"inputs":[{"name":"signature"},{"name":"message"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"generate","","",1,{"inputs":[{"name":"brain"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",2,{"inputs":[{"name":"keypair"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_secret","","Create a pair from secret key",2,{"inputs":[{"name":"secret"}],"output":{"name":"result"}}],[11,"from_keypair","","",2,{"inputs":[{"name":"secretkey"},{"name":"publickey"}],"output":{"name":"self"}}],[11,"secret","","",2,{"inputs":[{"name":"keypair"}],"output":{"name":"secret"}}],[11,"public","","",2,{"inputs":[{"name":"keypair"}],"output":{"name":"public"}}],[11,"address","","",2,{"inputs":[{"name":"keypair"}],"output":{"name":"address"}}],[11,"new","","",3,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"self"}}],[11,"generate","","",3,{"inputs":[{"name":"prefix"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",4,{"inputs":[{"name":"address"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",4,null],[11,"into","","",4,null],[11,"hash","","",4,{"inputs":[{"name":"address"},{"name":"h"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"address"}],"output":{"name":"target"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"address"}],"output":{"name":"target"}}],[11,"fmt","","",5,{"inputs":[{"name":"secret"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"secret"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"secret"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"secret"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"secret"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",5,{"inputs":[{"name":"secret"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",5,null],[11,"into","","",5,null],[11,"hash","","",5,{"inputs":[{"name":"secret"},{"name":"h"}],"output":null}],[11,"deref","","",5,{"inputs":[{"name":"secret"}],"output":{"name":"target"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"secret"}],"output":{"name":"target"}}],[11,"fmt","","",6,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"message"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"message"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"message"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"message"}],"output":{"name":"self"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",6,null],[11,"into","","",6,null],[11,"hash","","",6,{"inputs":[{"name":"message"},{"name":"h"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"message"}],"output":{"name":"target"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"message"}],"output":{"name":"target"}}],[11,"fmt","","",7,{"inputs":[{"name":"public"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"public"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"public"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"public"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"public"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",7,{"inputs":[{"name":"public"}],"output":{"name":"self"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",7,null],[11,"into","","",7,null],[11,"hash","","",7,{"inputs":[{"name":"public"},{"name":"h"}],"output":null}],[11,"deref","","",7,{"inputs":[{"name":"public"}],"output":{"name":"target"}}],[11,"deref_mut","","",7,{"inputs":[{"name":"public"}],"output":{"name":"target"}}],[11,"generate","","",8,{"inputs":[{"name":"random"}],"output":{"name":"result"}}],[11,"r","","Get a slice into the &#39;r&#39; portion of the data.",9,null],[11,"s","","Get a slice into the &#39;s&#39; portion of the data.",9,null],[11,"v","","Get the recovery byte.",9,{"inputs":[{"name":"signature"}],"output":{"name":"u8"}}],[11,"eq","","",9,{"inputs":[{"name":"signature"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",9,null],[11,"into","","",9,null],[11,"deref","","",9,{"inputs":[{"name":"signature"}],"output":{"name":"target"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"signature"}],"output":{"name":"target"}}],[8,"Generator","","Generates new keypair.",null,null],[10,"generate","","Should be called to generate new keypair.",10,{"inputs":[{"name":"generator"}],"output":{"name":"result"}}],[11,"sign_schnorr","secp256k1","Create a Schnorr signature",11,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"verify_schnorr","","Verify a Schnorr signature",11,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}],[11,"recover_schnorr","","Retrieves the public key for which `sig` is a valid signature for `msg`.\nRequires a verify-capable context.",11,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"}],"output":{"name":"result"}}],[11,"new","","Creates a new Secp256k1 context",11,{"inputs":[],"output":{"name":"secp256k1"}}],[11,"with_caps","","Creates a new Secp256k1 context with the specified capabilities",11,{"inputs":[{"name":"contextflag"}],"output":{"name":"secp256k1"}}],[11,"without_caps","","Creates a new Secp256k1 context with no capabilities (just de/serialization)",11,{"inputs":[],"output":{"name":"secp256k1"}}],[11,"randomize","","(Re)randomizes the Secp256k1 context for cheap sidechannel resistence;\nsee comment in libsecp256k1 commit d2275795f by Gregory Maxwell",11,null],[11,"generate_keypair","","Generates a random keypair. Convenience function for `key::SecretKey::new`\nand `key::PublicKey::from_secret_key`; call those functions directly for\nbatch key generation. Requires a signing-capable context.",11,{"inputs":[{"name":"secp256k1"},{"name":"r"}],"output":{"name":"result"}}],[11,"sign","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce\nRequires a signing-capable context.",11,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"sign_recoverable","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce\nRequires a signing-capable context.",11,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"recover","","Determines the public key for which `sig` is a valid signature for\n`msg`. Requires a verify-capable context.",11,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"recoverablesignature"}],"output":{"name":"result"}}],[11,"verify","","Checks that `sig` is a valid ECDSA signature for `msg` using the public\nkey `pubkey`. Returns `Ok(true)` on success. Note that this function cannot\nbe used for Bitcoin consensus checking since there may exist signatures\nwhich OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a\nverify-capable context.",11,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}],[11,"drop","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"secp256k1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"secp256k1"},{"name":"secp256k1"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}]],"paths":[[4,"Error"],[3,"Brain"],[3,"KeyPair"],[3,"Prefix"],[3,"Address"],[3,"Secret"],[3,"Message"],[3,"Public"],[3,"Random"],[3,"Signature"],[8,"Generator"],[3,"Secp256k1"]]};
searchIndex["ethash"] = {"doc":"Ethash implementation\nSee https://github.com/ethereum/wiki/wiki/Ethash","items":[[3,"ProofOfWork","ethash","Computation result",null,null],[12,"value","","Difficulty boundary",0,null],[12,"mix_hash","","Mix",0,null],[3,"SeedHashCompute","","",null,null],[3,"EthashManager","","Light/Full cache manager.",null,null],[5,"quick_get_difficulty","","Difficulty quick check for POW preverification",null,{"inputs":[{"name":"h256"},{"name":"u64"},{"name":"h256"}],"output":{"name":"h256"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"seedhashcompute"}}],[11,"get_seedhash","","",1,{"inputs":[{"name":"seedhashcompute"},{"name":"u64"}],"output":{"name":"h256"}}],[11,"resume_compute_seedhash","","",1,{"inputs":[{"name":"h256"},{"name":"u64"},{"name":"u64"}],"output":{"name":"h256"}}],[6,"H256","","",null,null],[17,"ETHASH_EPOCH_LENGTH","","",null,null],[11,"new","","Create a new new instance of ethash manager",2,{"inputs":[],"output":{"name":"ethashmanager"}}],[11,"compute_light","","Calculate the light client data\n`block_number` - Block number to check\n`light` - The light client handler\n`header_hash` - The header hash to pack into the mix\n`nonce` - The nonce to pack into the mix",2,{"inputs":[{"name":"ethashmanager"},{"name":"u64"},{"name":"h256"},{"name":"u64"}],"output":{"name":"proofofwork"}}]],"paths":[[3,"ProofOfWork"],[3,"SeedHashCompute"],[3,"EthashManager"]]};
initSearch(searchIndex);
